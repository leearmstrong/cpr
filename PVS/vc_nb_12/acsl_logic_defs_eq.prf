(acsl_logic_defs_eq
 (NB_TCC1 0
  (NB_TCC1-1 nil 3771157472
   ("" (rewrite "Q_nb_def" :dir rl) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q_nb_def formula-decl nil A_params nil))
   nil (NB subtype "A_params.L_nb" "NumBins")))
 (mod__eq 0
  (mod__eq-1 nil 3770377648 ("" (grind) nil nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (div_div__eq 0
  (div_div__eq-1 nil 3770377648 ("" (grind) nil nil)
   ((sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div ints)
    (div const-decl "unsigned_int" uint32 CPR)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (mod_uint_mod 0
  (mod_uint_mod-1 nil 3770377649
   ("" (skeep :preds? t)
    (("" (expand "mod_uint")
      (("" (expand "minus")
        (("" (rewrite "mod__eq")
          (("" (lemma "mod_lt_nat")
            ((""
              (inst -1 "exponentiation.^(2, 32)"
               "ref - times(n, div(ref, n))")
              (("1" (split -1)
                (("1" (replace -1 :hide? t)
                  (("1" (expand "times")
                    (("1" (rewrite "mod__eq")
                      (("1" (lemma "mod_lt_nat")
                        (("1"
                          (inst -1 "exponentiation.^(2, 32)"
                           "n * div(ref, n)")
                          (("1" (split -1)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (expand "mod")
                                (("1"
                                  (expand "div")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "div_div__eq" 1 :dir rl)
                              (("2"
                                (lemma "div.div_smaller")
                                (("2"
                                  (inst -1 "n" "ref")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil)
               ("2" (expand "times")
                (("2" (rewrite "mod__eq")
                  (("2"
                    (case "mod.mod(n * div(ref, n), exponentiation.^(2, 32)) = n * div(ref, n)")
                    (("1" (replace -1 :hide? t)
                      (("1" (rewrite "div_div__eq" 1 :dir rl)
                        (("1" (lemma "div.div_smaller")
                          (("1" (inst -1 "n" "ref")
                            (("1" (grind-reals) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "mod_lt_nat")
                      (("2"
                        (inst -1 "exponentiation.^(2, 32)"
                         "n * div(ref, n)")
                        (("2" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (rewrite "div_div__eq" 1 :dir rl)
                            (("2" (lemma "div.div_smaller")
                              (("2"
                                (inst -1 "n" "ref")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mod__eq formula-decl nil acsl_logic_defs_eq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (times const-decl "unsigned_int" uint32 CPR)
    (div const-decl "unsigned_int" uint32 CPR)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nil application-judgement "below(m)" mod nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (ref skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (n skolem-const-decl "{n: unsigned_int | n /= 0}"
     acsl_logic_defs_eq nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (div_div__eq formula-decl nil acsl_logic_defs_eq nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (div_nat formula-decl nil div ints)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_smaller formula-decl nil div ints)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "below(m)" reals_mod reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod_lt_nat formula-decl nil mod nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (mod_div_TCC1 0
  (mod_div_TCC1-1 nil 3770377641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (/= const-decl "boolean" notequal nil))
   nil (mod_div subtype "acsl_logic_defs_eq.n" "nonzero_integer")))
 (mod_div 0
  (mod_div-1 nil 3770377649
   ("" (skeep :preds? t)
    (("" (lemma "mod_lt_nat")
      (("" (inst -1 "n" "uint32.div(a, b)")
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (case "uint32.div(a, b)<=a")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (use "div_div__eq")
                (("2" (replace -1 :hide? t :dir rl)
                  (("2" (lemma "div_lt_nat")
                    (("2" (inst? -1 :where 1)
                      (("2" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (case "a/b <= a")
                            (("1" (grind-reals) nil nil)
                             ("2" (grind-reals)
                              (("2"
                                (case "1<=b")
                                (("1"
                                  (mult-by -1 "a")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((mod_lt_nat formula-decl nil mod nil)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (div_nat formula-decl nil div ints)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_lt_nat formula-decl nil div ints)
    (div_div__eq formula-decl nil acsl_logic_defs_eq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (<= const-decl "bool" reals nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" acsl_logic_defs_eq nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (unsigned_int__uint32__j 0
  (unsigned_int__uint32__j-1 nil 3771183460 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (is_uint32 const-decl "bool" cint framac_wp))
   nil
   (unsigned_int__uint32__j subtype "acsl_logic_defs_eq.x"
    "(cint.is_uint32)")))
 (uint32__unsigned_int__j 0
  (uint32__unsigned_int__j-1 nil 3771183460 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (is_uint32 const-decl "bool" cint framac_wp)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (uint32__unsigned_int__j subtype "acsl_logic_defs_eq.x"
    "unsigned_int")))
 (add_u32_j 0
  (add_u32_j-1 nil 3771183460
   ("" (skeep)
    (("" (rewrite "add_u32_def")
      (("" (rewrite "uint32__unsigned_int__j") nil nil)) nil))
    nil)
   ((add_u32_def formula-decl nil interface nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (is_uint32 const-decl "bool" cint framac_wp)
    (uint32__unsigned_int__j judgement-tcc nil acsl_logic_defs_eq nil))
   nil
   (add_u32_j subtype
    "A_uint32_operations.L_add_u32(acsl_logic_defs_eq.a, acsl_logic_defs_eq.b)"
    "unsigned_int")))
 (lsr_u32_j 0
  (lsr_u32_j-1 nil 3771183460
   ("" (skeep)
    (("" (rewrite "lsr_u32_def")
      (("" (rewrite "uint32__unsigned_int__j") nil nil)) nil))
    nil)
   ((lsr_u32_def formula-decl nil interface nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_uint32 const-decl "bool" cint framac_wp)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (lsr const-decl "int" cmath framac_wp)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (uint32__unsigned_int__j judgement-tcc nil acsl_logic_defs_eq nil))
   nil
   (lsr_u32_j subtype
    "cmath.lsr(acsl_logic_defs_eq.a, acsl_logic_defs_eq.b)"
    "unsigned_int")))
 (mul_u32_j 0
  (mul_u32_j-1 nil 3771183460
   ("" (skeep)
    (("" (rewrite "mul_u32_def")
      (("" (rewrite "uint32__unsigned_int__j") nil nil)) nil))
    nil)
   ((mul_u32_def formula-decl nil interface nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (is_uint32 const-decl "bool" cint framac_wp)
    (bool nonempty-type-eq-decl nil booleans nil)
    (uint32__unsigned_int__j judgement-tcc nil acsl_logic_defs_eq nil))
   nil
   (mul_u32_j subtype
    "A_uint32_operations.L_mul_u32(acsl_logic_defs_eq.a, acsl_logic_defs_eq.b)"
    "unsigned_int")))
 (sub_u32_j 0
  (sub_u32_j-1 nil 3771183460
   ("" (skeep)
    (("" (rewrite "sub_u32_def")
      (("" (rewrite "uint32__unsigned_int__j") nil nil)) nil))
    nil)
   ((sub_u32_def formula-decl nil interface nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (is_uint32 const-decl "bool" cint framac_wp)
    (bool nonempty-type-eq-decl nil booleans nil)
    (uint32__unsigned_int__j judgement-tcc nil acsl_logic_defs_eq nil))
   nil
   (sub_u32_j subtype
    "A_uint32_operations.L_sub_u32(acsl_logic_defs_eq.a, acsl_logic_defs_eq.b)"
    "unsigned_int")))
 (mod_u32_j 0
  (mod_u32_j-1 nil 3771183460
   ("" (skeep)
    (("" (rewrite "mod_u32_def")
      (("" (rewrite "uint32__unsigned_int__j") nil nil)) nil))
    nil)
   ((mod_u32_def formula-decl nil interface nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_uint32 const-decl "bool" cint framac_wp)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (> const-decl "bool" reals nil)
    (nil application-judgement "below(m)" mod nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (uint32__unsigned_int__j judgement-tcc nil acsl_logic_defs_eq nil))
   nil
   (mod_u32_j subtype
    "A_uint32_operations.L_mod_u32(acsl_logic_defs_eq.a, acsl_logic_defs_eq.b)"
    "unsigned_int")))
 (div_u32_j 0
  (div_u32_j-1 nil 3771227588
   ("" (skeep)
    (("" (rewrite "div_u32_def")
      (("" (rewrite "uint32__unsigned_int__j") nil nil)) nil))
    nil)
   ((div_u32_def formula-decl nil interface nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_uint32 const-decl "bool" cint framac_wp)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (> const-decl "bool" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nil application-judgement "nat" div ints)
    (div_nat formula-decl nil div ints)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (uint32__unsigned_int__j judgement-tcc nil acsl_logic_defs_eq nil))
   nil
   (div_u32_j subtype
    "A_uint32_operations.L_div_u32(acsl_logic_defs_eq.a, acsl_logic_defs_eq.b)"
    "unsigned_int")))
 (closest_mult_div_shift_j 0
  (closest_mult_div_shift_j-1 nil 3771183460
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (L_closest_mult_div_shift const-decl "int" A_utils nil)
    (L_add_u32 const-decl "int" A_uint32_operations nil)
    (L_mod_u32 const-decl "int" A_uint32_operations nil)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (lsr const-decl "int" cmath framac_wp)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (closest_mult_div_shift_j subtype
    "A_utils.L_closest_mult_div_shift(acsl_logic_defs_eq.a, acsl_logic_defs_eq.x)"
    "unsigned_int")))
 (unsinged_int__65536_j 0
  (unsinged_int__65536_j-1 nil 3771225392 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil (unsinged_int__65536_j subtype "65536" "unsigned_int")))
 (unsinged_int__131072_j 0
  (unsinged_int__131072_j-1 nil 3771227588 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil (unsinged_int__131072_j subtype "131072" "unsigned_int")))
 (add_u32__eq 0
  (add_u32__eq-1 nil 3771169544 ("" (grind) nil nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (L_add_u32 const-decl "int" A_uint32_operations nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (plus const-decl "unsigned_int" uint32 CPR)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (sub_u32__eq 0
  (sub_u32__eq-1 nil 3771169544 ("" (grind) nil nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (L_sub_u32 const-decl "int" A_uint32_operations nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (minus const-decl "unsigned_int" uint32 CPR)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (mul_u32__eq 0
  (mul_u32__eq-1 nil 3771169544 ("" (grind) nil nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (times const-decl "unsigned_int" uint32 CPR)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (shr_u32__eq 0
  (shr_u32__eq-1 nil 3771169544
   ("" (grind :rewrites ("real_expt_int_rew")) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (L_shr_u32 const-decl "int" A_uint32_operations nil)
    (pow const-decl "real" cmath framac_wp)
    (real_expt_int_rew formula-decl nil real_expt power)
    (^ const-decl "real" exponentiation nil))
   shostak))
 (lsr_u32__eq 0
  (lsr_u32__eq-1 nil 3771232362 ("" (grind) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (lsr const-decl "int" cmath framac_wp)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (mod_u32__eq_TCC1 0
  (mod_u32__eq_TCC1-1 nil 3771186282 ("" (subtype-tcc) nil nil) nil nil
   (mod_u32__eq subtype "acsl_logic_defs_eq.b"
    "{b: uint32.unsigned_int | b /= 0}")))
 (mod_u32__eq 0
  (mod_u32__eq-1 nil 3771232372
   ("" (skeep :preds? t)
    (("" (expand "L_mod_u32")
      (("" (expand "mod_uint")
        (("" (expand "mod")
          (("" (expand "div")
            (("" (case "b * floor(a / b) <= a")
              (("1" (case "0<=floor(a / b)")
                (("1"
                  (match "2^%1" step
                         (then (eval-expr "exponentiation.^(2,%1)")
                          (replace -1 :hide? t)))
                  (("1" (rewrite "mul_u32__eq" :dir rl)
                    (("1" (rewrite "mul_u32_def")
                      (("1" (rewrite "to_uint32_id")
                        (("1" (rewrite "sub_u32__eq" :dir rl)
                          (("1" (rewrite "sub_u32_def")
                            (("1" (rewrite "to_uint32_id")
                              (("1"
                                (case "0 <= b * floor(a / b)")
                                (("1"
                                  (case "-0 >= -b * floor(a / b)")
                                  (("1"
                                    (both-sides + "a" -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind-reals) nil nil))
                          nil)
                         ("2" (expand ">=")
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "floor_def")
                  (("2" (flatten)
                    (("2" (case "0<=a/b")
                      (("1" (assert) nil nil)
                       ("2" (use "pos_div_le") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "floor_def")
                (("2" (flatten)
                  (("2" (lemma "both_sides_times_pos_le2")
                    (("2" (inst -1 "b" "floor(a/b)" "a/b")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((L_mod_u32 const-decl "int" A_uint32_operations nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (floor_def formula-decl nil floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (pos_div_le formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (mul_u32_def formula-decl nil interface nil)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (sub_u32_j expr-judgement "unsigned_int" acsl_logic_defs_eq nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pos_times_le formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (zero_is_neg_zero formula-decl nil real_props nil)
    (neg_ge formula-decl nil real_props nil)
    (neg_times_ge formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sub_u32_def formula-decl nil interface nil)
    (pos_times_ge formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (to_uint32_id formula-decl nil cint framac_wp)
    (mul_u32_j expr-judgement "unsigned_int" acsl_logic_defs_eq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (div_u32__eq 0
  (div_u32__eq-1 nil 3771232672 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (expt def-decl "real" exponentiation nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div ints)
    (L_div_u32 const-decl "int" A_uint32_operations nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (minus_1_ui_TCC1 0
  (minus_1_ui_TCC1-1 nil 3771232730 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (^ const-decl "real" exponentiation nil))
   nil (minus_1_ui subtype "1" "unsigned_int")))
 (minus_1_ui 0
  (minus_1_ui-1 nil 3771232732 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (minus const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (minus_i_ui 0
  (minus_i_ui-1 nil 3771349881 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (minus const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (times_4_ui_TCC1 0
  (times_4_ui_TCC1-1 nil 3771525528
   ("" (skeep) (("" (eval-formula) nil nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (times_4_ui subtype "4" "unsigned_int")))
 (times_4_ui 0
  (times_4_ui-1 nil 3771588498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (times const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   shostak))
 (encoding__eq 0
  (encoding__eq-3 nil 3772624558
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j"
                  "real_expt_int_rew")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (use "Q_nb_def")
            (("" (replace -1 :dir rl)
              (("" (assert)
                ((""
                  (repeat
                   (match "2^%1" step
                          (then (eval-expr "exponentiation.^(2,%1)")
                           (replace -1 :hide? t))))
                  (("" (acsl-to-cpr 1) nil))))))))))))))))
    nil)
   ((encoding const-decl "unsigned_int" cpr_int CPR)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (shr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (times const-decl "unsigned_int" uint32 CPR)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (Q_nb_def formula-decl nil A_params nil)
    (L_encoding const-decl "int" A_encode nil))
   nil)
  (encoding__eq-2 nil 3771523308
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (use "Q_nb_def")
            (("" (replace -1 :dir rl)
              (("" (assert)
                ((""
                  (match "2^%1" step
                         (then (eval-expr "exponentiation.^(2,%1)")
                          (replace -1 :hide? t)))
                  (("" (acsl-to-cpr 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((encoding const-decl "unsigned_int" cpr_int CPR)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (shr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (below type-eq-decl nil naturalnumbers nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (Q_nb_def formula-decl nil A_params nil)
    (L_encoding const-decl "int" A_encode nil))
   nil)
  (encoding__eq-1 nil 3770377649
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (use "Q_nb_def")
            (("" (replace -1 :dir rl)
              (("" (assert)
                ((""
                  (match "2^%1" step
                         (then (eval-expr "exponentiation.^(2,%1)")
                          (replace -1 :hide? t)))
                  (("" (acsl-to-cpr 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((encoding const-decl "unsigned_int" cpr_int CPR)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (shr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (below type-eq-decl nil naturalnumbers nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (Q_nb_def formula-decl nil A_params nil)
    (L_encoding const-decl "int" A_encode nil))
   shostak))
 (closest_mult_div_shift__eq_TCC1 0
  (closest_mult_div_shift__eq_TCC1-1 nil 3771419185
   ("" (skeep)
    (("" (use "Q_nb_def")
      (("" (replace -1 :dir rl) (("" (eval-formula) nil nil)) nil))
      nil))
    nil)
   ((Q_nb_def formula-decl nil A_params nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil))
   nil
   (closest_mult_div_shift__eq subtype
    "(number_fields.-)(32, A_params.L_nb)"
    "{z: uint32.unsigned_int | booleans.AND(reals.<=(z, 20), reals.>=(z, 12))}")))
 (closest_mult_div_shift__eq 0
  (closest_mult_div_shift__eq-1 nil 3771419213
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (use "Q_nb_def")
            (("" (replace -1 :dir rl)
              (("" (assert)
                ((""
                  (match "2^%1" step
                         (then (eval-expr "exponentiation.^(2,%1)")
                          (replace -1 :hide? t)))
                  (("" (acsl-to-cpr 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (closest_mult_div_shift const-decl
     "{ans: unsigned_int | ans = floor((a * x) / 2 ^ z + 1 / 2)}"
     uint32 CPR)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (<= const-decl "bool" reals nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (L_closest_mult_div_shift const-decl "int" A_utils nil))
   shostak))
 (rlat_int__eq_TCC1 0
  (rlat_int__eq_TCC1-1 nil 3771419185 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (rlat_int__eq subtype "acsl_logic_defs_eq.i"
    "integers.subrange(0, 1)")))
 (rlat_int__eq 0
  (rlat_int__eq-3 nil 3771524244
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (expand "closest_div_mult")
            (("" (use "Q_nb_def")
              (("" (replace -1 :dir rl)
                (("" (assert)
                  ((""
                    (match "plus(%{number}1,%{number}2)" step
                           (then (eval-expr "plus(%1,%2)")
                            (replace -1 :hide? t)))
                    ((""
                      (repeat
                       (match "2^%1" step
                              (then
                               (eval-expr "exponentiation.^(2,%1)")
                               (replace -1 :hide? t))))
                      (("" (case "i=0")
                        (("1" (replace -1 :hide? t)
                          (("1" (assert)
                            (("1"
                              (rewrite "closest_mult_div_shift__eq")
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (assert)
                                  (("1"
                                    (match
                                     "closest_mult_div_shift(%1, %2, %3)"
                                     step
                                     (let
                                      ((newname (freshname "cpr")))
                                      (name-replace
                                       newname
                                       "closest_mult_div_shift(%1, %2, %3)")))
                                    (("1"
                                      (acsl-to-cpr 1)
                                      nil)))))))))))))
                         ("2" (case "i=1")
                          (("1" (replace -1 :hide? t)
                            (("1" (assert)
                              (("1"
                                (rewrite "closest_mult_div_shift__eq")
                                (("1"
                                  (replace -1 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (match
                                       "closest_mult_div_shift(%1, %2, %3)"
                                       step
                                       (let
                                        ((newname (freshname "cpr")))
                                        (name-replace
                                         newname
                                         "closest_mult_div_shift(%1, %2, %3)")))
                                      (("1"
                                        (acsl-to-cpr 2)
                                        nil)))))))))))))
                           ("2" (typepred "i")
                            (("2" (assert)
                              nil))))))))))))))))))))))))))
    nil)
   ((rlat_int const-decl "unsigned_int" cpr_int CPR)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (closest_mult_div_shift const-decl
     "{ans: unsigned_int | ans = floor((a * x) / 2 ^ z + 1 / 2)}"
     uint32 CPR)
    (odd? const-decl "bool" integers nil)
    (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (closest_mult_div_shift__eq formula-decl nil acsl_logic_defs_eq
     nil)
    (<= const-decl "bool" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (plus const-decl "unsigned_int" uint32 CPR)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (L_rlat_int const-decl "int" A_encode nil))
   nil)
  (rlat_int__eq-2 nil 3771523539
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (expand "closest_div_mult")
            (("" (use "Q_nb_def")
              (("" (replace -1 :dir rl)
                (("" (assert)
                  (("" (case "plus(15, 1)=16")
                    (("1" (replace -1 :hide? t)
                      (("1"
                        (repeat
                         (match "2^%1" step
                                (then
                                 (eval-expr "exponentiation.^(2,%1)")
                                 (replace -1 :hide? t))))
                        (("1" (case "i=0")
                          (("1" (replace -1 :hide? t)
                            (("1" (assert)
                              (("1"
                                (rewrite "closest_mult_div_shift__eq")
                                (("1"
                                  (replace -1 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (match
                                       "closest_mult_div_shift(%1, %2, %3)"
                                       step
                                       (let
                                        ((newname (freshname "cpr")))
                                        (name-replace
                                         newname
                                         "closest_mult_div_shift(%1, %2, %3)")))
                                      (("1"
                                        (acsl-to-cpr 1)
                                        nil)))))))))))))
                           ("2" (case "i=1")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite
                                   "closest_mult_div_shift__eq")
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (match
                                         "closest_mult_div_shift(%1, %2, %3)"
                                         step
                                         (let
                                          ((newname (freshname "cpr")))
                                          (name-replace
                                           newname
                                           "closest_mult_div_shift(%1, %2, %3)")))
                                        (("1"
                                          (acsl-to-cpr 2)
                                          nil)))))))))))))
                             ("2" (typepred "i")
                              (("2" (assert) nil)))))))))))
                     ("2" (eval-formula) nil))))))))))))))))))
    nil)
   ((L_rlat_int const-decl "int" A_encode nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (plus const-decl "unsigned_int" uint32 CPR)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (closest_mult_div_shift__eq formula-decl nil acsl_logic_defs_eq
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (closest_mult_div_shift const-decl
     "{ans: unsigned_int | ans = floor((a * x) / 2 ^ z + 1 / 2)}"
     uint32 CPR)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rlat_int const-decl "unsigned_int" cpr_int CPR))
   nil)
  (rlat_int__eq-1 nil 3771419933
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (expand "closest_div_mult")
            (("" (use "Q_nb_def")
              (("" (replace -1 :dir rl)
                (("" (assert)
                  (("" (case "plus(15, 1)=16")
                    (("1" (replace -1 :hide? t)
                      (("1"
                        (match "2^%1" step
                               (then
                                (eval-expr "exponentiation.^(2,%1)")
                                (replace -1 :hide? t)))
                        (("1"
                          (match "2^%1" step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                          (("1" (case "i=0")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite
                                   "closest_mult_div_shift__eq")
                                  (("1"
                                    (replace -1 :dir rl)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (match
                                         "closest_mult_div_shift(%1, %2, %3)"
                                         step
                                         (let
                                          ((newname (freshname "cpr")))
                                          (name-replace
                                           newname
                                           "closest_mult_div_shift(%1, %2, %3)")))
                                        (("1" (acsl-to-cpr 1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "i=1")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite
                                     "closest_mult_div_shift__eq")
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (match
                                           "closest_mult_div_shift(%1, %2, %3)"
                                           step
                                           (let
                                            ((newname
                                              (freshname "cpr")))
                                            (name-replace
                                             newname
                                             "closest_mult_div_shift(%1, %2, %3)")))
                                          (("1"
                                            (acsl-to-cpr 2)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "i")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (eval-formula) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rlat_int const-decl "unsigned_int" cpr_int CPR)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (closest_mult_div_shift__eq formula-decl nil acsl_logic_defs_eq
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (closest_mult_div_shift const-decl
     "{ans: unsigned_int | ans = floor((a * x) / 2 ^ z + 1 / 2)}"
     uint32 CPR)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (plus const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (L_rlat_int const-decl "int" A_encode nil))
   shostak))
 (local_zone__uint32__j 0
  (local_zone__uint32__j-1 nil 3771227588
   ("" (skeep :preds? t)
    (("" (expand "L_local_zone")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (rewrite "sub_u32_j") nil nil)
           ("2" (flatten)
            (("2" (rewrite "lsr_u32_j")
              (("2" (rewrite "sub_u32_j") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((L_local_zone const-decl "int" A_local_decoding nil)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sub_u32_j judgement-tcc nil acsl_logic_defs_eq nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lsr_u32_j judgement-tcc nil acsl_logic_defs_eq nil)
    (L_sub_u32 const-decl "int" A_uint32_operations nil)
    (L_add_u32 const-decl "int" A_uint32_operations nil)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (lsr const-decl "int" cmath framac_wp)
    (L_mod_u32 const-decl "int" A_uint32_operations nil))
   nil
   (local_zone__uint32__j subtype
    "A_local_decoding.L_local_zone(acsl_logic_defs_eq.nz, acsl_logic_defs_eq.ref, acsl_logic_defs_eq.mes)"
    "unsigned_int")))
 (local_zone__eq_TCC1 0
  (local_zone__eq_TCC1-1 nil 3771225392
   ("" (grind :rewrites ("real_expt_int_rew")) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (local_zone__eq subtype "acsl_logic_defs_eq.nz"
    "{n: integers.posnat | reals.<(n, exponentiation.^(2, 6))}")))
 (local_zone__eq_TCC2 0
  (local_zone__eq_TCC2-1 nil 3772552274
   ("" (grind :rewrites ("real_expt_int_rew")) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (local_zone__eq subtype "acsl_logic_defs_eq.mes"
    "naturalnumbers.below(exponentiation.^(2, 17))")))
 (local_zone__eq 0
  (local_zone__eq-5 "" 3771525873
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j"
                  "real_expt_int_rew")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          (("" (invoke (expand "%1" -1) (! -1 1 0))
            ((""
              (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
               (! 1 2))
              (("1" (invoke (expand "%1" -1) (! -1 1 0))
                (("1" (use "Q_nb_def")
                  (("1" (replace -1 :dir rl)
                    (("1" (assert)
                      (("1"
                        (match - "exponentiation.^(2,%1)" step
                               (then
                                (eval-expr "exponentiation.^(2,%1)")
                                (replace -1 :hide? t)))
                        (("1"
                          (match - "exponentiation.^(2,%1)" step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                          (("1"
                            (match - "exponentiation.^(2,%1)" step
                                   (then
                                    (eval-expr
                                     "exponentiation.^(2,%1)")
                                    (replace -1 :hide? t)))
                            (("1"
                              (match - "exponentiation.^(2,%1)" step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                              (("1"
                                (match
                                 -
                                 "exponentiation.^(2,%1)"
                                 step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                                (("1"
                                  (acsl-to-cpr -3)
                                  (("1"
                                    (match
                                     "minus(%,1)"
                                     step
                                     (rewrite "minus_1_ui"))
                                    (("1"
                                      (replace -2 :dir rl :hide? t)
                                      (("1"
                                        (replace -2 :dir rl :hide? t)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil)
                                   ("4" (assert) nil nil)
                                   ("5" (assert) nil nil)
                                   ("6" (assert) nil nil)
                                   ("7" (assert) nil nil)
                                   ("8" (assert) nil nil)
                                   ("9"
                                    (assert)
                                    (("9" (eval-formula) nil nil))
                                    nil)
                                   ("10"
                                    (assert)
                                    (("10" (eval-formula) nil nil))
                                    nil)
                                   ("11"
                                    (assert)
                                    (("11" (eval-formula) nil nil))
                                    nil)
                                   ("12" (assert) nil nil)
                                   ("13" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "Q_nb_def")
                (("2" (replace -1 :dir rl) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd? const-decl "bool" integers nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (arg_48 skolem-const-decl "even_posnat" acsl_logic_defs_eq nil)
    (arg_47 skolem-const-decl "odd_posnat" acsl_logic_defs_eq nil)
    (arg_46 skolem-const-decl "even_posnat" acsl_logic_defs_eq nil)
    (arg_45 skolem-const-decl "even_posnat" acsl_logic_defs_eq nil)
    (arg_44 skolem-const-decl "even_posnat" acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (arg_51 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (arg_49 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (arg_53 skolem-const-decl
     "{ans: unsigned_int | ans = ref - arg_46 * floor(ref / arg_46)}"
     acsl_logic_defs_eq nil)
    (arg_54 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (arg_52 skolem-const-decl
     "{ans: unsigned_int | ans = ref - arg_46 * floor(ref / arg_46)}"
     acsl_logic_defs_eq nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (arg_57 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (arg_55 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (arg_60 skolem-const-decl "bool" acsl_logic_defs_eq nil)
    (arg_58 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (arg_63 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (arg_61 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (arg_64 skolem-const-decl "unsigned_int" acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (L_nb const-decl "int" A_params nil)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (local_zone__uint32__j expr-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_local_zone const-decl "int" A_local_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power))
   nil)
  (local_zone__eq-4 "" 3771525762
   (""
    (branch (prove-local_decoding__eq)
     (then (repeat (rewrite "times_4_ui"))
      (repeat (rewrite "minus_1_ui"))))
    nil nil)
   ((local_zone__uint32__j expr-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_local_zone const-decl "int" A_local_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (Q_nb_def formula-decl nil A_params nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (times_4_ui formula-decl nil acsl_logic_defs_eq nil))
   nil)
  (local_zone__eq-3 "" 3771348595
   ("" (prove-local_decoding__eq) (("" (rewrite "minus_1_ui") nil nil))
    nil)
   ((local_zone__uint32__j expr-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_local_zone const-decl "int" A_local_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (Q_nb_def formula-decl nil A_params nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (times_4_ui formula-decl nil acsl_logic_defs_eq nil))
   shostak)
  (local_zone__eq-2 "" 3771185913
   ("" (prove-logic-original-eq) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (Q_nb_def formula-decl nil A_params nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (L_local_zone const-decl "int" A_local_decoding nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (local_zone__uint32__j expr-judgement "unsigned_int"
     acsl_logic_defs_eq nil))
   shostak)
  (local_zone__eq-1 nil 3770377649
   (""
    (then (auto-rewrite "mod__eq") (skeep :preds? t)
     (expand "L_local_zone") (expand "local_zone")
     (replace -5 :hide? t) (eval-expr "2 ^ (NB - 1)")
     (replace -1 :hide? t) (expand "NB") (rewrite "add_u32_def" 1)
     (rewrite "add_u32_def" 1) (rewrite "sub_u32_def" 1)
     (rewrite "sub_u32_def" 1) (expand "plus") (expand "to_uint32")
     (expand "max_uint32") (eval-expr "2 ^ 32") (replace -1 :hide? t)
     (rewrite "mul_u32_def" 1) (rewrite "mul_u32_def" 1)
     (expand "times") (expand "minus") (eval-expr "2 ^ 32")
     (replace -1 :hide? t) (expand "lsr") (expand "div_shift")
     (eval-expr "2 ^ 15") (replace -1) (expand "to_uint32")
     (expand "max_uint32")
     (spread (rewrite "mod_uint_mod")
      ((then (lift-if 1)
        (spread (split 1)
         ((then (flatten) (lift-if 1)
           (spread (split 1)
            ((then (flatten) (rewrite "mod_lt_nat" 1) (eval-expr "2^6")
              (assert))
             (then (flatten) (hide-all-but (-1 1)) (assert)))))
          (then (flatten) (lift-if 2)
           (spread (split 2)
            ((then (flatten) (assert)) (then (flatten) (assert))))))))
       (eval-formula 1))))
    nil nil)
   ((L_local_zone const-decl "int" A_local_decoding nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (lsr const-decl "int" cmath framac_wp)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (add_u32_def formula-decl nil interface nil)
    (nil application-judgement "below(m)" mod nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sub_u32_def formula-decl nil interface nil)
    (nil application-judgement "below(m)" reals_mod reals)
    (plus const-decl "unsigned_int" uint32 CPR)
    (mul_u32_def formula-decl nil interface nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (mod_lt_nat formula-decl nil mod nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (mod_of_mod formula-decl nil mod nil)
    (mod__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_uint_mod formula-decl nil acsl_logic_defs_eq nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (minus const-decl "unsigned_int" uint32 CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (is_uint32 const-decl "bool" cint framac_wp)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil))
   shostak))
 (local_decoding__eq 0
  (local_decoding__eq-4 "" 3771348532
   ("" (prove-local_decoding__eq) nil nil)
   ((Q_nb_def formula-decl nil A_params nil)
    (local_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (plus const-decl "unsigned_int" uint32 CPR)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (local_decode const-decl "unsigned_int" cpr_int CPR)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_local_decode const-decl "int" A_local_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power))
   shostak)
  (local_decoding__eq-3 "" 3771348400
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          (("" (invoke (expand "%1" -1) (! -1 1 0))
            ((""
              (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
               (! 1 2))
              (("" (invoke (expand "%1" -1) (! -1 1 0))
                (("" (expand "closest_div_mult")
                  (("" (use "Q_nb_def")
                    (("" (replace -1 :dir rl)
                      (("" (replace "nb_def")
                        (("" (assert)
                          ((""
                            (match - "2^%1" step
                                   (then
                                    (eval-expr
                                     "exponentiation.^(2,%1)")
                                    (replace -1 :hide? t)))
                            ((""
                              (match - "2^%1" step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                              ((""
                                (match
                                 -
                                 "2^%1"
                                 step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                                ((""
                                  (match
                                   -
                                   "2^%1"
                                   step
                                   (then
                                    (eval-expr
                                     "exponentiation.^(2,%1)")
                                    (replace -1 :hide? t)))
                                  ((""
                                    (match
                                     -
                                     "2^%1"
                                     step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                                    ((""
                                      (rewrite "local_zone__eq")
                                      ((""
                                        (match
                                         -
                                         "local_zone(%1, %2, %3)"
                                         step
                                         (let
                                          ((fname (freshname "cpr")))
                                          (name-replace
                                           fname
                                           "local_zone(%1, %2, %3)")))
                                        ((""
                                          (acsl-to-cpr -3)
                                          (("1"
                                            (replace
                                             -2
                                             :dir
                                             rl
                                             :hide?
                                             t)
                                            (("1"
                                              (replace
                                               -2
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if +)
                                                  (("1"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lift-if +)
                                                        (("1"
                                                          (split +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lift-if +)
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (eval-formula) nil nil)
                                           ("3" (eval-formula) nil nil)
                                           ("4" (eval-formula) nil nil)
                                           ("5" (eval-formula) nil nil)
                                           ("6" (eval-formula) nil nil)
                                           ("7" (eval-formula) nil nil)
                                           ("8" (eval-formula) nil nil)
                                           ("9"
                                            (eval-formula)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Q_nb_def formula-decl nil A_params nil)
    (local_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (plus const-decl "unsigned_int" uint32 CPR)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (local_decode const-decl "unsigned_int" cpr_int CPR)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_local_decode const-decl "int" A_local_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak)
  (local_decoding__eq-2 "" 3771227917
   ("" (prove-logic-original-eq) nil nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (L_local_decode const-decl "int" A_local_decoding nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (local_decode const-decl "unsigned_int" cpr_int CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (local_zone const-decl "unsigned_int" cpr_int CPR)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (local_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (Q_nb_def formula-decl nil A_params nil))
   shostak)
  (local_decoding__eq-1 nil 3770377649
   ("" (auto-rewrite "div_div__eq")
    (("" (skeep :preds? t)
      (("" (expand "L_local_decode")
        (("" (expand "local_decode")
          (("" (expand "closest_div_mult")
            (("" (expand "NB")
              (("" (assert)
                (("" (replace -5)
                  (("" (assert)
                    (("" (eval-expr "2 ^ 15")
                      (("" (replace -1)
                        (("" (eval-expr "2 ^ 17")
                          (("" (replace -1)
                            (("" (expand "times")
                              ((""
                                (expand "plus")
                                ((""
                                  (rewrite "local_zone__eq")
                                  (("1"
                                    (eval-expr "2 ^ 32")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (rewrite "mod__eq")
                                        (("1"
                                          (rewrite "mod__eq")
                                          (("1"
                                            (rewrite "mod__eq")
                                            (("1"
                                              (rewrite "mod__eq")
                                              (("1"
                                                (rewrite "mod__eq")
                                                (("1"
                                                  (rewrite "mod__eq")
                                                  (("1"
                                                    (rewrite "mod__eq")
                                                    (("1"
                                                      (rewrite
                                                       "mod__eq")
                                                      (("1"
                                                        (rewrite
                                                         "mul_u32_def"
                                                         1)
                                                        (("1"
                                                          (rewrite
                                                           "mul_u32_def"
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             "mul_u32_def"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "mul_u32_def"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "add_u32_def"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "add_u32_def"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "add_u32_def"
                                                                     1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "div_u32_def"
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_u32_def"
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "div_u32_def"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "to_uint32")
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "div_div__eq")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "div_div__eq")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "div_div__eq")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "bla"
                                                                                             "131072 * local_zone(nz, ref, mes)")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "ble"
                                                                                               "mod.mod(bla, 4294967296)")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "bl2"
                                                                                                 "mod.mod(ble + mes, 4294967296)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "mod_div")
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     "2 ^ mod.mod(16, 4294967296)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "mod_uint_mod")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "mod_div")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "bl2"
                                                                                                             "nz"
                                                                                                             "4294967296")
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (eval-expr
                                                                                                                 "2 ^ 6")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (eval-expr
                                                                                       "2 ^ 6")
                                                                                      (("2"
                                                                                        (eval-expr
                                                                                         "2 ^ 32")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (eval-formula
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "is_uint32")
                                                                            (("2"
                                                                              (eval-expr
                                                                               "2 ^ 6")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "is_uint32")
                                                                          (("2"
                                                                            (eval-expr
                                                                             "2 ^ 6")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (eval-expr
                                                           "2 ^ 32")
                                                          (("2"
                                                            (eval-expr
                                                             "2 ^ 6")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (eval-expr
                                                         "2 ^ 32")
                                                        (("2"
                                                          (eval-expr
                                                           "2 ^ 6")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (eval-expr
                                                       "2 ^ 6")
                                                      (("2"
                                                        (eval-expr
                                                         "2 ^ 32")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (eval-expr
                                                     "2 ^ 32")
                                                    (("2"
                                                      (eval-expr
                                                       "2 ^ 6")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "NB")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (L_local_decode const-decl "int" A_local_decoding nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (local_decode const-decl "unsigned_int" cpr_int CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (L_local_zone const-decl "int" A_local_decoding nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local_zone__uint32__j expr-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (mul_u32_j judgement-tcc nil acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (local_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_u32_j judgement-tcc nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (div_u32_j judgement-tcc nil acsl_logic_defs_eq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (L_mod_u32 const-decl "int" A_uint32_operations nil)
    (L_div_u32 const-decl "int" A_uint32_operations nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (Q_nb_def formula-decl nil A_params nil))
   shostak))
 (global_zone__eq_TCC1 0
  (global_zone__eq_TCC1-1 nil 3772552274
   ("" (grind :rewrites ("real_expt_int_rew")) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (subrange type-eq-decl nil integers nil)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "nnreal" real_expt power)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (global_zone__eq subtype "acsl_logic_defs_eq.nz"
    "{n: integers.posnat | reals.<(n, exponentiation.^(2, 6))}")))
 (global_zone__eq_TCC2 0
  (global_zone__eq_TCC2-1 nil 3772552274
   ("" (grind :rewrites ("real_expt_int_rew")))
   ((^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (expt def-decl "real" exponentiation nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "nnreal" real_expt power)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (global_zone__eq subtype "acsl_logic_defs_eq.mes0"
    "naturalnumbers.below(exponentiation.^(2, real_defs.min(A_params.L_nb, 17)))")))
 (global_zone__eq_TCC3 0
  (global_zone__eq_TCC3-1 nil 3772552274
   ("" (grind :rewrites ("real_expt_int_rew")))
   ((^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (expt def-decl "real" exponentiation nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "nnreal" real_expt power)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (global_zone__eq subtype "acsl_logic_defs_eq.mes1"
    "naturalnumbers.below(exponentiation.^(2, real_defs.min(A_params.L_nb, 17)))")))
 (global_zone__eq 0
  (global_zone__eq-9 "" 3771347610 ("" (prove-global_zone_eq) nil nil)
   ((global_zone const-decl "unsigned_int" cpr_int CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (Q_global_zone__def_0 formula-decl nil A_global_decoding nil)
    (Q_global_zone__def_1 formula-decl nil A_global_decoding nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_i_ui formula-decl nil acsl_logic_defs_eq nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_global_zone const-decl "[int, int, int, int -> int]"
     A_global_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "nnreal" real_expt power)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) nil
    nil (subrange type-eq-decl nil integers nil))
   shostak)
  (global_zone__eq-8 "" 3771340786
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          ((""
            (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
             (! 1 2))
            (("" (invoke (expand "%1" -1) (! -1 1 0))
              (("" (use "Q_nb_def")
                (("" (replace -1 :dir rl)
                  (("" (replace "nb_def")
                    (("" (assert)
                      ((""
                        (repeat
                         (match - "2^%1" step
                                (then
                                 (eval-expr "exponentiation.^(2,%1)")
                                 (replace -1 :hide? t))))
                        ((""
                          (repeat
                           (match - "min(%1,%2)" step
                                  (then
                                   (eval-expr "min(%1,%2)")
                                   (replace -1 :hide? t))))
                          (("" (lift-if -2)
                            (("" (split -2)
                              (("1"
                                (lemma "Q_global_zone__def_0")
                                (("1"
                                  (match
                                   -
                                   "L_global_zone(nz, %2, %3, %4)"
                                   step
                                   (inst -1 "%2" "%3" "%4"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil)))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma "Q_global_zone__def_1")
                                  (("2"
                                    (match
                                     -
                                     "L_global_zone(nz, %2, %3, %4)"
                                     step
                                     (inst -1 "nz" "%2" "%3" "%4"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("2"
                                          ("1"
                                           (branch
                                            (acsl-to-cpr -1)
                                            ((then
                                              (repeat
                                               (match
                                                -1
                                                "minus(%,1)"
                                                step
                                                (rewrite
                                                 "minus_1_ui")))
                                              (repeat
                                               (match
                                                -1
                                                "minus(%,i)"
                                                step
                                                (rewrite
                                                 "minus_i_ui")))
                                              (replace
                                               -2
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (replace
                                               -3
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (assert)))))
                                          (("2"
                                            ("2" (assert))
                                            (("2"
                                              ("3" (assert))
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((global_zone const-decl "unsigned_int" cpr_int CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (minus_i_ui formula-decl nil acsl_logic_defs_eq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (Q_global_zone__def_1 formula-decl nil A_global_decoding nil)
    (Q_global_zone__def_0 formula-decl nil A_global_decoding nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_global_zone const-decl "[int, int, int, int -> int]"
     A_global_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) nil
    nil (subrange type-eq-decl nil integers nil))
   nil)
  (global_zone__eq-7 "" 3771340691
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          ((""
            (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
             (! 1 2))
            (("" (invoke (expand "%1" -1) (! -1 1 0))
              (("" (use "Q_nb_def")
                (("" (replace -1 :dir rl)
                  (("" (replace "nb_def")
                    (("" (assert)
                      ((""
                        (repeat
                         (match - "2^%1" step
                                (then
                                 (eval-expr "exponentiation.^(2,%1)")
                                 (replace -1 :hide? t))))
                        ((""
                          (repeat
                           (match - "min(%1,%2)" step
                                  (then
                                   (eval-expr "min(%1,%2)")
                                   (replace -1 :hide? t))))
                          (("" (lift-if -2)
                            (("" (split -2)
                              (("1"
                                (lemma "Q_global_zone__def_0")
                                (("1"
                                  (match
                                   -
                                   "L_global_zone(nz, %2, %3, %4)"
                                   step
                                   (inst -1 "%2" "%3" "%4"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil)))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma "Q_global_zone__def_1")
                                  (("2"
                                    (match
                                     -
                                     "L_global_zone(nz, %2, %3, %4)"
                                     step
                                     (inst -1 "nz" "%2" "%3" "%4"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("2"
                                          ("1"
                                           (branch
                                            (acsl-to-cpr -1)
                                            ((repeat
                                              (match
                                               -1
                                               "minus(%,1)"
                                               step
                                               (rewrite "minus_1_ui")))
                                             (repeat
                                              (match
                                               -1
                                               "minus(%,i)"
                                               step
                                               (rewrite "minus_i_ui")))
                                             (replace
                                              -2
                                              :dir
                                              rl
                                              :hide?
                                              t)
                                             (replace
                                              -3
                                              :dir
                                              rl
                                              :hide?
                                              t)
                                             (assert))))
                                          (("2"
                                            ("2" (assert))
                                            (("2"
                                              ("3" (assert))
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (global_zone__eq-6 "" 3771324688
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          ((""
            (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
             (! 1 2))
            (("" (invoke (expand "%1" -1) (! -1 1 0))
              (("" (use "Q_nb_def")
                (("" (replace -1 :dir rl)
                  (("" (replace "nb_def")
                    (("" (assert)
                      ((""
                        (match - "2^%1" step
                               (then
                                (eval-expr "exponentiation.^(2,%1)")
                                (replace -1 :hide? t)))
                        ((""
                          (match - "2^%1" step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                          ((""
                            (match - "2^%1" step
                                   (then
                                    (eval-expr
                                     "exponentiation.^(2,%1)")
                                    (replace -1 :hide? t)))
                            ((""
                              (match - "2^%1" step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                              ((""
                                (match
                                 -
                                 "2^%1"
                                 step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                                ((""
                                  (match
                                   -
                                   "min(%1,%2)"
                                   step
                                   (then
                                    (eval-expr "min(%1,%2)")
                                    (replace -1 :hide? t)))
                                  ((""
                                    (lift-if -2)
                                    ((""
                                      (split -2)
                                      (("1"
                                        (lemma "Q_global_zone__def_0")
                                        (("1"
                                          (match
                                           -
                                           "L_global_zone(nz, %2, %3, %4)"
                                           step
                                           (inst -1 "%2" "%3" "%4"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lemma
                                           "Q_global_zone__def_1")
                                          (("2"
                                            (match
                                             -
                                             "L_global_zone(nz, %2, %3, %4)"
                                             step
                                             (inst
                                              -1
                                              "nz"
                                              "%2"
                                              "%3"
                                              "%4"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (match
                                                   -1
                                                   "%1{number}"
                                                   step
                                                   (let
                                                    ((fnum '-1)
                                                     (d 'nil)
                                                     (newname
                                                      (freshname
                                                       "arg"))
                                                     (d
                                                      (setq
                                                       new-names
                                                       (cons
                                                        newname
                                                        new-names))))
                                                    (name-replace
                                                     newname
                                                     "%1")))
                                                  (("1"
                                                    (match
                                                     -1
                                                     "%1{number}"
                                                     step
                                                     (let
                                                      ((fnum '-1)
                                                       (d 'nil)
                                                       (newname
                                                        (freshname
                                                         "arg"))
                                                       (d
                                                        (setq
                                                         new-names
                                                         (cons
                                                          newname
                                                          new-names))))
                                                      (name-replace
                                                       newname
                                                       "%1")))
                                                    (("1"
                                                      (match
                                                       -1
                                                       "%1{number}"
                                                       step
                                                       (let
                                                        ((fnum '-1)
                                                         (d 'nil)
                                                         (newname
                                                          (freshname
                                                           "arg"))
                                                         (d
                                                          (setq
                                                           new-names
                                                           (cons
                                                            newname
                                                            new-names))))
                                                        (name-replace
                                                         newname
                                                         "%1")))
                                                      (("1"
                                                        (match
                                                         -1
                                                         "%1{number}"
                                                         step
                                                         (let
                                                          ((fnum '-1)
                                                           (d 'nil)
                                                           (newname
                                                            (freshname
                                                             "arg"))
                                                           (d
                                                            (setq
                                                             new-names
                                                             (cons
                                                              newname
                                                              new-names))))
                                                          (name-replace
                                                           newname
                                                           "%1")))
                                                        (("1"
                                                          (match
                                                           -1
                                                           "%3{name_}(%1{name_},%2{name_})"
                                                           step
                                                           (translate-fun
                                                            "%3"
                                                            "%1"
                                                            "%2"))
                                                          (("1"
                                                            (match
                                                             -1
                                                             "%3{name_}(%1{name_},%2{name_})"
                                                             step
                                                             (translate-fun
                                                              "%3"
                                                              "%1"
                                                              "%2"))
                                                            (("1"
                                                              (match
                                                               -1
                                                               "%3{name_}(%1{name_},%2{name_})"
                                                               step
                                                               (translate-fun
                                                                "%3"
                                                                "%1"
                                                                "%2"))
                                                              (("1"
                                                                (match
                                                                 -1
                                                                 "%3{name_}(%1{name_},%2{name_})"
                                                                 step
                                                                 (translate-fun
                                                                  "%3"
                                                                  "%1"
                                                                  "%2"))
                                                                (("1"
                                                                  (match
                                                                   -1
                                                                   "%3{name_}(%1{name_},%2{name_})"
                                                                   step
                                                                   (translate-fun
                                                                    "%3"
                                                                    "%1"
                                                                    "%2"))
                                                                  (("1"
                                                                    (match
                                                                     -1
                                                                     "%3{name_}(%1{name_},%2{name_})"
                                                                     step
                                                                     (translate-fun
                                                                      "%3"
                                                                      "%1"
                                                                      "%2"))
                                                                    (("1"
                                                                      (match
                                                                       -1
                                                                       "%3{name_}(%1{name_},%2{name_})"
                                                                       step
                                                                       (translate-fun
                                                                        "%3"
                                                                        "%1"
                                                                        "%2"))
                                                                      (("1"
                                                                        (match
                                                                         -1
                                                                         "%3{name_}(%1{name_},%2{name_})"
                                                                         step
                                                                         (translate-fun
                                                                          "%3"
                                                                          "%1"
                                                                          "%2"))
                                                                        (("1"
                                                                          (match
                                                                           -1
                                                                           "%3{name_}(%1{name_},%2{name_})"
                                                                           step
                                                                           (translate-fun
                                                                            "%3"
                                                                            "%1"
                                                                            "%2"))
                                                                          (("1"
                                                                            (match
                                                                             -1
                                                                             "%3{name_}(%1{name_},%2{name_})"
                                                                             step
                                                                             (translate-fun
                                                                              "%3"
                                                                              "%1"
                                                                              "%2"))
                                                                            (("1"
                                                                              (expand
                                                                               "arg_494"
                                                                               :assert?
                                                                               none)
                                                                              (("1"
                                                                                (expand
                                                                                 "arg_493"
                                                                                 :assert?
                                                                                 none)
                                                                                (("1"
                                                                                  (expand
                                                                                   "arg_492"
                                                                                   :assert?
                                                                                   none)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "arg_491"
                                                                                     :assert?
                                                                                     none)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "arg_490"
                                                                                       :assert?
                                                                                       none)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "arg_489"
                                                                                         :assert?
                                                                                         none)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "arg_488"
                                                                                           :assert?
                                                                                           none)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "arg_487"
                                                                                             :assert?
                                                                                             none)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "arg_486"
                                                                                               :assert?
                                                                                               none)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "arg_485"
                                                                                                 :assert?
                                                                                                 none)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "arg_484"
                                                                                                   :assert?
                                                                                                   none)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "arg_483"
                                                                                                     :assert?
                                                                                                     none)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "arg_482"
                                                                                                       :assert?
                                                                                                       none)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "arg_481"
                                                                                                         :assert?
                                                                                                         none)
                                                                                                        (("1"
                                                                                                          (match
                                                                                                           -1
                                                                                                           "minus(%,1)"
                                                                                                           step
                                                                                                           (rewrite
                                                                                                            "minus_1_ui"))
                                                                                                          (("1"
                                                                                                            (match
                                                                                                             -1
                                                                                                             "minus(%,i)"
                                                                                                             step
                                                                                                             (rewrite
                                                                                                              "minus_i_ui"))
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               :dir
                                                                                                               rl
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3
                                                                                                                 :dir
                                                                                                                 rl
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "arg_493"
                                                                               :assert?
                                                                               none)
                                                                              (("2"
                                                                                (expand
                                                                                 "arg_492"
                                                                                 :assert?
                                                                                 none)
                                                                                (("2"
                                                                                  (expand
                                                                                   "arg_491"
                                                                                   :assert?
                                                                                   none)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "arg_490"
                                                                                     :assert?
                                                                                     none)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "arg_489"
                                                                                       :assert?
                                                                                       none)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "arg_488"
                                                                                         :assert?
                                                                                         none)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "arg_487"
                                                                                           :assert?
                                                                                           none)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "arg_486"
                                                                                             :assert?
                                                                                             none)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "arg_485"
                                                                                               :assert?
                                                                                               none)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "arg_484"
                                                                                                 :assert?
                                                                                                 none)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "arg_483"
                                                                                                   :assert?
                                                                                                   none)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "arg_482"
                                                                                                     :assert?
                                                                                                     none)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "arg_481"
                                                                                                       :assert?
                                                                                                       none)
                                                                                                      (("2"
                                                                                                        (match
                                                                                                         -1
                                                                                                         "minus(%,1)"
                                                                                                         step
                                                                                                         (rewrite
                                                                                                          "minus_1_ui"))
                                                                                                        (("2"
                                                                                                          (match
                                                                                                           -1
                                                                                                           "minus(%,i)"
                                                                                                           step
                                                                                                           (rewrite
                                                                                                            "minus_i_ui"))
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             :dir
                                                                                                             rl
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -3
                                                                                                               :dir
                                                                                                               rl
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil) nil nil
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (L_global_zone const-decl "[int, int, int, int -> int]"
     A_global_decoding nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (Q_global_zone__def_0 formula-decl nil A_global_decoding nil)
    (Q_global_zone__def_1 formula-decl nil A_global_decoding nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (minus_i_ui formula-decl nil acsl_logic_defs_eq nil)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (Q_nb_def formula-decl nil A_params nil)
    (below type-eq-decl nil naturalnumbers nil)
    (global_zone const-decl "unsigned_int" cpr_int CPR))
   nil)
  (global_zone__eq-5 "" 3771324472
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          ((""
            (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
             (! 1 2))
            (("" (invoke (expand "%1" -1) (! -1 1 0))
              (("" (use "Q_nb_def")
                (("" (replace -1 :dir rl)
                  (("" (replace "nb_def")
                    (("" (assert)
                      ((""
                        (match - "2^%1" step
                               (then
                                (eval-expr "exponentiation.^(2,%1)")
                                (replace -1 :hide? t)))
                        ((""
                          (match - "2^%1" step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                          ((""
                            (match - "2^%1" step
                                   (then
                                    (eval-expr
                                     "exponentiation.^(2,%1)")
                                    (replace -1 :hide? t)))
                            ((""
                              (match - "2^%1" step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                              ((""
                                (match
                                 -
                                 "2^%1"
                                 step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                                ((""
                                  (match
                                   -
                                   "min(%1,%2)"
                                   step
                                   (then
                                    (eval-expr "min(%1,%2)")
                                    (replace -1 :hide? t)))
                                  ((""
                                    (lift-if -2)
                                    ((""
                                      (split -2)
                                      (("1"
                                        (lemma "Q_global_zone__def_0")
                                        (("1"
                                          (match
                                           -
                                           "L_global_zone(nz, %2, %3, %4)"
                                           step
                                           (inst -1 "%2" "%3" "%4"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lemma
                                           "Q_global_zone__def_1")
                                          (("2"
                                            (match
                                             -
                                             "L_global_zone(nz, %2, %3, %4)"
                                             step
                                             (inst
                                              -1
                                              "nz"
                                              "%2"
                                              "%3"
                                              "%4"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (match
                                                   -1
                                                   "L_add_u32(%,%)"
                                                   step
                                                   (rewrite
                                                    "add_u32__eq"))
                                                  (("1"
                                                    (match
                                                     -1
                                                     "L_add_u32(%,%)"
                                                     step
                                                     (rewrite
                                                      "add_u32__eq"))
                                                    (("1"
                                                      (match
                                                       -1
                                                       "L_mul_u32(%,%)"
                                                       step
                                                       (rewrite
                                                        "mul_u32__eq"))
                                                      (("1"
                                                        (match
                                                         -1
                                                         "L_mul_u32(%,%)"
                                                         step
                                                         (rewrite
                                                          "mul_u32__eq"))
                                                        (("1"
                                                          (match
                                                           -1
                                                           "L_mul_u32(%,%)"
                                                           step
                                                           (rewrite
                                                            "mul_u32__eq"))
                                                          (("1"
                                                            (match
                                                             -1
                                                             "L_sub_u32(%,%)"
                                                             step
                                                             (rewrite
                                                              "sub_u32__eq"))
                                                            (("1"
                                                              (match
                                                               -1
                                                               "L_sub_u32(%,%)"
                                                               step
                                                               (rewrite
                                                                "sub_u32__eq"))
                                                              (("1"
                                                                (match
                                                                 -1
                                                                 "L_sub_u32(%,%)"
                                                                 step
                                                                 (rewrite
                                                                  "sub_u32__eq"))
                                                                (("1"
                                                                  (match
                                                                   -1
                                                                   "minus(%,1)"
                                                                   step
                                                                   (rewrite
                                                                    "minus_1_ui"))
                                                                  (("1"
                                                                    (match
                                                                     -1
                                                                     "minus(%,i)"
                                                                     step
                                                                     (rewrite
                                                                      "minus_i_ui"))
                                                                    (("1"
                                                                      (match
                                                                       -1
                                                                       "lsr(%,%)"
                                                                       step
                                                                       (rewrite
                                                                        "lsr_u32__eq"))
                                                                      (("1"
                                                                        (match
                                                                         -1
                                                                         "L_mod_u32(%,%)"
                                                                         step
                                                                         (rewrite
                                                                          "mod_u32__eq"))
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           :dir
                                                                           rl
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "mul_u32_j")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((global_zone const-decl "unsigned_int" cpr_int CPR)
    (below type-eq-decl nil naturalnumbers nil)
    (Q_nb_def formula-decl nil A_params nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (L_sub_u32 const-decl "int" A_uint32_operations nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mul_u32_j judgement-tcc nil acsl_logic_defs_eq nil)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (lsr_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus_i_ui formula-decl nil acsl_logic_defs_eq nil)
    (minus_1_ui formula-decl nil acsl_logic_defs_eq nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (times const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (sub_u32_j judgement-tcc nil acsl_logic_defs_eq nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (Q_global_zone__def_1 formula-decl nil A_global_decoding nil)
    (Q_global_zone__def_0 formula-decl nil A_global_decoding nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_global_zone const-decl "[int, int, int, int -> int]"
     A_global_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) nil
    nil (subrange type-eq-decl nil integers nil))
   nil)
  (global_zone__eq-4 "" 3771324319
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          ((""
            (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
             (! 1 2))
            (("" (invoke (expand "%1" -1) (! -1 1 0))
              (("" (use "Q_nb_def")
                (("" (replace -1 :dir rl)
                  (("" (replace "nb_def")
                    (("" (assert)
                      ((""
                        (repeat
                         (match - "2^%1" step
                                (then
                                 (eval-expr "exponentiation.^(2,%1)")
                                 (replace -1 :hide? t))))
                        ((""
                          (repeat
                           (match - "min(%1,%2)" step
                                  (then
                                   (eval-expr "min(%1,%2)")
                                   (replace -1 :hide? t))))
                          (("" (lift-if -2)
                            (("" (split -2)
                              (("1"
                                (lemma "Q_global_zone__def_0")
                                (("1"
                                  (match
                                   -
                                   "L_global_zone(nz, %2, %3, %4)"
                                   step
                                   (inst -1 "%2" "%3" "%4"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil)))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma "Q_global_zone__def_1")
                                  (("2"
                                    (match
                                     -
                                     "L_global_zone(nz, %2, %3, %4)"
                                     step
                                     (inst -1 "nz" "%2" "%3" "%4"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("2"
                                          (repeat
                                           (match
                                            -1
                                            "L_add_u32(%,%)"
                                            step
                                            (rewrite "add_u32__eq")))
                                          (("2"
                                            (repeat
                                             (match
                                              -1
                                              "L_mul_u32(%,%)"
                                              step
                                              (rewrite "mul_u32__eq")))
                                            (("2"
                                              (repeat
                                               (match
                                                -1
                                                "L_sub_u32(%,%)"
                                                step
                                                (rewrite
                                                 "sub_u32__eq")))
                                              (("2"
                                                (repeat
                                                 (match
                                                  -1
                                                  "minus(%,1)"
                                                  step
                                                  (rewrite
                                                   "minus_1_ui")))
                                                (("2"
                                                  (repeat
                                                   (match
                                                    -1
                                                    "minus(%,i)"
                                                    step
                                                    (rewrite
                                                     "minus_i_ui")))
                                                  (("2"
                                                    (repeat
                                                     (match
                                                      -1
                                                      "L_shr_u32(%,%)"
                                                      step
                                                      (rewrite
                                                       "shr_u32__eq")))
                                                    (("2"
                                                      (repeat
                                                       (match
                                                        -1
                                                        "L_mod_u32(%,%)"
                                                        step
                                                        (rewrite
                                                         "mod_u32__eq")))
                                                      (("2"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (replace
                                                           -3
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (global_zone__eq-3 "" 3771323917
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          ((""
            (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
             (! 1 2))
            (("" (invoke (expand "%1" -1) (! -1 1 0))
              (("" (use "Q_nb_def")
                (("" (replace -1 :dir rl)
                  (("" (replace "nb_def")
                    (("" (assert)
                      ((""
                        (repeat
                         (match - "2^%1" step
                                (then
                                 (eval-expr "exponentiation.^(2,%1)")
                                 (replace -1 :hide? t))))
                        ((""
                          (repeat
                           (match - "min(%1,%2)" step
                                  (then
                                   (eval-expr "min(%1,%2)")
                                   (replace -1 :hide? t))))
                          (("" (lift-if -2)
                            (("" (split -2)
                              (("1"
                                (lemma "Q_global_zone__def_0")
                                (("1"
                                  (match
                                   -
                                   "L_global_zone(nz, %2, %3, %4)"
                                   step
                                   (inst -1 "%2" "%3" "%4"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil)))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma "Q_global_zone__def_1")
                                  (("2"
                                    (match
                                     -
                                     "L_global_zone(nz, %2, %3, %4)"
                                     step
                                     (inst -1 "nz" "%2" "%3" "%4"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("2"
                                          (repeat
                                           (match
                                            -1
                                            "L_add_u32(%,%)"
                                            step
                                            (rewrite "add_u32__eq")))
                                          (("2"
                                            (repeat
                                             (match
                                              -1
                                              "L_mul_u32(%,%)"
                                              step
                                              (rewrite "mul_u32__eq")))
                                            (("2"
                                              (repeat
                                               (match
                                                -1
                                                "L_sub_u32(%,%)"
                                                step
                                                (rewrite
                                                 "sub_u32__eq")))
                                              (("2"
                                                (repeat
                                                 (match
                                                  -1
                                                  "minus(%,%)"
                                                  step
                                                  (rewrite
                                                   "minus_1_ui")))
                                                (("2"
                                                  (repeat
                                                   (match
                                                    -1
                                                    "minus(%,%)"
                                                    step
                                                    (rewrite
                                                     "minus_i_ui")))
                                                  (("2"
                                                    (replace
                                                     -2
                                                     :dir
                                                     rl
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (replace
                                                       -3
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (assert)
                                                        nil))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (global_zone__eq-2 "" 3771322311
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          ((""
            (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
             (! 1 2))
            (("" (invoke (expand "%1" -1) (! -1 1 0))
              (("" (use "Q_nb_def")
                (("" (replace -1 :dir rl)
                  (("" (replace "nb_def")
                    (("" (assert)
                      ((""
                        (match - "2^%1" step
                               (then
                                (eval-expr "exponentiation.^(2,%1)")
                                (replace -1 :hide? t)))
                        ((""
                          (match - "2^%1" step
                                 (then
                                  (eval-expr "exponentiation.^(2,%1)")
                                  (replace -1 :hide? t)))
                          ((""
                            (match - "2^%1" step
                                   (then
                                    (eval-expr
                                     "exponentiation.^(2,%1)")
                                    (replace -1 :hide? t)))
                            ((""
                              (match - "2^%1" step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                              ((""
                                (match
                                 -
                                 "min(%1,%2)"
                                 step
                                 (then
                                  (eval-expr "min(%1,%2)")
                                  (replace -1 :hide? t)))
                                ((""
                                  (lift-if -2)
                                  ((""
                                    (split -2)
                                    (("1"
                                      (lemma "Q_global_zone__def_0")
                                      (("1"
                                        (match
                                         -
                                         "L_global_zone(nz, %2, %3, %4)"
                                         step
                                         (inst -1 "%2" "%3" "%4"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "Q_global_zone__def_1")
                                        (("2"
                                          (match
                                           -
                                           "L_global_zone(nz, %2, %3, %4)"
                                           step
                                           (inst
                                            -1
                                            "nz"
                                            "%2"
                                            "%3"
                                            "%4"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (match
                                                 -1
                                                 "L_add_u32(%,%)"
                                                 step
                                                 (rewrite
                                                  "add_u32__eq"))
                                                (("1"
                                                  (match
                                                   -1
                                                   "L_add_u32(%,%)"
                                                   step
                                                   (rewrite
                                                    "add_u32__eq"))
                                                  (("1"
                                                    (match
                                                     -1
                                                     "L_mul_u32(%,%)"
                                                     step
                                                     (rewrite
                                                      "mul_u32__eq"))
                                                    (("1"
                                                      (match
                                                       -1
                                                       "L_mul_u32(%,%)"
                                                       step
                                                       (rewrite
                                                        "mul_u32__eq"))
                                                      (("1"
                                                        (match
                                                         -1
                                                         "L_mul_u32(%,%)"
                                                         step
                                                         (rewrite
                                                          "mul_u32__eq"))
                                                        (("1"
                                                          (match
                                                           -1
                                                           "lsr(%,%)"
                                                           step
                                                           (rewrite
                                                            "lsr_u32__eq"))
                                                          (("1"
                                                            (match
                                                             -1
                                                             "L_sub_u32(%,%)"
                                                             step
                                                             (rewrite
                                                              "sub_u32__eq"))
                                                            (("1"
                                                              (match
                                                               -1
                                                               "L_sub_u32(%,%)"
                                                               step
                                                               (rewrite
                                                                "sub_u32__eq"))
                                                              (("1"
                                                                (match
                                                                 -1
                                                                 "L_sub_u32(%,%)"
                                                                 step
                                                                 (rewrite
                                                                  "sub_u32__eq"))
                                                                (("1"
                                                                  (match
                                                                   -1
                                                                   "L_mod_u32(%,%)"
                                                                   step
                                                                   (rewrite
                                                                    "mod_u32__eq"))
                                                                  (("1"
                                                                    (match
                                                                     -1
                                                                     "minus(%,%)"
                                                                     step
                                                                     (rewrite
                                                                      "minus_1_ui"))
                                                                    (("1"
                                                                      (match
                                                                       -1
                                                                       "minus(%,%)"
                                                                       step
                                                                       (rewrite
                                                                        "minus_i_ui"))
                                                                      (("1"
                                                                        (match
                                                                         -1
                                                                         "minus(%,%)"
                                                                         step
                                                                         (rewrite
                                                                          "minus_i_ui"))
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           :dir
                                                                           rl
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (global_zone__eq-1 nil 3770378006
   ("" (skeep :preds? t)
    (("" (expand "NB")
      (("" (replace -7)
        (("" (expand "min")
          (("" (expand "global_zone")
            (("" (replace -7)
              (("" (expand "min")
                (("" (lift-if 1)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (replace -1 :hide? t)
                        (("1" (use "Q_global_zone__def_0")
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (use "Q_global_zone__def_1")
                        (("2" (beta)
                          (("2" (eval-expr "2 ^ 6")
                            (("2" (replace -1)
                              (("2"
                                (split -)
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (rewrite "mod_uint_mod")
                                    (("1"
                                      (grind
                                       :exclude
                                       ("^"
                                        "mod"
                                        "expt"
                                        "L_mul_u32"
                                        "L_add_u32"
                                        "L_shr_u32")
                                       :rewrites
                                       ("add_u32_def"
                                        "mul_u32_def"
                                        "shr_u32_def"
                                        "sub_u32_def"
                                        "mod_lt_nat"))
                                      (("1"
                                        (expand "to_uint32")
                                        (("1"
                                          (rewrite "mod__eq")
                                          (("1"
                                            (rewrite "mod__eq")
                                            (("1"
                                              (rewrite "mod__eq")
                                              (("1"
                                                (rewrite "mod__eq")
                                                (("1"
                                                  (rewrite "mod__eq")
                                                  (("1"
                                                    (rewrite "mod__eq")
                                                    (("1"
                                                      (rewrite
                                                       "mod__eq")
                                                      (("1"
                                                        (rewrite
                                                         "mod__eq")
                                                        (("1"
                                                          (expand
                                                           "max_uint32")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil)
                                 ("4" (propax) nil nil)
                                 ("5" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (lsr const-decl "int" cmath framac_wp)
    (add_u32_def formula-decl nil interface nil)
    (mul_u32_def formula-decl nil interface nil)
    (sub_u32_def formula-decl nil interface nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" reals_mod reals)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (mod__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (mod_lt_nat formula-decl nil mod nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mod_of_mod formula-decl nil mod nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (nil application-judgement "below(m)" mod nil)
    (mod_uint_mod formula-decl nil acsl_logic_defs_eq nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (div_shift const-decl "unsigned_int" uint32 CPR)
    (minus const-decl "unsigned_int" uint32 CPR)
    (plus const-decl "unsigned_int" uint32 CPR)
    (times const-decl "unsigned_int" uint32 CPR)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Q_global_zone__def_1 formula-decl nil A_global_decoding nil)
    (Q_global_zone__def_0 formula-decl nil A_global_decoding nil)
    (subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (global_zone const-decl "unsigned_int" cpr_int CPR)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (global_decoding__eq_TCC1 0
  (global_decoding__eq_TCC1-1 nil 3771341577
   ("" (grind :rewrites ("real_expt_int_rew")))
   ((^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (global_decoding__eq subtype "acsl_logic_defs_eq.nz"
    "{n: integers.posnat | reals.<(n, exponentiation.^(2, 6))}")))
 (global_decoding__eq_TCC2 0
  (global_decoding__eq_TCC2-1 nil 3771341577
   ("" (grind :rewrites ("real_expt_int_rew")))
   ((^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (expt def-decl "real" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (global_decoding__eq subtype "acsl_logic_defs_eq.mes0"
    "naturalnumbers.below(exponentiation.^(2, real_defs.min(A_params.L_nb, 17)))")))
 (global_decoding__eq_TCC3 0
  (global_decoding__eq_TCC3-1 nil 3772552274
   ("" (grind :rewrites ("real_expt_int_rew")))
   ((^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (expt def-decl "real" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (global_decoding__eq subtype "acsl_logic_defs_eq.mes1"
    "naturalnumbers.below(exponentiation.^(2, real_defs.min(A_params.L_nb, 17)))")))
 (global_decoding__eq_TCC4 0
  (global_decoding__eq_TCC4-1 nil 3772552274 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_expt const-decl "nnreal" nnreal_expt power)
    (nn_rational_expt const-decl "nnreal" nn_rational_expt power)
    (nn_root const-decl "nnreal" nn_root power)
    (inverse const-decl "D" function_inverse nil)
    (numerator const-decl "int" rational_props_aux power)
    (denominator const-decl "posnat" rational_props_aux power))
   nil
   (global_decoding__eq subtype "acsl_logic_defs_eq.i"
    "integers.subrange(0, 1)")))
 (global_decoding__eq 0
  (ad-hoc_strategy "proved using ad-hoc strategy" 3771588439
   ("" (prove-global_decoding__eq) nil nil)
   ((Q_nb_def formula-decl nil A_params nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (global_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_i_ui formula-decl nil acsl_logic_defs_eq nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (global_zone const-decl "unsigned_int" cpr_int CPR)
    (real_expt_int_rew formula-decl nil real_expt power)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (global_decode const-decl "unsigned_int" cpr_int CPR)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_global_decode const-decl "int" A_global_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil nil)
   shostak)
  (global_decoding__eq-3 "" 3771347321
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          (("" (invoke (expand "%1" -1) (! -1 1 0))
            ((""
              (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
               (! 1 2))
              (("" (invoke (expand "%1" -1) (! -1 1 0))
                (("" (expand "closest_div_mult")
                  (("" (use "Q_nb_def")
                    (("" (replace -1 :dir rl)
                      (("" (replace "nb_def")
                        (("" (assert)
                          (("" (split -12)
                            (("1" (assert)
                              (("1"
                                (rewrite "global_zone__eq")
                                (("1"
                                  (name-replace
                                   "cpr_867"
                                   "global_zone (nz, mes0, mes1, i)")
                                  (("1"
                                    (match
                                     -
                                     "2^%1"
                                     step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                                    (("1"
                                      (match
                                       -
                                       "2^%1"
                                       step
                                       (then
                                        (eval-expr
                                         "exponentiation.^(2,%1)")
                                        (replace -1 :hide? t)))
                                      (("1"
                                        (match
                                         -
                                         "2^%1"
                                         step
                                         (then
                                          (eval-expr
                                           "exponentiation.^(2,%1)")
                                          (replace -1 :hide? t)))
                                        (("1"
                                          (match
                                           -
                                           "2^%1"
                                           step
                                           (then
                                            (eval-expr
                                             "exponentiation.^(2,%1)")
                                            (replace -1 :hide? t)))
                                          (("1"
                                            (match
                                             -
                                             "2^%1"
                                             step
                                             (then
                                              (eval-expr
                                               "exponentiation.^(2,%1)")
                                              (replace -1 :hide? t)))
                                            (("1"
                                              (match
                                               -
                                               "2^%1"
                                               step
                                               (then
                                                (eval-expr
                                                 "exponentiation.^(2,%1)")
                                                (replace -1 :hide? t)))
                                              (("1"
                                                (acsl-to-cpr -4)
                                                (("1"
                                                  (match
                                                   (-4 "minus(%,i)")
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("1"
                                                    (match
                                                     (-4 "times(4,%)")
                                                     step
                                                     (branch
                                                      (rewrite
                                                       "times_4_ui")
                                                      ((skip)
                                                       (then
                                                        (assert)
                                                        (match
                                                         1
                                                         "2^%1"
                                                         step
                                                         (then
                                                          (eval-expr
                                                           "2^%1")
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)))
                                                        (expand
                                                         "max"
                                                         1)
                                                        (lift-if 1)
                                                        (branch
                                                         (split 1)
                                                         ((then
                                                           (flatten)
                                                           (assert))))))))
                                                    (("1"
                                                      (match
                                                       (-4
                                                        "times(4,%)")
                                                       step
                                                       (branch
                                                        (rewrite
                                                         "times_4_ui")
                                                        ((skip)
                                                         (then
                                                          (assert)
                                                          (match
                                                           1
                                                           "2^%1"
                                                           step
                                                           (then
                                                            (eval-expr
                                                             "2^%1")
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)))
                                                          (expand
                                                           "max"
                                                           1)
                                                          (lift-if 1)
                                                          (branch
                                                           (split 1)
                                                           ((then
                                                             (flatten)
                                                             (assert))))))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "max(1, nz - i) = max(nz - i, 1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("2"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("3"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("4"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("5"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("6"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("7"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("8" (assert) nil nil)
                                                 ("9" (assert) nil nil)
                                                 ("10"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("10"
                                                    (assert)
                                                    (("10"
                                                      (hide-all-but 1)
                                                      (("10"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("11"
                                                  (assert)
                                                  nil
                                                  nil)
                                                 ("12"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("12"
                                                    (assert)
                                                    (("12"
                                                      (hide-all-but 1)
                                                      (("12"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("13"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (rewrite "global_zone__eq")
                                (("2"
                                  (name-replace
                                   "cpr_924"
                                   "global_zone (nz, mes0, mes1, i)")
                                  (("2"
                                    (match
                                     -
                                     "2^%1"
                                     step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                                    (("2"
                                      (match
                                       -
                                       "2^%1"
                                       step
                                       (then
                                        (eval-expr
                                         "exponentiation.^(2,%1)")
                                        (replace -1 :hide? t)))
                                      (("2"
                                        (match
                                         -
                                         "2^%1"
                                         step
                                         (then
                                          (eval-expr
                                           "exponentiation.^(2,%1)")
                                          (replace -1 :hide? t)))
                                        (("2"
                                          (match
                                           -
                                           "2^%1"
                                           step
                                           (then
                                            (eval-expr
                                             "exponentiation.^(2,%1)")
                                            (replace -1 :hide? t)))
                                          (("2"
                                            (match
                                             -
                                             "2^%1"
                                             step
                                             (then
                                              (eval-expr
                                               "exponentiation.^(2,%1)")
                                              (replace -1 :hide? t)))
                                            (("2"
                                              (match
                                               -
                                               "2^%1"
                                               step
                                               (then
                                                (eval-expr
                                                 "exponentiation.^(2,%1)")
                                                (replace -1 :hide? t)))
                                              (("2"
                                                (acsl-to-cpr -4)
                                                (("1"
                                                  (match
                                                   (-4 "minus(%,i)")
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("1"
                                                    (match
                                                     (-4 "times(4,%)")
                                                     step
                                                     (branch
                                                      (rewrite
                                                       "times_4_ui")
                                                      ((skip)
                                                       (then
                                                        (assert)
                                                        (match
                                                         1
                                                         "2^%1"
                                                         step
                                                         (then
                                                          (eval-expr
                                                           "2^%1")
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)))
                                                        (expand
                                                         "max"
                                                         1)
                                                        (lift-if 1)
                                                        (branch
                                                         (split 1)
                                                         ((then
                                                           (flatten)
                                                           (assert))))))))
                                                    (("1"
                                                      (match
                                                       (-4
                                                        "times(4,%)")
                                                       step
                                                       (branch
                                                        (rewrite
                                                         "times_4_ui")
                                                        ((skip)
                                                         (then
                                                          (assert)
                                                          (match
                                                           1
                                                           "2^%1"
                                                           step
                                                           (then
                                                            (eval-expr
                                                             "2^%1")
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)))
                                                          (expand
                                                           "max"
                                                           1)
                                                          (lift-if 1)
                                                          (branch
                                                           (split 1)
                                                           ((then
                                                             (flatten)
                                                             (assert))))))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "max(1, nz - i) = max(nz - i, 1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("2"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("3"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("4"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("5"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("6"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("7"
                                                    (match
                                                     (1 "times(4,%)")
                                                     step
                                                     (rewrite
                                                      "times_4_ui"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "max")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("8" (assert) nil nil)
                                                 ("9" (assert) nil nil)
                                                 ("10"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("10"
                                                    (assert)
                                                    (("10"
                                                      (hide-all-but 1)
                                                      (("10"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("11"
                                                  (assert)
                                                  nil
                                                  nil)
                                                 ("12"
                                                  (match
                                                   1
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("12"
                                                    (assert)
                                                    (("12"
                                                      (hide-all-but 1)
                                                      (("12"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("13"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Q_nb_def formula-decl nil A_params nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (global_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (times_4_ui formula-decl nil acsl_logic_defs_eq nil)
    (minus_i_ui formula-decl nil acsl_logic_defs_eq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (global_zone const-decl "unsigned_int" cpr_int CPR)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (global_decode const-decl "unsigned_int" cpr_int CPR)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_global_decode const-decl "int" A_global_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil nil)
   shostak)
  (global_decoding__eq-2 "" 3771341357
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep :preds? t)
      (("" (match - "nb=%1" step (label "nb_def" $1n))
        (("" (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
          (("" (invoke (expand "%1" -1) (! -1 1 0))
            ((""
              (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil)
               (! 1 2))
              (("" (invoke (expand "%1" -1) (! -1 1 0))
                (("" (expand "closest_div_mult")
                  (("" (use "Q_nb_def")
                    (("" (replace -1 :dir rl)
                      (("" (replace "nb_def")
                        (("" (assert)
                          (("" (split -12)
                            (("1" (assert)
                              (("1"
                                (rewrite "global_zone__eq")
                                (("1"
                                  (name-replace
                                   "cpr_937"
                                   "global_zone (nz, mes0, mes1, i)")
                                  (("1"
                                    (match
                                     -
                                     "2^%1"
                                     step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                                    (("1"
                                      (match
                                       -
                                       "2^%1"
                                       step
                                       (then
                                        (eval-expr
                                         "exponentiation.^(2,%1)")
                                        (replace -1 :hide? t)))
                                      (("1"
                                        (match
                                         -
                                         "2^%1"
                                         step
                                         (then
                                          (eval-expr
                                           "exponentiation.^(2,%1)")
                                          (replace -1 :hide? t)))
                                        (("1"
                                          (match
                                           -
                                           "2^%1"
                                           step
                                           (then
                                            (eval-expr
                                             "exponentiation.^(2,%1)")
                                            (replace -1 :hide? t)))
                                          (("1"
                                            (match
                                             -
                                             "2^%1"
                                             step
                                             (then
                                              (eval-expr
                                               "exponentiation.^(2,%1)")
                                              (replace -1 :hide? t)))
                                            (("1"
                                              (match
                                               -
                                               "2^%1"
                                               step
                                               (then
                                                (eval-expr
                                                 "exponentiation.^(2,%1)")
                                                (replace -1 :hide? t)))
                                              (("1"
                                                (acsl-to-cpr -4)
                                                (("1"
                                                  (match
                                                   -4
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("1"
                                                    (replace
                                                     -3
                                                     :dir
                                                     rl
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "max(1, nz - i) = max(nz - i, 1)")
                                                          (("1"
                                                            (lift-if +)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (lift-if
                                                                   +)
                                                                  (("1"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (lift-if
                                                                   +)
                                                                  (("2"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("4"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("5"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("6"
                                                  (hide-all-but 1)
                                                  (("6"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide-all-but 1)
                                                  (("7"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide-all-but 1)
                                                  (("8"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (hide-all-but 1)
                                                  (("9"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (hide-all-but 1)
                                                  (("10"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("11"
                                                  (hide-all-but 1)
                                                  (("11"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("12"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("13"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("14"
                                                  (hide-all-but 1)
                                                  (("14"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("15"
                                                  (hide-all-but 1)
                                                  (("15"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("16"
                                                  (hide-all-but 1)
                                                  (("16"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("17"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("18"
                                                  (eval-formula)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (rewrite "global_zone__eq")
                                (("2"
                                  (name-replace
                                   "cpr_937"
                                   "global_zone (nz, mes0, mes1, i)")
                                  (("2"
                                    (match
                                     -
                                     "2^%1"
                                     step
                                     (then
                                      (eval-expr
                                       "exponentiation.^(2,%1)")
                                      (replace -1 :hide? t)))
                                    (("2"
                                      (match
                                       -
                                       "2^%1"
                                       step
                                       (then
                                        (eval-expr
                                         "exponentiation.^(2,%1)")
                                        (replace -1 :hide? t)))
                                      (("2"
                                        (match
                                         -
                                         "2^%1"
                                         step
                                         (then
                                          (eval-expr
                                           "exponentiation.^(2,%1)")
                                          (replace -1 :hide? t)))
                                        (("2"
                                          (match
                                           -
                                           "2^%1"
                                           step
                                           (then
                                            (eval-expr
                                             "exponentiation.^(2,%1)")
                                            (replace -1 :hide? t)))
                                          (("2"
                                            (match
                                             -
                                             "2^%1"
                                             step
                                             (then
                                              (eval-expr
                                               "exponentiation.^(2,%1)")
                                              (replace -1 :hide? t)))
                                            (("2"
                                              (match
                                               -
                                               "2^%1"
                                               step
                                               (then
                                                (eval-expr
                                                 "exponentiation.^(2,%1)")
                                                (replace -1 :hide? t)))
                                              (("2"
                                                (acsl-to-cpr -4)
                                                (("1"
                                                  (match
                                                   -4
                                                   "minus(%,i)"
                                                   step
                                                   (rewrite
                                                    "minus_i_ui"))
                                                  (("1"
                                                    (replace
                                                     -3
                                                     :dir
                                                     rl
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "max(1, nz - i) = max(nz - i, 1)")
                                                          (("1"
                                                            (lift-if +)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (lift-if
                                                                   +)
                                                                  (("1"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (lift-if
                                                                   +)
                                                                  (("2"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("4"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("5"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("6"
                                                  (hide-all-but 1)
                                                  (("6"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide-all-but 1)
                                                  (("7"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide-all-but 1)
                                                  (("8"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (hide-all-but 1)
                                                  (("9"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("11"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("12"
                                                  (hide-all-but 1)
                                                  (("12"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("13"
                                                  (hide-all-but 1)
                                                  (("13"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("14"
                                                  (hide-all-but 1)
                                                  (("14"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("15"
                                                  (eval-formula)
                                                  nil
                                                  nil)
                                                 ("16"
                                                  (eval-formula)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Q_nb_def formula-decl nil A_params nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (global_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nil application-judgement "below(m)" reals_mod reals)
    (expt def-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (minus_i_ui formula-decl nil acsl_logic_defs_eq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mod_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (div_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (add_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (mul_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (minus const-decl "unsigned_int" uint32 CPR)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (unsinged_int__65536_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (global_zone const-decl "unsigned_int" cpr_int CPR)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (global_decode const-decl "unsigned_int" cpr_int CPR)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (L_global_decode const-decl "int" A_global_decoding nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil nil)
   shostak)
  (global_decoding__eq-1 nil 3770378420
   ("" (skeep :preds? t)
    (("" (expand "global_decode")
      (("" (expand "NB")
        (("" (assert)
          (("" (expand "closest_div_mult")
            (("" (rewrite "global_zone__eq" :dir rl)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (replace -1 :hide? t)
                          (("1" (expand "L_global_decode")
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "max")
                                    (("1"
                                      (replace -2 :hide? t)
                                      (("1"
                                        (replace -8)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (eval-expr "2 ^ 15")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (eval-expr "2 ^ 17")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "times")
                                                    (("1"
                                                      (expand "plus")
                                                      (("1"
                                                        (expand
                                                         "L_mul_u32")
                                                        (("1"
                                                          (expand
                                                           "L_add_u32")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (eval-expr
                                                               "2 ^ 32")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (rewrite
                                                                   "mod__eq")
                                                                  (("1"
                                                                    (rewrite
                                                                     "mod__eq")
                                                                    (("1"
                                                                      (rewrite
                                                                       "mod__eq")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "L_sub_u32")
                                        (("2"
                                          (lemma "mod_lt_nat")
                                          (("2"
                                            (inst? -1 :where 1)
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (eval-expr "2 ^ 6")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (case "i=1")
                          (("1" (replace -1 :hide? t)
                            (("1" (expand "L_global_decode")
                              (("1"
                                (lift-if 2)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (eval-expr "2 ^ 15")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (eval-expr "2 ^ 17")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "times")
                                                  (("1"
                                                    (expand "plus")
                                                    (("1"
                                                      (rewrite
                                                       "mod__eq")
                                                      (("1"
                                                        (rewrite
                                                         "mod__eq")
                                                        (("1"
                                                          (rewrite
                                                           "mod__eq")
                                                          (("1"
                                                            (expand
                                                             "L_mul_u32")
                                                            (("1"
                                                              (expand
                                                               "L_add_u32")
                                                              (("1"
                                                                (eval-expr
                                                                 "2 ^ 32")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (expand "L_sub_u32")
                                        (("2"
                                          (lemma "mod_lt_nat")
                                          (("2"
                                            (inst? -1 :where 1)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (eval-expr "2 ^ 6")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (replace -7)
                      (("2" (assert)
                        (("2" (eval-expr "2 ^ 15")
                          (("2" (replace -1 :hide? t)
                            (("2" (eval-expr "2 ^ 17")
                              (("2"
                                (replace -1 :hide? t)
                                (("2"
                                  (eval-expr "2 ^ (plus(15, 1))")
                                  (("2"
                                    (replace -1 :hide? t)
                                    (("2"
                                      (expand "min")
                                      (("2"
                                        (eval-expr "2 ^ 6")
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (eval-expr "2 ^ 17")
                                            (("2"
                                              (replace -1 :hide? t)
                                              (("2"
                                                (rewrite
                                                 "mod_uint_mod")
                                                (("1"
                                                  (expand "times")
                                                  (("1"
                                                    (expand "plus")
                                                    (("1"
                                                      (rewrite
                                                       "mod__eq")
                                                      (("1"
                                                        (rewrite
                                                         "mod__eq")
                                                        (("1"
                                                          (rewrite
                                                           "mod__eq")
                                                          (("1"
                                                            (rewrite
                                                             "mod__eq")
                                                            (("1"
                                                              (rewrite
                                                               "mod__eq")
                                                              (("1"
                                                                (rewrite
                                                                 "mod__eq")
                                                                (("1"
                                                                  (rewrite
                                                                   "mod__eq")
                                                                  (("1"
                                                                    (rewrite
                                                                     "mod__eq")
                                                                    (("1"
                                                                      (rewrite
                                                                       "mod__eq")
                                                                      (("1"
                                                                        (rewrite
                                                                         "mod__eq")
                                                                        (("1"
                                                                          (rewrite
                                                                           "mod__eq")
                                                                          (("1"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (expand
                                                                                   "L_global_decode")
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "L_sub_u32")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "mod_lt_nat")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "4294967296"
                                                                                                 "nz")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "L_mul_u32")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "L_add_u32")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "L_div_u32")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   "2^32")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    (("2"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       ("^"
                                                                                                        "mod"
                                                                                                        "expt"
                                                                                                        "L_mul_u32"
                                                                                                        "L_add_u32"
                                                                                                        "L_shr_u32")
                                                                                                       :rewrites
                                                                                                       ("add_u32_def"
                                                                                                        "mul_u32_def"
                                                                                                        "shr_u32_def"
                                                                                                        "sub_u32_def"
                                                                                                        "mod_lt_nat"))
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "forall(x:real): floor(floor(x)) = floor(x)")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "bla"
                                                                                                               "131072
                                         *
                                         L_global_zone(nz, mes0, mes1, 0)")
                                                                                                              (("1"
                                                                                                                (name-replace
                                                                                                                 "bl1"
                                                                                                                 "mod.mod(bla, 4294967296) + mes0")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "to_uint32(nz)=nz")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (name-replace
                                                                                                                       "bl2"
                                                                                                                       "mod.mod(mod.mod(bl1, 4294967296), nz)")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "mod.mod(65536 * bl2, 4294967296) = 65536 * bl2")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "bl2")
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "mod_lt_nat")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "4294967296"
                                                                                                                                 "65536 * mod.mod(mod.mod(bl1, 4294967296), nz)")
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "mod.mod(mod.mod(bl1, 4294967296), nz) < nz")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "mod_pos")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "to_uint32")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "max_uint32")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "mod_lt_nat")
                                                                                                                        (("2"
                                                                                                                          (inst?
                                                                                                                           -1
                                                                                                                           :where
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "floor_int")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (case
                                                                                 "i=1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "L_global_decode")
                                                                                    (("1"
                                                                                      (lift-if
                                                                                       2)
                                                                                      (("1"
                                                                                        (split
                                                                                         2)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "L_sub_u32")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "mod_lt_nat")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "4294967296"
                                                                                                   "nz-1")
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "max")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (eval-expr
                                                                                             "2^32")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               :hide?
                                                                                               t)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "mod_uint_mod")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "mul_u32_def")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "to_uint32")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max_uint32")
                                                                                                      (("2"
                                                                                                        (name-replace
                                                                                                         "bla"
                                                                                                         "mod.mod
                                      (131072
                                       *
                                       L_global_zone(nz, mes0, mes1, 1),
                                       4294967296)")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "add_u32_def")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "to_uint32")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "max_uint32")
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "max(1, L_sub_u32(nz, 1)) = max(nz - 1, 1)")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("1"
                                                                                                                    (name-replace
                                                                                                                     "bl1"
                                                                                                                     "mod.mod(bla + mes1, 4294967296)")
                                                                                                                    (("1"
                                                                                                                      (name-replace
                                                                                                                       "bl2a"
                                                                                                                       "L_div_u32
                                                                     (L_mul_u32
                                                                      (65536, mod.mod(bl1, max(nz - 1, 1))),
                                                                      max(nz - 1, 1))")
                                                                                                                      (("1"
                                                                                                                        (name-replace
                                                                                                                         "bl2b"
                                                                                                                         "uint32.div(mod.mod
                                                             (65536 * mod.mod(bl1, max(nz - 1, 1)),
                                                              4294967296),
                                                         max(nz - 1, 1))")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "bl2a=bl2b")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("1"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               ("^"
                                                                                                                                "mod"
                                                                                                                                "expt"
                                                                                                                                "L_mul_u32"
                                                                                                                                "L_add_u32"
                                                                                                                                "L_shr_u32")
                                                                                                                               :rewrites
                                                                                                                               ("add_u32_def"
                                                                                                                                "mul_u32_def"
                                                                                                                                "shr_u32_def"
                                                                                                                                "sub_u32_def"
                                                                                                                                "mod_lt_nat"))
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "1 * floor(mod.mod(1 + bl2b, 4294967296) / 2) = floor(mod.mod(1 + bl2b, 4294967296) / 2) ")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   :hide?
                                                                                                                                   t)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "forall(x:real): floor(floor(x)) = floor(x)")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "floor_int")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "bl2a")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "bl2b")
                                                                                                                                (("2"
                                                                                                                                  (grind
                                                                                                                                   :exclude
                                                                                                                                   ("^"
                                                                                                                                    "mod"
                                                                                                                                    "expt"
                                                                                                                                    "L_mul_u32"
                                                                                                                                    "L_add_u32"
                                                                                                                                    "L_shr_u32")
                                                                                                                                   :rewrites
                                                                                                                                   ("add_u32_def"
                                                                                                                                    "mul_u32_def"
                                                                                                                                    "shr_u32_def"
                                                                                                                                    "sub_u32_def"
                                                                                                                                    "mod_lt_nat"))
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "forall(x:real): floor(floor(x)) = floor(x)")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       -1)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "floor_int")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (grind
                                                                                                                     :exclude
                                                                                                                     ("^"
                                                                                                                      "mod"
                                                                                                                      "expt"
                                                                                                                      "L_mul_u32"
                                                                                                                      "L_add_u32"
                                                                                                                      "L_shr_u32")
                                                                                                                     :rewrites
                                                                                                                     ("add_u32_def"
                                                                                                                      "mul_u32_def"
                                                                                                                      "shr_u32_def"
                                                                                                                      "sub_u32_def"
                                                                                                                      "mod_lt_nat"))
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (eval-formula)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             3)
                                                                            (("3"
                                                                              (eval-expr
                                                                               "2 ^ 32")
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (eval-expr
                                                                             "2 ^ 32")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         3)
                                                                        (("2"
                                                                          (eval-expr
                                                                           "2 ^ 32")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (eval-expr
                                                                         "2 ^ 32")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (eval-formula)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   3)
                                                                  (("3"
                                                                    (eval-expr
                                                                     "2 ^ 32")
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (eval-expr
                                                                   "2 ^ 32")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 3)
                                                              (("2"
                                                                (eval-expr
                                                                 "2 ^ 32")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (expand "max")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (eval-expr "2 ^ 32")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 3)
                                                  (("4"
                                                    (rewrite
                                                     "global_zone__eq")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "NB")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (eval-formula)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "NB") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((global_decode const-decl "unsigned_int" cpr_int CPR)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (global_zone__eq formula-decl nil acsl_logic_defs_eq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (L_sub_u32 const-decl "int" A_uint32_operations nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (plus const-decl "unsigned_int" uint32 CPR)
    (L_add_u32 const-decl "int" A_uint32_operations nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (L_global_zone const-decl "[int, int, int, int -> int]"
     A_global_decoding nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mod__eq formula-decl nil acsl_logic_defs_eq nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nil application-judgement "below(m)" mod nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "below(m)" reals_mod reals)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (times const-decl "unsigned_int" uint32 CPR)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (L_global_decode const-decl "int" A_global_decoding nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (mul_u32_def formula-decl nil interface nil)
    (div const-decl "integer" div ints)
    (sgn const-decl "int" real_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (add_u32_def formula-decl nil interface nil)
    (L_div_u32 const-decl "int" A_uint32_operations nil)
    (sub_u32_def formula-decl nil interface nil)
    (mod_by1 formula-decl nil mod_lems ints)
    (floor_int formula-decl nil floor_ceil nil)
    (to_uint32 const-decl "(is_uint32)" cint framac_wp)
    (is_uint32 const-decl "bool" cint framac_wp)
    (even_int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (mod_pos formula-decl nil reals_mod reals)
    (div_nat formula-decl nil div ints)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 CPR)
    (mod_of_mod formula-decl nil mod nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (div const-decl "unsigned_int" uint32 CPR)
    (mod_uint_mod formula-decl nil acsl_logic_defs_eq nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (closest_div_mult const-decl "unsigned_int" uint32 CPR))
   shostak))
 (north_lat__eq_TCC1 0
  (north_lat__eq_TCC1-1 nil 3771426954 ("" (subtype-tcc) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 CPR)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (north_lat__eq subtype "acsl_logic_defs_eq.i"
    "integers.subrange(0, 1)")))
 (north_lat__eq_TCC2 0
  (north_lat__eq_TCC2-1 nil 3772552274
   ("" (grind :rewrites ("real_expt_int_rew")))
   ((^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (expt def-decl "real" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (LatAWB type-eq-decl nil awb32 CPR)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (north_lat__eq subtype "acsl_logic_defs_eq.mes0"
    "naturalnumbers.below(exponentiation.^(2, real_defs.min(A_params.L_nb, 17)))")))
 (north_lat__eq_TCC3 0
  (north_lat__eq_TCC3-1 nil 3772552274
   ("" (grind :rewrites ("real_expt_int_rew")))
   ((^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (unsinged_int__131072_j number-judgement "unsigned_int"
     acsl_logic_defs_eq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (expt def-decl "real" exponentiation nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (LatAWB type-eq-decl nil awb32 CPR)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (north_lat__eq subtype "acsl_logic_defs_eq.mes1"
    "naturalnumbers.below(exponentiation.^(2, real_defs.min(A_params.L_nb, 17)))")))
 (north_lat__eq 0
  (north_lat__eq-2 nil 3772561487
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j"
                  "real_expt_int_rew")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (use "Q_nb_def")
            (("" (replace -1 :dir rl)
              (("" (assert)
                (("" (rewrite "global_decoding__eq")
                  (("1" (rewrite "sub_u32__eq") nil)
                   ("2" (eval-formula) nil))))))))))))))))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (north_lat? const-decl "bool" cpr_int CPR)
    (real_expt_int_rew formula-decl nil real_expt power)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (global_decoding__eq formula-decl nil acsl_logic_defs_eq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs CPR)
    (nb const-decl "NumBins" acsl_logic_defs_eq nil)
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (L_nb const-decl "int" A_params nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (global_decode const-decl "unsigned_int" cpr_int CPR)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 CPR)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q_nb_def formula-decl nil A_params nil)
    (P_north_lat const-decl "bool" A_global_decoding nil))
   nil)
  (north_lat__eq-1 nil 3771427024
   (""
    (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
                  "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
                  "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
                  "unsinged_int__131072_j" "local_zone__uint32__j")
    (("" (skeep)
      (("" (invoke (expand "%1") (! 1 1 0))
        (("" (invoke (expand "%1") (! 1 2 0))
          (("" (use "Q_nb_def")
            (("" (replace -1 :dir rl)
              (("" (assert)
                (("" (rewrite "global_decoding__eq")
                  (("1" (rewrite "sub_u32__eq") nil nil)
                   ("2" (eval-formula) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (north_lat? const-decl "bool" cpr_int CPR)
    (real_expt_int_rew formula-decl nil real_expt power)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (global_decoding__eq formula-decl nil acsl_logic_defs_eq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 CPR)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt power)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (sub_u32__eq formula-decl nil acsl_logic_defs_eq nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (global_decode const-decl "unsigned_int" cpr_int CPR)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 CPR)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q_nb_def formula-decl nil A_params nil)
    (P_north_lat const-decl "bool" A_global_decoding nil))
   shostak)))

