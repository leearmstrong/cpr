(encoding
 (XZi_TCC1 0
  (XZi_TCC1-1 nil 3676217178 ("" (subtype-tcc) nil nil)
   ((Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (YZ const-decl "int" cpr_defs nil)
    (rlat const-decl "Latitude" cpr_defs nil)
    (Dloni const-decl "Longitude" encoding nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (XZi_TCC2 0
  (XZi_TCC2-1 nil 3676217178 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (YZ const-decl "int" cpr_defs nil)
    (rlat const-decl "Latitude" cpr_defs nil)
    (Dloni const-decl "Longitude" encoding nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (XZ_ub 0
  (XZ_ub-1 nil 3676219563
   ("" (skeep)
    (("" (expand "XZi")
      (("" (assert)
        (("" (rewrite "mod_frac")
          (("1" (typepred "fractional(lon / Dloni(nb, i)(lat))")
            (("1" (both-sides "*" "2^nb" -2)
              (("1" (both-sides "+" "1/2" -2)
                (("1"
                  (case "NOT floor(fractional(lon / Dloni(nb, i)(lat)) * 2 ^ nb + 1 / 2)<= floor(1 * 2 ^ nb + 1 / 2)")
                  (("1" (assert) nil nil)
                   ("2" (lemma "floor_plus_int")
                    (("2" (inst -1 "1*2^nb" "1/2")
                      (("2" (replaces -1)
                        (("2" (rewrite "floor_small")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (ground)
              (("1" (expand "Dloni") (("1" (assert) nil nil)) nil)
               ("2" (expand "Dloni") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((XZi const-decl "int" encoding nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Dloni const-decl "Longitude" encoding nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_small formula-decl nil prelude_aux "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (XZ_lb 0
  (XZ_lb-1 nil 3676220159
   ("" (skeep)
    (("" (expand "XZi")
      (("" (assert)
        (("" (rewrite "mod_frac")
          (("1" (typepred "fractional(lon / Dloni(nb, i)(lat))")
            (("1" (both-sides "*" "2^nb" -1)
              (("1" (both-sides "+" "1/2" -1)
                (("1"
                  (case "NOT floor(fractional(lon / Dloni(nb, i)(lat)) * 2 ^ nb + 1 / 2) >= floor(0 * 2 ^ nb + 1 / 2)")
                  (("1" (assert) nil nil)
                   ("2" (simplify -1)
                    (("2" (rewrite "floor_small")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (expand "Dloni") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((XZi const-decl "int" encoding nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Dloni const-decl "Longitude" encoding nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (pos_times_le formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_small formula-decl nil prelude_aux "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (encode_TCC1 0
  (encode_TCC1-1 nil 3665949263
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((cpr_exp const-decl "real" cpr_funs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (encode_TCC2 0
  (encode_TCC2-2 nil 3667235384
   ("" (skeep*)
    (("" (assert)
      (("" (case "integer?(mod(f0,f1))")
        (("1" (assert)
          (("1" (expand "integer?")
            (("1" (flatten)
              (("1" (assert)
                (("1" (use "mod_pos")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1"
                          (case "FORALL(a,b:int):a<b IMPLIES a<=b-1")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "mod")
            (("2" (expand "integer?")
              (("2" (lemma "rationals.closed_times")
                (("2" (inst?)
                  (("2" (lemma "integers.closed_times")
                    (("2" (inst?)
                      (("2" (lemma "rationals.closed_minus")
                        (("2" (inst?)
                          (("2" (lemma "integers.closed_minus")
                            (("2" (inst?)
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f1 skolem-const-decl "real" encoding nil)
    (f0 skolem-const-decl "int" encoding nil)
    (closed_minus formula-decl nil integers nil)
    (closed_minus formula-decl nil rationals nil)
    (closed_times formula-decl nil integers nil)
    (closed_times formula-decl nil rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (integer? const-decl "bool" integers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (encode_TCC2-1 nil 3665949263
   ("" (skeep)
    (("" (use "mod_pos")
      (("" (flatten)
        (("" (assert)
          (("" (hide -1)
            (("" (case "FORALL(a,b:int):a<b IMPLIES a<=b-1")
              (("1" (inst?) (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (encode_TCC3 0
  (encode_TCC3-3 nil 3669398590
   ("" (skeep*)
    (("" (assert)
      (("" (case "integer?(mod(f2,f1))")
        (("1" (assert)
          (("1" (expand "integer?")
            (("1" (flatten)
              (("1" (assert)
                (("1" (use "mod_pos")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1"
                          (case "FORALL(a,b:int):a<b IMPLIES a<=b-1")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "mod")
            (("2" (expand "integer?")
              (("2" (lemma "rationals.closed_times")
                (("2" (inst?)
                  (("2" (lemma "integers.closed_times")
                    (("2" (inst?)
                      (("2" (lemma "rationals.closed_minus")
                        (("2" (inst?)
                          (("2" (lemma "integers.closed_minus")
                            (("2" (inst?)
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f1 skolem-const-decl "real" encoding nil)
    (f2 skolem-const-decl "int" encoding nil)
    (closed_minus formula-decl nil integers nil)
    (closed_minus formula-decl nil rationals nil)
    (closed_times formula-decl nil integers nil)
    (closed_times formula-decl nil rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (integer? const-decl "bool" integers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (encode_TCC3-2 nil 3667235413
   ("" (assert)
    (("" (skeep)
      (("" (use "mod_pos")
        (("" (flatten)
          (("" (assert)
            (("" (hide -1)
              (("" (case "FORALL(a,b:int):a<b IMPLIES a<=b-1")
                (("1" (inst?) (("1" (assert) nil nil)) nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil))
   nil)
  (encode_TCC3-1 nil 3667234505 ("" (subtype-tcc) nil nil) nil nil))
 (encode_lat_bounds 0
  (encode_lat_bounds-1 nil 3676138620
   ("" (skeep)
    (("" (skoletin)
      (("" (replaces -1)
        (("" (expand "encode")
          (("" (assert)
            (("" (split 1)
              (("1" (expand "mod")
                (("1" (lemma "real_parts")
                  (("1" (inst?)
                    (("1" (move-terms -1 r 2)
                      (("1" (replaces -1 :dir rl)
                        (("1" (assert)
                          (("1"
                            (case "NOT 2 ^ data_field_size(Nb) * (YZ(Nb, i)(lat) / 2 ^ data_field_size(Nb)) = YZ(Nb,i)(lat)")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred
                                   "fractional(YZ(Nb, i)(lat) / 2 ^ data_field_size(Nb))")
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (cancel-by
                                       1
                                       "2 ^ data_field_size(Nb)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "YZ(Nb, i)(lat)")
                (("2"
                  (typepred
                   "mod(YZ(Nb, i)(lat), 2 ^ data_field_size(Nb))")
                  (("2" (hide -1)
                    (("2"
                      (typepred "YZ(Nb, i)(lat) -
           2 ^ data_field_size(Nb) *
            floor(YZ(Nb, i)(lat) / 2 ^ data_field_size(Nb))")
                      (("2" (expand "mod")
                        (("2" (assert)
                          (("2" (case "2 ^ data_field_size(Nb)<= 2^Nb")
                            (("1" (assert)
                              (("1"
                                (case
                                 "FORALL (ii, jj: int): ii<jj implies ii<=jj-1")
                                (("1"
                                  (inst
                                   -1
                                   "YZ(Nb, i)(lat) -
               2 ^ data_field_size(Nb) *
                floor(YZ(Nb, i)(lat) / 2 ^ data_field_size(Nb))"
                                   "2^Nb")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "data_field_size")
                                (("2"
                                  (expand "min")
                                  (("2"
                                    (lift-if 1)
                                    (("2"
                                      (split 1)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite
                                             "both_sides_expt_gt1_le"
                                             2)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (EncodingFun type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_parts formula-decl nil floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (YZ const-decl "int" cpr_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (encode_lon_bounds 0
  (encode_lon_bounds-1 nil 3676138657
   ("" (skeep)
    (("" (skoletin)
      (("" (replaces -1)
        (("" (expand "encode")
          (("" (assert)
            (("" (split 1)
              (("1" (expand "mod")
                (("1" (lemma "real_parts")
                  (("1" (inst?)
                    (("1" (move-terms -1 r 2)
                      (("1" (replaces -1 :dir rl)
                        (("1" (assert)
                          (("1"
                            (case "NOT 2 ^ data_field_size(Nb) * (XZi(Nb, i)(lat, lon) / 2 ^ data_field_size(Nb)) = XZi(Nb, i)(lat, lon)")
                            (("1" (assert) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred
                                   "fractional(XZi(Nb, i)(lat, lon) / 2 ^ data_field_size(Nb))")
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (cancel-by
                                       1
                                       "2 ^ data_field_size(Nb)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "XZi(Nb, i)(lat, lon)")
                (("2"
                  (typepred
                   "mod(XZi(Nb, i)(lat, lon), 2 ^ data_field_size(Nb))")
                  (("2" (hide -1)
                    (("2"
                      (typepred "XZi(Nb, i)(lat, lon) -
               2 ^ data_field_size(Nb) *
                floor(XZi(Nb, i)(lat, lon) / 2 ^ data_field_size(Nb))")
                      (("2" (expand "mod")
                        (("2" (assert)
                          (("2" (case "2 ^ data_field_size(Nb)<= 2^Nb")
                            (("1" (assert)
                              (("1"
                                (case
                                 "FORALL (ii, jj: int): ii<jj implies ii<=jj-1")
                                (("1"
                                  (inst
                                   -1
                                   "XZi(Nb, i)(lat, lon) -
                       2 ^ data_field_size(Nb) *
                        floor(XZi(Nb, i)(lat, lon) / 2 ^ data_field_size(Nb))"
                                   "2^Nb")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "data_field_size")
                                (("2"
                                  (expand "min")
                                  (("2"
                                    (lift-if 1)
                                    (("2"
                                      (split 1)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite
                                             "both_sides_expt_gt1_le"
                                             2)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (EncodingFun type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_parts formula-decl nil floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (XZi const-decl "int" encoding nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)))

