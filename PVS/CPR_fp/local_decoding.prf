(local_decoding
 (ZI_RP_TCC1 0
  (ZI_RP_TCC1-1 nil 3669398755 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (f_RP_TCC1 0
  (f_RP_TCC1-1 nil 3667235869 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (f_EP_TCC1 0
  (f_EP_TCC1-1 nil 3666462939 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (/= const-decl "boolean" notequal nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (f_EP_TCC2 0
  (f_EP_TCC2-2 nil 3667235951
   ("" (assert)
    (("" (skeep)
      (("" (grind)
        (("1" (typepred "YZi")
          (("1" (case "YZi < 2 ^ Nb")
            (("1" (hide-all-but (-1 1))
              (("1" (use "div_mult_pos_lt1") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (typepred "YZi")
          (("2" (use "nnreal_div_posreal_is_nnreal")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_div_posreal_is_nnreal judgement-tcc nil real_types nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)
  (f_EP_TCC2-1 nil 3667235440 ("" (subtype-tcc) nil nil) nil nil))
 (dZI_TCC1 0
  (dZI_TCC1-2 nil 3667235990
   ("" (assert)
    (("" (skeep)
      (("" (expand "abs")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (case "FORALL(x:real):x<2 IMPLIES floor(x)<=1")
                (("1" (inst?) (("1" (assert) nil nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat_expt application-judgement "posnat" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)
  (dZI_TCC1-1 nil 3667235815 ("" (subtype-tcc) nil nil) nil nil))
 (latZI_EP_TCC1 0
  (latZI_EP_TCC1-1 nil 3666462939 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (lonZI_EP_TCC1 0
  (lonZI_EP_TCC1-1 nil 3666462939 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (Rlati const-decl "real" local_decoding nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (lonZI_EP_TCC2 0
  (lonZI_EP_TCC2-1 nil 3666462939 ("" (subtype-tcc) nil nil)
   ((< const-decl "bool" reals nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NB type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (Rlati const-decl "real" local_decoding nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (lonZI_EP_TCC3 0
  (lonZI_EP_TCC3-1 nil 3669398755 ("" (subtype-tcc) nil nil)
   ((< const-decl "bool" reals nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NB type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (Rlati const-decl "real" local_decoding nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (Rloni_TCC1 0
  (Rloni_TCC1-1 nil 3669398755 ("" (subtype-tcc) nil nil)
   ((BinIndex type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NB type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (Rlati const-decl "real" local_decoding nil)
    (lonZI_EP const-decl "int" local_decoding nil)
    (/= const-decl "boolean" notequal nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil)))

