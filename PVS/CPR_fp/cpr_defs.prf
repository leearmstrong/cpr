(cpr_defs
 (cpr_mod_div_TCC1 0
  (cpr_mod_div_TCC1-1 nil 3676195745 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (cpr_mod_div subtype "cpr_funs.cpr_sub(cpr_defs.g110, cpr_defs.g11)"
    "{r: reals.real | r = cpr_funs.cpr_div(cpr_funs.cpr_mod(cpr_defs.a, cpr_defs.b), cpr_defs.b)}")))
 (dlat_TCC1 0
  (dlat_TCC1-1 nil 3660941288
   ("" (with-tccs (assert))
    (("" (skeep)
      (("" (invoke (typepred! "%1") (! -1 1))
        (("" (replace -1 :hide? t)
          (("" (invoke (typepred! "%1") (! -1 1 1))
            (("" (replace -1 :hide? t)
              (("" (assert)
                (("" (subtype-tcc)
                  (("" (grind)
                    (("" (typepred "i") (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (even? const-decl "bool" integers nil) nil
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NZ const-decl "int" basic_defs nil)
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (dlat subtype
    "cpr_funs.cpr_sub(cpr_funs.cpr_mul(4, basic_defs.NZ), cpr_defs.i)"
    "nonzero_real")))
 (dlat_TCC2 0
  (dlat_TCC2-1 nil 3665850692 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (dlat subtype
    "cpr_funs.cpr_div(360, cpr_funs.cpr_sub(cpr_funs.cpr_mul(4, basic_defs.NZ), cpr_defs.i))"
    "posreal")))
 (YZ_TCC1 0
  (YZ_TCC1-1 nil 3669394166 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (YZ subtype "cpr_funs.cpr_floor(cpr_defs.f3)" "int")))
 (YZ_lb 0
  (YZ_lb-2 nil 3676216893
   ("" (skeep)
    (("" (expand "YZ")
      (("" (assert)
        (("" (name-replace "A" "1/2")
          (("" (name-replace "B" "2 ^ nb")
            (("" (name-replace "C" "dlat(i)")
              (("" (name-replace "D" "lat")
                (("" (name-replace "E" "mod(D, C)")
                  (("" (lemma "nonneg_floor_is_nat")
                    (("" (inst?)
                      (("" (hide 2)
                        (("" (assert)
                          (("" (expand "E")
                            (("" (expand "D")
                              ((""
                                (expand "C")
                                ((""
                                  (expand "B")
                                  ((""
                                    (expand "A")
                                    ((""
                                      (case
                                       "2^nb*(mod(lat, dlat(i)) / dlat(i)) >= 0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (use
                                           "nonneg_real_mult_closed")
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (expand "mod")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((YZ const-decl "int" cpr_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (< const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil nil nil nil
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nonneg_real_mult_closed formula-decl nil real_types nil) nil nil
    (nonneg_floor_is_nat judgement-tcc nil floor_ceil nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (YZ_lb-1 nil 3665849818
   ("" (skeep)
    (("" (expand "YZ")
      (("" (assert)
        (("" (name-replace "A" "1/2")
          (("" (name-replace "B" "2 ^ nb")
            (("" (name-replace "C" "dlat(i)")
              (("" (name-replace "D" "lat")
                (("" (lemma "nonneg_floor_is_nat")
                  (("" (inst?)
                    (("" (hide 2)
                      (("" (expand "D")
                        (("" (expand "C")
                          (("" (expand "B")
                            (("" (expand "A")
                              ((""
                                (invoke
                                 (case
                                  "NOT 1/2 + %1 * %2 - %3 * %1 = 1/2 + %1 * (%2-%3)")
                                 (? 1 "1/2 + %1 * %2 - %3 * %1  >= 0"))
                                (("1" (assert) nil nil)
                                 ("2"
                                  (replace -1 :hide? t)
                                  (("2"
                                    (invoke
                                     (case "%1 >= 0")
                                     (? 1 "1 / 2 + %1 >= 0"))
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (use "nonneg_real_mult_closed")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil))
   shostak))
 (YZ_ub 0
  (YZ_ub-2 nil 3667234625
   ("" (skeep)
    (("" (expand "YZ")
      (("" (typepred "cpr_mod_div(lat,dlat(i))")
        (("1" (beta)
          (("1" (assert)
            (("1" (use "floor_plus")
              (("1" (replace -1 :hide? t)
                (("1" (expand "fractional" 1 1)
                  (("1" (case "floor(1/2) = 0")
                    (("1" (replace -1 :hide? t)
                      (("1" (assert)
                        (("1"
                          (case "floor(fractional(2 ^ nb * (mod(lat, dlat(i)) / dlat(i))) + 1/2) <= 1")
                          (("1"
                            (case "floor(2 ^ nb * (mod(lat, dlat(i)) / dlat(i)))<2 ^ nb")
                            (("1" (lemma "lt_plus_lt1")
                              (("1"
                                (inst? -1 :where -2)
                                (("1"
                                  (inst? -1 :where -3)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (hide-all-but (-1 1))
                                      (("1"
                                        (case
                                         "FORALL(i,j:int): i < 1 + j IMPLIES i <= j")
                                        (("1"
                                          (inst? -1 :where 1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (invoke (typepred "%1") (! 1 1))
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (case
                                     "(mod(lat, dlat(i)) / dlat(i)) >= 0")
                                    (("1"
                                      (case
                                       "FORALL(x:posreal,y:nonneg_real): y<1 IMPLIES x*y<x")
                                      (("1"
                                        (invoke
                                         (inst -1 "%1" "%2")
                                         (! -3 2 1)
                                         (! -3 2 2))
                                        (("1"
                                          (split -1)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (invoke
                                               (typepred "%1")
                                               (! 1 1 1))
                                              (("2"
                                                (lemma
                                                 "lt_div_lt_pos2")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "mod(lat,dlat(i))"
                                                   "dlat(i)"
                                                   "dlat(i)"
                                                   "dlat(i)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (use "mod_pos")
                                                    (("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (lemma "lt_times_lt_pos1")
                                            (("2"
                                              (inst -1 "y" "x" "1" "x")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (invoke (case "%1 < 0") (! 1 1))
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (invoke
                                             (case "%1 < 0")
                                             (! 1 1))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1))
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (eval-formula 1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep*)
            (("2" (lemma "cpr_mod_div_TCC1")
              (("2" (expand "cpr_sub")
                (("2" (expand "cpr_div")
                  (("2" (expand "cpr_mod")
                    (("2" (expand "cpr_floor")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (< const-decl "bool" reals nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (NZ const-decl "int" basic_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_plus_lt1 formula-decl nil real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_div_lt_pos2 formula-decl nil real_props nil)
    (mod_pos formula-decl nil reals_mod reals)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (i skolem-const-decl "CPRFormat" cpr_defs nil)
    (lat skolem-const-decl "Latitude" cpr_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NB type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor_plus formula-decl nil floor_ceil nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (cpr_mod_div_TCC1 subtype-tcc nil cpr_defs nil)
    (YZ const-decl "int" cpr_defs nil))
   nil)
  (YZ_ub-1 nil 3665858855
   ("" (skeep)
    (("" (expand "YZ")
      (("" (use "floor_plus")
        (("" (replace -1 :hide? t)
          (("" (expand "fractional" 1 1)
            (("" (case "floor(1/2) = 0")
              (("1" (replace -1 :hide? t)
                (("1" (assert)
                  (("1"
                    (case "floor(fractional(2 ^ nb * (mod(lat, dlat(i)) / dlat(i))) + 1/2) <= 1")
                    (("1"
                      (case "floor(2 ^ nb * (mod(lat, dlat(i)) / dlat(i)))<2 ^ nb")
                      (("1" (lemma "lt_plus_lt1")
                        (("1" (inst? -1 :where -2)
                          (("1" (inst? -1 :where -3)
                            (("1" (split -1)
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (case
                                   "FORALL(i,j:int): i < 1 + j IMPLIES i <= j")
                                  (("1"
                                    (inst? -1 :where 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (invoke (typepred "%1") (! 1 1))
                          (("2" (hide -2)
                            (("2"
                              (case "(mod(lat, dlat(i)) / dlat(i)) >= 0")
                              (("1"
                                (case
                                 "FORALL(x:posreal,y:nonneg_real): y<1 IMPLIES x*y<x")
                                (("1"
                                  (invoke
                                   (inst -1 "%1" "%2")
                                   (! -3 2 1)
                                   (! -3 2 2))
                                  (("1"
                                    (split -1)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1))
                                        (("2"
                                          (lemma "lt_div_lt_pos2")
                                          (("2"
                                            (inst
                                             -1
                                             "mod(lat,dlat(i))"
                                             "dlat(i)"
                                             "dlat(i)"
                                             "dlat(i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "mod_pos")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma "lt_times_lt_pos1")
                                      (("2"
                                        (inst -1 "y" "x" "1" "x")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (invoke (case "%1 < 0") (! 1 1))
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (invoke (case "%1 < 0") (! 1 1))
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (invoke
                                           (typepred "%1")
                                           (! 1 1))
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (invoke
                                                 (case "%1 < 0")
                                                 (! -1 2))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide-all-but (-2 1))
                                                  (("2"
                                                    (use
                                                     "neg_times_lt")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (eval-formula 1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (YZ_val 0
  (YZ_val-1 nil 3676224083
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (lemma "floor_def")
          (("1" (inst?)
            (("1" (replace -2)
              (("1" (flatten)
                (("1" (move-terms -1 r 1)
                  (("1" (cancel-by -1 "M") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (cross-mult -1)
          (("2" (cross-mult -2)
            (("2" (move-terms -1 l 2)
              (("2" (both-sides "+" "1/2" -2)
                (("2" (simplify -2) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((floor_def formula-decl nil floor_ceil nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (rlat_TCC1 0
  (rlat_TCC1-1 nil 3665761692 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil))
   nil
   (rlat subtype "cpr_funs.cpr_exp(2, cpr_defs.nb)" "nonzero_real")))
 (rlat_TCC2 0
  (rlat_TCC2-3 nil 3676216973
   ("" (skolem 1 ("nb" "i" "_"))
    ((""
      (case "FORALL (l1, l2: Latitude):
               l1<=l2 IMPLIES cpr_mul(dlat(i),
                       cpr_add(cpr_div(YZ(nb, i)(l2), cpr_exp(2, nb)),
                               floor(cpr_div(l2, dlat(i)))))
                >=cpr_mul(dlat(i),
                       cpr_add(cpr_div(YZ(nb, i)(l1), cpr_exp(2, nb)),
                               floor(cpr_div(l1, dlat(i)))))")
      (("1" (skeep)
        (("1" (inst-cp -1 "-90" "lat")
          (("1" (inst -1 "lat" "90")
            (("1" (assert)
              (("1"
                (case "floor(90 / dlat(i)) * dlat(i) + dlat(i) * (YZ(nb, i)(90) / 2 ^ nb) = 90")
                (("1"
                  (case "floor(-90 / dlat(i)) * dlat(i) + dlat(i) * (YZ(nb, i)(-90) / 2 ^ nb) = -90")
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "YZ")
                      (("2" (expand "dlat")
                        (("2" (assert)
                          (("2" (typepred "i")
                            (("2" (typepred "nb")
                              (("2"
                                (ground)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -1)
                                    (("1" (eval-formula 1) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1)
                                  (("2"
                                    (replaces -1)
                                    (("2" (eval-formula 1) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (replaces -1)
                                  (("3"
                                    (replaces -1)
                                    (("3" (eval-formula 1) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (replaces -1)
                                  (("4"
                                    (replaces -1)
                                    (("4" (eval-formula 1) nil nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (replaces -1)
                                  (("5"
                                    (replaces -1)
                                    (("5" (eval-formula 1) nil nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (replaces -1)
                                  (("6"
                                    (replaces -1)
                                    (("6" (eval-formula 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "YZ")
                    (("2" (expand "dlat")
                      (("2" (assert)
                        (("2" (typepred "nb")
                          (("2" (typepred "i")
                            (("2" (ground)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1" (eval-formula 1) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (replaces -1)
                                  (("2" (eval-formula 1) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (replaces -1)
                                (("3"
                                  (replaces -1)
                                  (("3" (eval-formula 1) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (replaces -1)
                                (("4"
                                  (replaces -1)
                                  (("4" (eval-formula 1) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (replaces -1)
                                (("5"
                                  (replaces -1)
                                  (("5" (eval-formula 1) nil nil))
                                  nil))
                                nil)
                               ("6"
                                (replaces -1)
                                (("6"
                                  (replaces -1)
                                  (("6" (eval-formula 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (skeep)
            (("2" (cancel-by 1 "dlat(i)")
              (("2" (hide (-1 1))
                (("2" (case "floor(l1 / dlat(i))<floor(l2 / dlat(i))")
                  (("1" (case "forall (m,n:int): m<n IMPLIES m+1<=n")
                    (("1"
                      (inst -1 "floor(l1 / dlat(i))"
                       "floor(l2 / dlat(i))")
                      (("1" (split -1)
                        (("1" (lemma "YZ_ub")
                          (("1" (inst -1 "i" "l1" "nb")
                            (("1" (both-sides "/" "2^nb" -1)
                              (("1"
                                (simplify -1)
                                (("1"
                                  (case-replace "2^nb/2^nb = 1")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (both-sides
                                       "+"
                                       "floor(l1 / dlat(i))"
                                       -1)
                                      (("1"
                                        (lemma "YZ_lb")
                                        (("1"
                                          (inst -1 "i" "l2" "nb")
                                          (("1"
                                            (both-sides "/" "2^nb" -1)
                                            (("1"
                                              (simplify -1)
                                              (("1"
                                                (case-replace
                                                 "0/2^nb = 0")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (both-sides
                                                     "+"
                                                     "floor(l2 / dlat(i))"
                                                     -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (cross-mult 1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2"
                    (case "floor(l1 / dlat(i)) = floor(l2 / dlat(i))")
                    (("1" (replace -1 2)
                      (("1" (hide 1)
                        (("1" (move-terms 1 l 1)
                          (("1" (simplify 1)
                            (("1" (cross-mult 1)
                              (("1"
                                (cancel-by 1 "2^nb")
                                (("1"
                                  (hide (-1 1))
                                  (("1"
                                    (expand "YZ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "1/2 + 2 ^ nb * (mod(l2, dlat(i)) / dlat(i))>= 1/2 + 2 ^ nb * (mod(l1, dlat(i)) / dlat(i))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (move-terms 1 l 1)
                                          (("2"
                                            (simplify 1)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (cancel-by 1 "2^nb")
                                                (("2"
                                                  (cross-mult 2)
                                                  (("2"
                                                    (cancel-by
                                                     2
                                                     "dlat(i)")
                                                    (("2"
                                                      (hide
                                                       (-1 -2 1 2))
                                                      (("2"
                                                        (expand "mod")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (both-sides "/" "dlat(i)" -1)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (YZ const-decl "int" cpr_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (^ const-decl "real" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (YZ_ub formula-decl nil cpr_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (YZ_lb formula-decl nil cpr_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil))
   nil
   (rlat subtype
    "cpr_funs.cpr_mul(cpr_defs.dlat(cpr_defs.i), cpr_funs.cpr_add(cpr_funs.cpr_div(cpr_defs.YZ(cpr_defs.nb, cpr_defs.i)(cpr_defs.lat), cpr_funs.cpr_exp(2, cpr_defs.nb)), floor_ceil.floor(cpr_funs.cpr_div(cpr_defs.lat, cpr_defs.dlat(cpr_defs.i)))))"
    "Latitude"))
  (rlat_TCC2-2 nil 3676197573
   ("" (skolem 1 ("nb" "i" "_"))
    ((""
      (case "FORALL (l1, l2: Latitude):
               l1<=l2 IMPLIES cpr_mul(dlat(i),
                       cpr_add(cpr_div(YZ(nb, i)(l2), cpr_exp(2, nb)),
                               floor(cpr_div(l2, dlat(i)))))
                >=cpr_mul(dlat(i),
                       cpr_add(cpr_div(YZ(nb, i)(l1), cpr_exp(2, nb)),
                               floor(cpr_div(l1, dlat(i)))))")
      (("1" (skeep)
        (("1" (inst-cp -1 "-90" "lat")
          (("1" (inst -1 "lat" "90")
            (("1" (assert)
              (("1"
                (case "floor(90 / dlat(i)) * dlat(i) + dlat(i) * (YZ(nb, i)(90) / 2 ^ nb) = 90")
                (("1"
                  (case "floor(-90 / dlat(i)) * dlat(i) + dlat(i) * (YZ(nb, i)(-90) / 2 ^ nb) = -90")
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "YZ")
                      (("2" (expand "dlat")
                        (("2" (assert)
                          (("2" (typepred "i")
                            (("2" (typepred "nb")
                              (("2"
                                (ground)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (replaces -1)
                                    (("1" (eval-formula 1) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1)
                                  (("2"
                                    (replaces -1)
                                    (("2" (eval-formula 1) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (replaces -1)
                                  (("3"
                                    (replaces -1)
                                    (("3" (eval-formula 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "YZ")
                    (("2" (expand "dlat")
                      (("2" (assert)
                        (("2" (typepred "nb")
                          (("2" (typepred "i")
                            (("2" (ground)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1" (eval-formula 1) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (replaces -1)
                                  (("2" (eval-formula 1) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (replaces -1)
                                (("3"
                                  (replaces -1)
                                  (("3" (eval-formula 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (skeep)
            (("2" (cancel-by 1 "dlat(i)")
              (("2" (hide (-1 1))
                (("2" (case "floor(l1 / dlat(i))<floor(l2 / dlat(i))")
                  (("1" (case "forall (m,n:int): m<n IMPLIES m+1<=n")
                    (("1"
                      (inst -1 "floor(l1 / dlat(i))"
                       "floor(l2 / dlat(i))")
                      (("1" (split -1)
                        (("1" (lemma "YZ_ub")
                          (("1" (inst -1 "i" "l1" "nb")
                            (("1" (both-sides "/" "2^nb" -1)
                              (("1"
                                (simplify -1)
                                (("1"
                                  (case-replace "2^nb/2^nb = 1")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (both-sides
                                       "+"
                                       "floor(l1 / dlat(i))"
                                       -1)
                                      (("1"
                                        (lemma "YZ_lb")
                                        (("1"
                                          (inst -1 "i" "l2" "nb")
                                          (("1"
                                            (both-sides "/" "2^nb" -1)
                                            (("1"
                                              (simplify -1)
                                              (("1"
                                                (case-replace
                                                 "0/2^nb = 0")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (both-sides
                                                     "+"
                                                     "floor(l2 / dlat(i))"
                                                     -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (cross-mult 1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2"
                    (case "floor(l1 / dlat(i)) = floor(l2 / dlat(i))")
                    (("1" (replace -1 2)
                      (("1" (hide 1)
                        (("1" (move-terms 1 l 1)
                          (("1" (simplify 1)
                            (("1" (cross-mult 1)
                              (("1"
                                (cancel-by 1 "2^nb")
                                (("1"
                                  (hide (-1 1))
                                  (("1"
                                    (expand "YZ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "1/2 + 2 ^ nb * (mod(l2, dlat(i)) / dlat(i))>= 1/2 + 2 ^ nb * (mod(l1, dlat(i)) / dlat(i))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred
                                             "cpr_mod_div(l1, dlat(i))")
                                            (("1"
                                              (beta)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace
                                                   -1
                                                   :hide?
                                                   t
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (typepred
                                                     "cpr_mod_div(l2, dlat(i))")
                                                    (("1"
                                                      (beta)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (move-terms 1 l 1)
                                          (("2"
                                            (simplify 1)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (cancel-by 1 "2^nb")
                                                (("2"
                                                  (cross-mult 2)
                                                  (("2"
                                                    (cancel-by
                                                     2
                                                     "dlat(i)")
                                                    (("2"
                                                      (hide
                                                       (-1 -2 1 2))
                                                      (("2"
                                                        (expand "mod")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (both-sides "/" "dlat(i)" -1)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((cpr_exp const-decl "real" cpr_funs nil)
    (NB type-eq-decl nil basic_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals))
   nil
   (rlat subtype
    "cpr_funs.cpr_mul(cpr_defs.dlat(cpr_defs.i), cpr_funs.cpr_add(cpr_funs.cpr_div(cpr_defs.YZ(cpr_defs.nb, cpr_defs.i)(cpr_defs.lat), cpr_funs.cpr_exp(2, cpr_defs.nb)), floor_ceil.floor(cpr_funs.cpr_div(cpr_defs.lat, cpr_defs.dlat(cpr_defs.i)))))"
    "Latitude"))
  (rlat_TCC2-1 nil 3667665498 ("" (subtype-tcc) nil nil) nil nil
   (rlat subtype
    "cpr_funs.cpr_mul(cpr_defs.dlat(cpr_defs.i), cpr_funs.cpr_add(cpr_funs.cpr_div(cpr_defs.YZ(cpr_defs.nb, cpr_defs.i)(cpr_defs.lat), cpr_funs.cpr_exp(2, cpr_defs.nb)), floor_ceil.floor(cpr_funs.cpr_div(cpr_defs.lat, cpr_defs.dlat(cpr_defs.i)))))"
    "Latitude")))
 (dlon_TCC1 0
  (dlon_TCC1-1 nil 3665761692 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (/= const-decl "boolean" notequal nil))
   nil (dlon subtype "cpr_defs.nl" "nonzero_real")))
 (dlon_TCC2 0
  (dlon_TCC2-2 nil 3676201741
   ("" (skeep)
    (("" (assert)
      (("" (split 2)
        (("1" (assert)
          (("1" (typepred "NL(lat_real)")
            (("1" (use "pos_div_lt")
              (("1" (assert)
                (("1" (typepred "i")
                  (("1" (split -1)
                    (("1" (replace -1 :hide? t)
                      (("1" (assert) nil nil)) nil)
                     ("2" (replace -1 :hide? t)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "le_div_le_pos")
          (("2" (inst -1 "360" "1" "nl" "360")
            (("2" (assert)
              (("2" (typepred "i")
                (("2" (split -1)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (le_div_le_pos formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (pos_div_lt formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (NL const-decl "subrange(1, 59)" nl nil))
   nil
   (dlon subtype "cpr_funs.cpr_div(360, cpr_defs.nl)"
    "{x: reals.real | booleans.AND(reals.<(0, x), reals.<=(x, 360))}"))
  (dlon_TCC2-1 nil 3676139429 ("" (subtype-tcc) nil nil) nil nil
   (dlon subtype "cpr_funs.cpr_div(360, cpr_defs.nl)"
    "{x: reals.real | booleans.AND(reals.<(0, x), reals.<=(x, 360))}"))))

