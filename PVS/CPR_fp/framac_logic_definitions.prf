(framac_logic_definitions
 (eq_0 0
  (eq_0-1 nil 3721584786
   ("" (skeep)
    (("" (expand "fractional")
      ((""
        (case "(((360 / x) / 2 ^ 18 + awb_lat * (360 / 2 ^ 32)) /
                                                      (360 / x)) = ((awb_lat + 2^14 / x) / 2^32) * x")
        (("1" (replace -1 :hide? t)
          (("1"
            (case "(((awb_lat + 2 ^ 14 / x) / 2 ^ 32) * x) = (awb_lat * x + 2 ^ 14) / 2 ^ 32")
            (("1" (replace -1 :hide? t)
              (("1"
                (case "2 ^ 17 * ((awb_lat * x + 2 ^ 14) / 2 ^ 32) = ((awb_lat * x + 2 ^ 14) / 2 ^ 15)")
                (("1" (replace -1 :hide? t)
                  (("1" (lemma "floor_plus_int")
                    (("1"
                      (inst -1
                       "-floor((awb_lat * x + 2 ^ 14) / 2 ^ 32) * 2 ^ 17"
                       "((awb_lat * x + 2 ^ 14) / 2 ^ 15)")
                      (("1" (replace -1 :hide? t)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2"
            (case "(((360 / x) / 2 ^ 18 + awb_lat * (360 / 2 ^ 32)) /
                                                      (360 / x))=((((360 / x) / 2 ^ 18 + awb_lat * (360 / 2 ^ 32)) /
                                                     360) * x)")
            (("1" (replace -1 :hide? t)
              (("1"
                (case "((360 / x) / 2 ^ 18 + awb_lat * (360 / 2 ^ 32)) / 360 = ((1 / x) / 2 ^ 18 + awb_lat * (1 / 2 ^ 32))")
                (("1" (replace -1 :hide? t)
                  (("1"
                    (case "((1 / x) / 2 ^ 18 + awb_lat * (1 / 2 ^ 32)) = ((awb_lat + 2 ^ 14 / x) / 2 ^ 32)")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2"
                        (case "((1 / x) / 2 ^ 18 + awb_lat * (1 / 2 ^ 32)) = ((1 / x) * 2 ^ 14 + awb_lat)/ 2 ^ 32")
                        (("1" (replace -1 :hide? t)
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide 2)
                          (("2"
                            (case "NOT awb_lat * (1 / 2 ^ 32) = awb_lat / 2 ^ 32")
                            (("1" (assert) nil nil)
                             ("2" (replace -1 :hide? t)
                              (("2"
                                (case
                                 "(1 / x) / 2 ^ 18 = (1 / x) * 2^14 / 2 ^ 32")
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1" (grind-reals) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (case
                                     "(1 / x) * 2 ^ 14 / 2 ^ 32 = (1 / x) * 2 ^ 14 * 2 ^ -32")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (case
                                         "(1 / x) / 2 ^ 18 = (1 / x) * 2 ^ -18")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (case
                                             "2 ^ 14 * 2 ^ -32 = 2 ^ -18")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (eval-formula)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind-reals) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (grind-reals) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (yzr_is_YZ_alt 0
  (yzr_is_YZ_alt-1 nil 3721561170
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "YZ_alt")
        ((""
          (case "2 ^ 17 * mod(dlat(i) / 2 ^ 18 + lat, dlat(i)) / dlat(i) = 2 ^ 17 * (mod(dlat(i) / 2 ^ 18 + lat, dlat(i)) / dlat(i))")
          (("1" (replace -1 :hide? t)
            (("1" (rewrite "mod_frac" 1)
              (("1" (expand "dlat")
                (("1" (assert)
                  (("1" (expand "NZ")
                    (("1" (expand "AWB2lat")
                      (("1" (expand "res")
                        (("1" (replace -1 :hide? t)
                          (("1" (use "eq_0")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (expand "yzr")
                                (("1"
                                  (invoke
                                   (case "%1 = %2")
                                   (! 1 1 1)
                                   (! 1 2 1))
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (case
                                       "2 ^ (17) *
                                                                          floor(2 ^ (14) * 2 ^ (-32) + 60 * (2 ^ (-32) * awb_lat) -
                                                                                 2 ^ (-32) * awb_lat * i) = floor((2 ^ 14 - awb_lat * i + 60 * awb_lat) / 2 ^ 32) * 2 ^ 17")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "commutative_mult")
                                          (("2"
                                            (inst
                                             -1
                                             " 2 ^ (17)"
                                             "floor(2 ^ (14) * 2 ^ (-32) + 60 * (2 ^ (-32) * awb_lat) -
                                                                    2 ^ (-32) * awb_lat * i)")
                                            (("2"
                                              (replace -1 :hide? t)
                                              (("2"
                                                (invoke
                                                 (case "%1 = %2")
                                                 (! 1 1 1 1)
                                                 (! 1 2 1 1))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "(2 ^ 14 - awb_lat * i + 60 * awb_lat) / 2 ^ 32 = (2 ^ 14 - awb_lat * i + 60 * awb_lat) * 2 ^ -32")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (invoke
                                       (case "%1 = %2")
                                       (! 1 1 1)
                                       (! 1 2 1))
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (case
                                           "((2 ^ 14 - awb_lat * i + 60 * awb_lat) / 2 ^ 15) = ((2 ^ 14 - awb_lat * i + 60 * awb_lat) * 2 ^ -15)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil AWB nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (yzr const-decl "int" framac_logic_definitions nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (YZ_alt const-decl "int" alt_encoding nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (commutative_mult formula-decl nil number_fields nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (eq_0 formula-decl nil framac_logic_definitions nil)
    (res const-decl "real" AWB nil)
    (NZ const-decl "int" basic_defs nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (yzr_gt_2_30_is_YZ_alt 0
  (yzr_gt_2_30_is_YZ_alt-1 nil 3721566392
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "YZ_alt")
        ((""
          (case "2 ^ 17 * mod(dlat(i) / 2 ^ 18 + lat, dlat(i)) / dlat(i) = 2 ^ 17 * (mod(dlat(i) / 2 ^ 18 + lat, dlat(i)) / dlat(i))")
          (("1" (replace -1 :hide? t)
            (("1" (rewrite "mod_frac" 1)
              (("1" (expand "dlat")
                (("1" (assert)
                  (("1" (expand "NZ")
                    (("1" (expand "AWB2lat")
                      (("1" (expand "res")
                        (("1" (replace -1 :hide? t)
                          (("1" (lemma "eq_0")
                            (("1" (inst -1 "awb_lat-2^32" "60-i")
                              (("1"
                                (invoke
                                 (case "%1=%2")
                                 (! -1 1)
                                 (! 1 2))
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (expand "yzr_gt_2_30")
                                      (("1"
                                        (invoke
                                         (case "%1 = %2")
                                         (! 1 1 1)
                                         (! 1 2 1))
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (invoke
                                             (case "%1=%2")
                                             (! 1 1 2)
                                             (! 1 2 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "commutative_mult")
                                                (("2"
                                                  (inst -1 "2^17" "_")
                                                  (("2"
                                                    (inst? -1 :where 1)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (invoke
                                                         (case
                                                          "%1 = %2")
                                                         (! 1 1 1 1)
                                                         (! 1 2 1 1))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (invoke
                                             (case "%1 = %2")
                                             (! 1 1 1)
                                             (! 1 2 1))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (invoke
                                     (case "%1 = %2")
                                     (! 1 1 1)
                                     (! 1 2 1))
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (invoke
                                         (case "%1 = %2")
                                         (! 1 1 2 1)
                                         (! 1 2 2 1))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (invoke
                                             (case "%1 = %2")
                                             (! 1 1 1)
                                             (! 1 2 1))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (invoke
                                                 (case "%1 = %2")
                                                 (!! 1 1 2)
                                                 (!! 1 2 2))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind-reals)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil AWB nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (> const-decl "bool" reals nil)
    (yzr_gt_2_30 const-decl "int" framac_logic_definitions nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (YZ_alt const-decl "int" alt_encoding nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (commutative_mult formula-decl nil number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (eq_0 formula-decl nil framac_logic_definitions nil)
    (res const-decl "real" AWB nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (NZ const-decl "int" basic_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (xzr_equivalence_TCC1 0
  (xzr_equivalence_TCC1-1 nil 3721579691 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (res const-decl "real" AWB nil)
    (AWB2lon const-decl "Longitude" AWB nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil))
   nil))
 (xzr_equivalence 0
  (xzr_equivalence-1 nil 3721566818
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "XZ_alt")
        (("" (expand "AWB2lon")
          (("" (expand "res")
            (("" (replace -1 :hide? t)
              (("" (lemma "eq_0")
                (("" (inst -1 "awb_lon" "max(nl-i,1)")
                  (("" (replace -1 :hide? t)
                    (("" (case "max(nl - i, 1) = nl-i")
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "xzr")
                          (("1"
                            (invoke (case "%1 = %2") (! 1 1 1)
                             (! 1 2 1))
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (invoke
                                 (case "%1 = %2")
                                 (! 1 1 2)
                                 (! 1 2 2))
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "commutative_mult")
                                    (("2"
                                      (inst -1 "2^17" "_")
                                      (("2"
                                        (inst? -1 :where 1)
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (invoke
                                             (case "%1 = %2")
                                             (! 1 1 1 1)
                                             (! 1 2 1 1))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (invoke
                                 (case "%1 = %2")
                                 (! 1 1 1)
                                 (! 1 2 1))
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "max")
                          (("2" (typepred "nl")
                            (("2" (typepred "i")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (LonAWB type-eq-decl nil AWB nil)
    (AWB2lon const-decl "Longitude" AWB nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (xzr const-decl "int" framac_logic_definitions nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (XZ_alt const-decl "int" alt_encoding nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (commutative_mult formula-decl nil number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eq_0 formula-decl nil framac_logic_definitions nil)
    (res const-decl "real" AWB nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (xzr_NL1_equivalence 0
  (xzr_NL1_equivalence-1 nil 3721580396
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "XZ_alt")
        (("" (expand "AWB2lon")
          (("" (expand "res")
            (("" (replace -1 :hide? t)
              (("" (lemma "eq_0")
                (("" (inst -1 "awb_lon" "max(1-i,1)")
                  (("" (replace -1 :hide? t)
                    (("" (case "max(1 - i, 1) = 1")
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "xzr_NL1")
                          (("1"
                            (invoke (case "%1 = %2") (! 1 1 1)
                             (! 1 2 1))
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (invoke
                                 (case "%1 = %2")
                                 (! 1 1 2)
                                 (! 1 2 2))
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "commutative_mult")
                                    (("2"
                                      (inst -1 "2^17" "_")
                                      (("2"
                                        (inst? -1 :where 1)
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (invoke
                                             (case "%1 = %2")
                                             (! 1 1 1 1)
                                             (! 1 2 1 1))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (invoke
                                 (case "%1 = %2")
                                 (! 1 1 1)
                                 (! 1 2 1))
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "max")
                          (("2" (typepred "i") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (LonAWB type-eq-decl nil AWB nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (AWB2lon const-decl "Longitude" AWB nil)
    (XZ_alt const-decl "int" alt_encoding nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (xzr_NL1 const-decl "int" framac_logic_definitions nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (commutative_mult formula-decl nil number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eq_0 formula-decl nil framac_logic_definitions nil)
    (res const-decl "real" AWB nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (rLatr_TCC1 0
  (rLatr_TCC1-1 nil 3721581604 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (rLatr_equivalence 0
  (rLatr_equivalence-1 nil 3721581625
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "Rlati")
        (("" (expand "latZI_EP")
          (("" (expand "ZI_RP")
            (("" (expand "dZI")
              (("" (expand "f_RP")
                (("" (expand "f_EP")
                  (("" (expand "F2pNb")
                    (("" (assert)
                      (("" (rewrite "mod_frac" 1)
                        (("" (expand "fractional")
                          (("" (expand "rLatr")
                            (("" (expand "dlat")
                              ((""
                                (assert)
                                ((""
                                  (expand "NZ")
                                  ((""
                                    (case
                                     "floor(1/2 + lat_s / (360 / (60 - i)) -
                     floor(lat_s / (360 / (60 - i)))
                     - yz / 2 ^ 17)
               * (360 / (60 - i))
               + floor(lat_s / (360 / (60 - i))) * (360 / (60 - i))
               + (360 / (60 - i)) * (yz / 2 ^ 17) = (360 / (60 - i)) * (floor(1/2 + lat_s / (360 / (60 - i)) -
                     floor(lat_s / (360 / (60 - i)))
                     - yz / 2 ^ 17) + floor(lat_s / (360 / (60 - i))) + (yz / 2 ^ 17))")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (case
                                         "floor(60 * (2 ^ (-32) * awb_lats) + 2 ^ (15) * 2 ^ (16) * 2 ^ (-32) -
                      2 ^ (15) * 2 ^ (-32) * yz
                      - 2 ^ (-32) * awb_lats * i)
                * (360 / (60 - i))
                + 2 ^ (-17) * (360 / (60 - i)) * yz = (360 / (60 - i)) * (floor(60 * (2 ^ (-32) * awb_lats) + 2 ^ (15) * 2 ^ (16) * 2 ^ (-32) -
                      2 ^ (15) * 2 ^ (-32) * yz
                      - 2 ^ (-32) * awb_lats * i) + 2 ^ (-17) * yz)")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (invoke
                                             (case "%1 = %2")
                                             (! 1 1 2)
                                             (! 1 2 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (case
                                                 "2 ^ (-17) * yz = (yz / 2 ^ 17)")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (invoke
                                                     (case "%1 = %2")
                                                     (!! 1 1 1)
                                                     (!! 1 2 1))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "AWB2lat")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "res")
                                                            (("2"
                                                              (case
                                                               "floor(1/2 + awb_lats * (360 / 2 ^ 32) / (360 / (60 - i)) -
                               floor(awb_lats * (360 / 2 ^ 32) / (360 / (60 - i)))
                               - yz / 2 ^ 17) = floor(1/2 + awb_lats * (360 / 2 ^ 32) / (360 / (60 - i))
                               - yz / 2 ^ 17) -
                               floor(awb_lats * (360 / 2 ^ 32) / (360 / (60 - i)))")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1 = %2")
                                                                     (!!
                                                                      1
                                                                      1
                                                                      1)
                                                                     (!!
                                                                      1
                                                                      2
                                                                      1))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (case
                                                                         " awb_lats * (360 / 2 ^ 32) / (360 / (60 - i)) = awb_lats * (60-i)/2^32 ")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (case
                                                                             "60 * (2 ^ (-32) * awb_lats) + 2 ^ (15) * 2 ^ (16) * 2 ^ (-32) -
                              2 ^ (15) * 2 ^ (-32) * yz
                              - 2 ^ (-32) * awb_lats * i = (60 * (awb_lats) + 2 ^ (15) * 2 ^ (16) -
                              2 ^ (15) * yz
                              -   awb_lats * i ) / 2^32")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (case
                                                                                 "1 / 2 + awb_lats * (60 - i) / 2 ^ 32 - yz / 2 ^ 17 = (2^31 + awb_lats * (60 - i) -  2 ^ (15) * yz ) / 2^32")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1 = %2")
                                                                                     (!!
                                                                                      1
                                                                                      1
                                                                                      1)
                                                                                     (!!
                                                                                      1
                                                                                      2
                                                                                      1))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (grind-reals)
                                                                                        (("2"
                                                                                          (eval-formula)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind-reals)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil AWB nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (Rlati const-decl "real" local_decoding nil)
    (NB type-eq-decl nil basic_defs nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rLatr const-decl "real" framac_logic_definitions nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (NZ const-decl "int" basic_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (div_cancel4 formula-decl nil real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (res const-decl "real" AWB nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rLatr_gt_2_30_equivalence 0
  (rLatr_gt_2_30_equivalence-1 nil 3721585534
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "Rlati")
        (("" (expand "latZI_EP")
          (("" (expand "ZI_RP")
            (("" (expand "dZI")
              (("" (expand "f_RP")
                (("" (expand "f_EP")
                  (("" (expand "F2pNb")
                    (("" (assert)
                      (("" (rewrite "mod_frac" 1)
                        (("" (expand "fractional")
                          (("" (expand " rLatr_gt_2_30")
                            (("" (expand "dlat")
                              ((""
                                (assert)
                                ((""
                                  (expand "NZ")
                                  ((""
                                    (factor 1)
                                    ((""
                                      (invoke
                                       (case "%1 = %2")
                                       (! 1 1 2)
                                       (! 1 2 2))
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (case
                                           "2 ^ (-17) * yz = (yz / 2 ^ 17)")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (invoke
                                               (case "%1 = %2")
                                               (!! 1 1 1)
                                               (!! 1 2 1))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "AWB2lat")
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand "res")
                                                      (("2"
                                                        (case
                                                         "floor(1/2 + (awb_lats * (360 / 2 ^ 32) - 360) / (360 / (60 - i)) -
              floor((awb_lats * (360 / 2 ^ 32) - 360) / (360 / (60 - i)))
              - yz / 2 ^ 17)
        + floor((awb_lats * (360 / 2 ^ 32) - 360) / (360 / (60 - i))) = floor(1/2 + (awb_lats * (360 / 2 ^ 32) - 360) / (360 / (60 - i)) 
              - yz / 2 ^ 17)
        + floor((awb_lats * (360 / 2 ^ 32) - 360) / (360 / (60 - i))) -
              floor((awb_lats * (360 / 2 ^ 32) - 360) / (360 / (60 - i)))")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (invoke
                                                               (case
                                                                "%1 = %2")
                                                               (!!
                                                                1
                                                                1
                                                                1)
                                                               (!!
                                                                1
                                                                2
                                                                1))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (grind-reals)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil AWB nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (> const-decl "bool" reals nil)
    (Rlati const-decl "real" local_decoding nil)
    (NB type-eq-decl nil basic_defs nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rLatr_gt_2_30 const-decl "real" framac_logic_definitions nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (NZ const-decl "int" basic_defs nil)
    (res const-decl "real" AWB nil)
    (expt def-decl "real" exponentiation nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (div_cancel4 formula-decl nil real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rLonr_TCC1 0
  (rLonr_TCC1-1 nil 3721654293 ("" (subtype-tcc) nil nil) nil nil))
 (rLonr_equivalence_TCC1 0
  (rLonr_equivalence_TCC1-1 nil 3721763945 ("" (subtype-tcc) nil nil)
   ((Latitude type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil AWB nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (LonAWB type-eq-decl nil AWB nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (^ const-decl "real" exponentiation nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (Rlati const-decl "real" local_decoding nil)
    (res const-decl "real" AWB nil)
    (AWB2lon const-decl "Longitude" AWB nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil))
 (rLonr_equivalence 0
  (rLonr_equivalence-1 nil 3721654320
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "Rloni")
          (("" (assert)
            (("" (factor 1)
              (("" (expand "rLonr" :assert? none)
                (("" (skoletin 1)
                  (("" (skoletin 1)
                    (("" (beta 1)
                      ((""
                        (invoke (case "%1=%2") (!! 1 1 1) (!! 1 2 1))
                        (("1"
                          (invoke (case "%1=%2") (!! 1 1 2) (!! 1 2 2))
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2"
                              (invoke (case "%1=%2") (!! 1 1 1)
                               (!! 1 2 1))
                              (("1"
                                (invoke
                                 (case "%1=%2")
                                 (!! 1 1 2)
                                 (!! 1 2 2))
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "lonZI_EP")
                                  (("2"
                                    (assert 1)
                                    (("2"
                                      (replace -1 :dir rl)
                                      (("2"
                                        (rewrite "mod_frac")
                                        (("2"
                                          (expand "fractional")
                                          (("2"
                                            (case
                                             "floor(1/2 + lons / dLonr - floor(lons / dLonr) - xz / 2 ^ 17) +
                     floor(lons / dLonr) = floor(1/2 + lons / dLonr - xz / 2 ^ 17) ")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (invoke
                                                 (case "%1=%2")
                                                 (!! 1 1 1)
                                                 (!! 1 2 1))
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (replace
                                                     -2
                                                     1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand
                                                       "AWB2lon")
                                                      (("2"
                                                        (expand "res")
                                                        (("2"
                                                          (replace
                                                           -4
                                                           1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (case
                                                               "360 / 2 ^ 32 * awb_lons / (360.0 / (nl - i)) = (awb_lons * (nl-i)) * 2^-32")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "xz / 2 ^ 17 = (xz * 2^15) * 2 ^ -32")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case
                                                                       "1/2 = 2^31 * 2^-32")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (factor
                                                                           1)
                                                                          (("1"
                                                                            (permute-mult
                                                                             1)
                                                                            (("1"
                                                                              (cancel
                                                                               1)
                                                                              (("1"
                                                                                (permute-terms!
                                                                                 (!!
                                                                                  1
                                                                                  2
                                                                                  1))
                                                                                (("1"
                                                                                  (case
                                                                                   "(2 ^ 31) - xz * (2 ^ 15) = - (xz - 2 ^ 16) * 2 ^ 15")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (case
                                                                                       "2^31 = 2^16 * 2^15")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (factor
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (eval-formula)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (eval-formula)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (case
                                                                   "360 / 2 ^ 32 * awb_lons / (360.0 / (nl - i)) = (360 / 2 ^ 32) * (awb_lons / (360.0 / (nl - i)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case
                                                                       "(awb_lons / (360.0 / (nl - i))) = awb_lons*(nl - i) / 360.0")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (case
                                                                           "(360 / 2 ^ 32) * (awb_lons * (nl - i) / 360.0) = (360 * (awb_lons * (nl - i) / 360.0))* 2 ^-32")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (cancel)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "floor_plus_int")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "-floor(lons/dLonr)"
                                                   "1/2 + lons / dLonr - xz / 2 ^ 17")
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (elim-unary 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (replace -2 1 :hide? t)
                            (("2" (expand "dlon")
                              (("2"
                                (replace -2 :dir rl)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if 1)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide-all-but -1)
                                          (("1"
                                            (typepred "nl")
                                            (("1"
                                              (typepred "i")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil AWB nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (Rlati const-decl "real" local_decoding nil)
    (LonAWB type-eq-decl nil AWB nil)
    (AWB2lon const-decl "Longitude" AWB nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (rLonr const-decl "real" framac_logic_definitions nil)
    (Rloni const-decl "Longitude" local_decoding nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (lonZI_EP const-decl "int" local_decoding nil)
    (dlon const-decl "{x: real | 0 < x AND x <= 360}" cpr_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat nonempty-type-eq-decl nil rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (divides const-decl "bool" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (res const-decl "real" AWB nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rLonr_nl_1_equivalence 0
  (rLonr_nl_1_equivalence-1 nil 3721666505
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "Rloni")
          (("" (assert)
            (("" (factor 1)
              (("" (expand "rLonr_nl_1" :assert? none)
                (("" (skoletin 1)
                  (("" (beta 1)
                    (("" (invoke (case "%1=%2") (!! 1 1 1) (!! 1 2 1))
                      (("1"
                        (invoke (case "%1=%2") (!! 1 1 2) (!! 1 2 2))
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2"
                            (invoke (case "%1=%2") (!! 1 1 1)
                             (!! 1 2 1))
                            (("1"
                              (invoke (case "%1=%2") (!! 1 1 2)
                               (!! 1 2 2))
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "lonZI_EP")
                                (("2"
                                  (assert 1)
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (rewrite "mod_frac")
                                      (("2"
                                        (expand "fractional")
                                        (("2"
                                          (case
                                           "floor(1/2 + lons / 360 - floor(lons / 360) - xz / 2 ^ 17) +
        floor(lons / 360) = floor(1/2 + lons / 360  - xz / 2 ^ 17) ")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (invoke
                                               (case "%1=%2")
                                               (!! 1 1 1)
                                               (!! 1 2 1))
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (replace
                                                   -2
                                                   1
                                                   :hide?
                                                   t)
                                                  (("2"
                                                    (expand "AWB2lon")
                                                    (("2"
                                                      (expand "res")
                                                      (("2"
                                                        (replace
                                                         -3
                                                         1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (case
                                                           "360 / 2 ^ 32 * awb_lons / 360  = awb_lons * 2^-32")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (case
                                                               "xz / 2 ^ 17 = (xz * 2^15) * 2 ^ -32")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "1/2 = 2^31 * 2^-32")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (factor
                                                                       1)
                                                                      (("1"
                                                                        (permute-mult
                                                                         1)
                                                                        (("1"
                                                                          (cancel
                                                                           1)
                                                                          (("1"
                                                                            (permute-terms!
                                                                             (!!
                                                                              1
                                                                              2
                                                                              1))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (eval-formula)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma "floor_plus_int")
                                              (("2"
                                                (inst
                                                 -1
                                                 "-floor(lons/360)"
                                                 "1/2 + lons / 360 - xz / 2 ^ 17")
                                                (("2"
                                                  (replace -1 :hide? t)
                                                  (("2"
                                                    (elim-unary 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "dlon")
                          (("2" (assert)
                            (("2" (replace -2 1 :hide? t :dir rl)
                              (("2"
                                (lift-if 1)
                                (("2"
                                  (split 1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (prop)
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil AWB nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (AWB2lon const-decl "Longitude" AWB nil)
    (Rloni const-decl "Longitude" local_decoding nil)
    (LonAWB type-eq-decl nil AWB nil)
    (rLonr_nl_1 const-decl "real" framac_logic_definitions nil)
    (Rlati const-decl "real" local_decoding nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (subrange type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (lonZI_EP const-decl "int" local_decoding nil)
    (dlon const-decl "{x: real | 0 < x AND x <= 360}" cpr_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (res const-decl "real" AWB nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (expt def-decl "real" exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rlat0_17_TCC1 0
  (rlat0_17_TCC1-1 nil 3721676321 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (rlat0_before_shifting_correctness 0
  (rlat0_before_shifting_correctness-1 nil 3721677776
   ("" (grind) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (j const-decl "int" global_decoding nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (rlat0 const-decl "real" global_decoding nil)
    (rlat0_17 const-decl "real" framac_logic_definitions nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rLatr_i_0_equivalence 0
  (rLatr_i_0_equivalence-1 nil 3721668848
   ("" (skeep)
    (("" (expand "rlat0_17" :assert? none)
      (("" (beta)
        (("" (expand "cpr_mul")
          (("" (expand "rLatr_i_0" :assert? none)
            (("" (skoletin)
              (("" (skoletin)
                (("" (name "jr" "floor(jar)")
                  (("" (name "j_60_i_r" "jr / 60")
                    (("" (beta)
                      (("" (replace -2)
                        ((""
                          (invoke (case "%1=%2") (!! 1 1 1) (!! 1 2 1))
                          (("1"
                            (invoke (case "%1=%2") (!! 1 1 2)
                             (!! 1 2 2))
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (permute-terms! (! 1 1))
                                (("2"
                                  (permute-terms! (! 1 1))
                                  (("2"
                                    (elim-unary 1)
                                    (("2"
                                      (invoke
                                       (case "%1=%2")
                                       (! 1 1 1)
                                       (! 1 2 2))
                                      (("1"
                                        (invoke
                                         (case
                                          "jr - (60 * (floor(jr / 60)))=%1")
                                         (! 1 2 1))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "cpr_mod")
                                            (("2"
                                              (expand "mod")
                                              (("2"
                                                (invoke
                                                 (case "%1=%2")
                                                 (! 1 1 1)
                                                 (! 1 2 1))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "jr")
                                                    (("2"
                                                      (expand "j")
                                                      (("2"
                                                        (expand
                                                         "cpr_floor")
                                                        (("2"
                                                          (invoke
                                                           (case
                                                            "%1=%2")
                                                           (! 1 1 1)
                                                           (! 1 2 1))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "cpr_add")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "jar")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "dLatr")
                              (("2"
                                (expand "dlat")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "NZ")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rlat0_17 const-decl "real" framac_logic_definitions nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (j const-decl "int" global_decoding nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (^ const-decl "real" exponentiation nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (jar skolem-const-decl "rat" framac_logic_definitions nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (jr skolem-const-decl "{i | i <= jar & jar < 1 + i}"
     framac_logic_definitions nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (dLatr skolem-const-decl "posrat" framac_logic_definitions nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (NZ const-decl "int" basic_defs nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rLatr_i_0 const-decl "real" framac_logic_definitions nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rlat1_before_shifting_correctness 0
  (rlat1_before_shifting_correctness-1 nil 3721677787
   ("" (grind) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (j const-decl "int" global_decoding nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (rlat0 const-decl "real" global_decoding nil)
    (rlat0_17 const-decl "real" framac_logic_definitions nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rLatr_i_1_equivalence 0
  (rLatr_i_1_equivalence-1 nil 3721677602
   ("" (skeep)
    (("" (expand "rlat1_17" :assert? none)
      (("" (beta)
        (("" (expand "cpr_mul")
          (("" (expand "rLatr_i_1" :assert? none)
            (("" (skoletin)
              (("" (skoletin)
                (("" (name "jr" "floor(jar)")
                  (("" (name "j_60_i_r" "jr / 59")
                    (("" (beta)
                      (("" (replace -2)
                        ((""
                          (invoke (case "%1=%2") (!! 1 1 1) (!! 1 2 1))
                          (("1"
                            (invoke (case "%1=%2") (!! 1 1 2)
                             (!! 1 2 2))
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (permute-terms! (! 1 1))
                                (("2"
                                  (permute-terms! (! 1 1))
                                  (("2"
                                    (elim-unary 1)
                                    (("2"
                                      (invoke
                                       (case "%1=%2")
                                       (! 1 1 1)
                                       (! 1 2 2))
                                      (("1"
                                        (invoke
                                         (case
                                          "jr - (59 * (floor(jr / 59)))=%1")
                                         (! 1 2 1))
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "cpr_mod")
                                            (("2"
                                              (expand "mod")
                                              (("2"
                                                (invoke
                                                 (case "%1=%2")
                                                 (! 1 1 1)
                                                 (! 1 2 1))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "jr")
                                                    (("2"
                                                      (expand "j")
                                                      (("2"
                                                        (expand
                                                         "cpr_floor")
                                                        (("2"
                                                          (invoke
                                                           (case
                                                            "%1=%2")
                                                           (! 1 1 1)
                                                           (! 1 2 1))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "cpr_add")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "jar")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "dLatr")
                              (("2"
                                (expand "dlat")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "NZ")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rlat1_17 const-decl "real" framac_logic_definitions nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (j const-decl "int" global_decoding nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (^ const-decl "real" exponentiation nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (jar skolem-const-decl "rat" framac_logic_definitions nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (jr skolem-const-decl "{i | i <= jar & jar < 1 + i}"
     framac_logic_definitions nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (dLatr skolem-const-decl "posrat" framac_logic_definitions nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (NZ const-decl "int" basic_defs nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rLatr_i_1 const-decl "real" framac_logic_definitions nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rlons_360_TCC1 0
  (rlons_360_TCC1-1 nil 3721750210 ("" (assert) nil nil)
   ((cpr_sub const-decl "real" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (rlons_360_TCC2 0
  (rlons_360_TCC2-1 nil 3721750210 ("" (then (skeep*) (assert)))
   ((posint_exp application-judgement "posint" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil))
   nil))
 (rlons_360_TCC3 0
  (rlons_360_TCC3-1 nil 3721750210 ("" (then (skeep*) (assert)))
   ((posint_exp application-judgement "posint" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nzint_max application-judgement "{k: nzint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil))
   nil))
 (rlons_360_rlons_TCC1 0
  (rlons_360_rlons_TCC1-1 nil 3721762495
   ("" (expand "restrict" :assert? none)
    (("" (skeep*) (("" (expand "rlons") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (rlons const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     global_decoding nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (rlons_360_rlons_TCC2 0
  (rlons_360_rlons_TCC2-1 nil 3721762495
   ("" (skeep*) (("" (expand "rlons_360") (("" (assert) nil nil)) nil))
    nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (rlons_360_rlons_TCC3 0
  (rlons_360_rlons_TCC3-1 nil 3721762495
   ("" (expand "restrict" :assert? none)
    (("" (skeep*) (("" (expand "rlons") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (rlons const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     global_decoding nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (rlons_360_rlons 0
  (rlons_360_rlons-1 nil 3721760814
   ("" (expand "restrict")
    (("" (skeep)
      (("" (assert)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "rlons")
              (("1" (assert)
                (("1" (expand "rlons_360") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "rlons_360")
              (("2" (assert)
                (("2" (expand "rlons") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (rlons const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     global_decoding nil)
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (global_decode_correct_lon_TCC1 0
  (global_decode_correct_lon_TCC1-1 nil 3721750210
   ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil))
   nil))
 (global_decode_correct_lon_TCC2 0
  (global_decode_correct_lon_TCC2-1 nil 3721750210
   ("" (lemma "encode_lat_bounds")
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (inst?) (("" (ground) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (encode_lat_bounds formula-decl nil encoding nil))
   shostak))
 (global_decode_correct_lon_TCC3 0
  (global_decode_correct_lon_TCC3-2 nil 3721757743
   ("" (lemma "encode_lat_bounds")
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (replaces -2)
            (("" (replaces -4)
              (("" (inst? -1 :where 1) (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (encode_lat_bounds formula-decl nil encoding nil))
   nil)
  (global_decode_correct_lon_TCC3-1 nil 3721750210
   ("" (subtype-tcc) nil nil) nil shostak))
 (global_decode_correct_lon_TCC4 0
  (global_decode_correct_lon_TCC4-2 nil 3721757864
   ("" (lemma "encode_lon_bounds")
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (replaces -2)
                (("" (replaces -3)
                  (("" (hide-all-but (-1 1))
                    (("" (inst?)
                      (("" (assert) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (encode_lon_bounds formula-decl nil encoding nil))
   nil)
  (global_decode_correct_lon_TCC4-1 nil 3721750210
   ("" (subtype-tcc) nil nil) nil shostak))
 (global_decode_correct_lon_TCC5 0
  (global_decode_correct_lon_TCC5-1 nil 3721750210
   ("" (skeep*)
    (("" (lemma "encode_lon_bounds")
      (("" (replaces -4)
        (("" (inst? -1 :where 1)
          (("" (assert) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((encode_lon_bounds formula-decl nil encoding nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (global_decode_correct_lon_TCC6 0
  (global_decode_correct_lon_TCC6-1 nil 3721750210
   ("" (skeep*)
    (("" (expand "rlons_360")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (global_decode_correct_lon_TCC7 0
  (global_decode_correct_lon_TCC7-1 nil 3721750210
   ("" (skeep*)
    (("" (expand "rlons_360")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (global_decode_correct_lon_TCC8 0
  (global_decode_correct_lon_TCC8-1 nil 3721750210
   ("" (skeep*)
    (("" (replace -11)
      (("" (eval-expr "2^(17+1)")
        (("" (replaces -1) (("" (cross-mult 1) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (global_decode_correct_lon 0
  (global_decode_correct_lon-1 nil 3721759373
   ("" (skeep *)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "global_correctness.global_decode_correct_lon")
          (("" (expand "ZO" :assert? none)
            (("" (assert)
              (("" (assert)
                (("" (replace -17 :dir rl)
                  (("" (replace -16 :dir rl)
                    (("" (replace -15 :dir rl)
                      (("" (replace -14 :dir rl)
                        (("" (replace -12 :dir rl)
                          (("" (replace -11 :dir rl)
                            (("" (replace -9 :dir rl)
                              ((""
                                (replace -8 :dir rl)
                                ((""
                                  (expand "rlon")
                                  ((""
                                    (expand "rlons_1")
                                    ((""
                                      (use "rlons_360_rlons")
                                      ((""
                                        (assert)
                                        ((""
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if -4)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -4
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand
                                                         "close_lon")
                                                        (("1"
                                                          (expand
                                                           "leq_mod")
                                                          (("1"
                                                            (name
                                                             "val"
                                                             "val(rlons_360(nb)(ence`elat, enco`elat)
                                                      (ence`elon, enco`elon))`rl0")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (skeep
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "mod")
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "floor(val / 360)+N")
                                                                    (("1"
                                                                      (invoke
                                                                       (case
                                                                        "%1=%2")
                                                                       (!!
                                                                        1
                                                                        1
                                                                        1
                                                                        1)
                                                                       (!!
                                                                        -2
                                                                        1
                                                                        1
                                                                        1))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -4
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "close_lon")
                                                        (("2"
                                                          (expand
                                                           "leq_mod")
                                                          (("2"
                                                            (name
                                                             "val"
                                                             "val(rlons_360(nb)(ence`elat, enco`elat)
                                                      (ence`elon, enco`elon))`rl1")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               *
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (skeep
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "mod")
                                                                  (("2"
                                                                    (inst
                                                                     2
                                                                     "floor(val / 360)+N")
                                                                    (("2"
                                                                      (invoke
                                                                       (case
                                                                        "%1=%2")
                                                                       (!!
                                                                        2
                                                                        1
                                                                        1
                                                                        1)
                                                                       (!!
                                                                        -1
                                                                        1
                                                                        1
                                                                        1))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if -4)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -4 :hide? t)
                                                  (("2"
                                                    (expand
                                                     "close_lon")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "rlons_360")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (EncodingFun type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (rlat0 const-decl "real" global_decoding nil)
    (rlat1 const-decl "real" global_decoding nil)
    (Maybe type-decl nil Maybe "structures/")
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (< const-decl "bool" reals nil)
    (dlon const-decl "{x: real | 0 < x AND x <= 360}" cpr_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (subrange type-eq-decl nil integers nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (close_lon const-decl "bool" global_correctness nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (global_decode_correct_lon formula-decl nil global_correctness nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (rlon skolem-const-decl "Longitude" framac_logic_definitions nil)
    (rlons_360_rlons formula-decl nil framac_logic_definitions nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (leq_mod const-decl "bool" global_correctness nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rlons_1 skolem-const-decl
     "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (ZO const-decl "posreal" global_correctness nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (rLonr_nl_2_59_i_0_equivalence 0
  (rLonr_nl_2_59_i_0_equivalence-1 nil 3721750211
   ("" (skoletin)
    (("" (skeep*)
      (("" (skoletin*)
        (("" (flatten)
          (("" (expand "rlons_360" -)
            (("" (assert)
              (("" (assert)
                (("" (replace -4 1 :hide? t)
                  (("" (assert)
                    (("" (expand "rLonr_nl_2_59_i_0" :assert? none)
                      (("" (skoletin 1)
                        (("" (skoletin 1)
                          (("" (name-replace "mr" "floor(m1r)")
                            (("" (name "m_nli_r" "mr / nl")
                              ((""
                                (beta)
                                ((""
                                  (factor 1)
                                  ((""
                                    (invoke
                                     (case "%1=%2")
                                     (! 1 1 1)
                                     (! 1 2 1))
                                    (("1"
                                      (invoke
                                       (case "%1=%2")
                                       (! 1 1 2)
                                       (! 1 2 2))
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (invoke
                                           (case "%1=%2")
                                           (!! 1 1 1)
                                           (!! 1 2 1))
                                          (("1"
                                            (invoke
                                             (case "%1=%2")
                                             (!! 1 1 2)
                                             (!! 1 2 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "Nb")
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "mod")
                                              (("2"
                                                (invoke
                                                 (case "%1=%2")
                                                 (!! 1 1 1)
                                                 (!! 1 2 1))
                                                (("1"
                                                  (invoke
                                                   (case "%1=%2")
                                                   (!! 1 1 2)
                                                   (!! 1 2 2))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "mr")
                                                    (("2"
                                                      (expand "m")
                                                      (("2"
                                                        (expand
                                                         "cpr_floor")
                                                        (("2"
                                                          (invoke
                                                           (case
                                                            "%1=%2")
                                                           (!! 1 1 1)
                                                           (!! 1 2 1))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "cpr_add")
                                                              (("2"
                                                                (expand
                                                                 "F1d2")
                                                                (("2"
                                                                  (expand
                                                                   "cpr_div")
                                                                  (("2"
                                                                    (expand
                                                                     "F2pNb")
                                                                    (("2"
                                                                      (expand
                                                                       "cpr_exp")
                                                                      (("2"
                                                                        (expand
                                                                         "Nb")
                                                                        (("2"
                                                                          (case
                                                                           " cpr_sub(cpr_mul(cpr_sub(NL(rlat0(17)(yz0, yz1)), 1), xz0),
                cpr_mul(NL(rlat0(17)(yz0, yz1)), xz1))
         / 2 ^ 17 = cpr_sub(cpr_mul(cpr_sub(NL(rlat0(17)(yz0, yz1)), 1), xz0),
                cpr_mul(NL(rlat0(17)(yz0, yz1)), xz1))
         * 2 ^ -17 ")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (case
                                                                               "1/2 = 2^16 * 2^-17")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (factor
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (permute-mult
                                                                                       1)
                                                                                      (("1"
                                                                                        (invoke
                                                                                         (case
                                                                                          "%1=%2")
                                                                                         (!!
                                                                                          1
                                                                                          1
                                                                                          1)
                                                                                         (!!
                                                                                          1
                                                                                          2
                                                                                          1))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (invoke
                                                                                             (case
                                                                                              "%1=%2")
                                                                                             (!!
                                                                                              1
                                                                                              1
                                                                                              1)
                                                                                             (!!
                                                                                              1
                                                                                              2
                                                                                              2))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "cpr_sub")
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "cpr_mul(NL(rlat0(17)(yz0, yz1)), xz1) = (nl * xz1)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "cpr_mul")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (eval-formula)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (invoke
                                                                                 (with-fresh-names
                                                                                  ((bla
                                                                                    "%1"))
                                                                                  (grind))
                                                                                 (!
                                                                                  1
                                                                                  1
                                                                                  1))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "dLonr")
                                        (("2"
                                          (expand "dlon")
                                          (("2"
                                            (expand "cpr_sub")
                                            (("2"
                                              (expand "cpr_div")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (dLonr skolem-const-decl "posrat" framac_logic_definitions nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (Nb skolem-const-decl "posint" framac_logic_definitions nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (mr skolem-const-decl "{i | i <= m1r & m1r < 1 + i}"
     framac_logic_definitions nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (m const-decl "int" global_decoding nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (dlon const-decl "{x: real | 0 < x AND x <= 360}" cpr_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NB type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (rLonr_nl_2_59_i_0 const-decl "real" framac_logic_definitions nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (rlat1 const-decl "real" global_decoding nil)
    (rlat0 const-decl "real" global_decoding nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (rLonr_nl_2_59_i_1_TCC1 0
  (rLonr_nl_2_59_i_1_TCC1-1 nil 3721755125 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (rLonr_nl_2_59_i_1_equivalence 0
  (rLonr_nl_2_59_i_1_equivalence-1 nil 3721755852
   ("" (skoletin)
    (("" (skeep*)
      (("" (skoletin*)
        (("" (flatten)
          (("" (expand "rlons_360" -)
            (("" (assert)
              (("" (replace -4 1 :hide? t)
                (("" (assert)
                  (("" (expand "rLonr_nl_2_59_i_1" :assert? none)
                    (("" (name "nl1r" "nl - 1.0")
                      (("" (name "dLonr" "360 / nl1r")
                        (("1"
                          (name "m1r"
                                "(nl1r * xz0 - nl * xz1 + 2 ^ 16) * 2 ^ -17")
                          (("1" (name "mr" "floor(m1r)")
                            (("1" (name "m_nli_r" "mr / nl1r")
                              (("1"
                                (beta)
                                (("1"
                                  (factor 1)
                                  (("1"
                                    (invoke
                                     (case "%1=%2")
                                     (! 1 1 1)
                                     (! 1 2 1))
                                    (("1"
                                      (invoke
                                       (case "%1=%2")
                                       (! 1 1 2)
                                       (! 1 2 2))
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (invoke
                                           (case "%1=%2")
                                           (!! 1 1 1)
                                           (!! 1 2 1))
                                          (("1"
                                            (invoke
                                             (case "%1=%2")
                                             (!! 1 1 2)
                                             (!! 1 2 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "Nb")
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "mod")
                                              (("2"
                                                (invoke
                                                 (case "%1=%2")
                                                 (!! 1 1 1 1 1 1)
                                                 (!! 1 2 1 1 1 1))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "m")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "Nb")
                                                        (("2"
                                                          (replace
                                                           -11
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (replace
                                                             -7
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (invoke
                                                               (case
                                                                "%1=%2")
                                                               (!!
                                                                1
                                                                1
                                                                1)
                                                               (!!
                                                                1
                                                                2
                                                                1))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (factor
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "(-1 * (nl * xz1) - xz0 + nl * xz0) / 2 ^ 17 = (-1 * (nl * xz1) - xz0 + nl * xz0) * 2 ^ -17")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (case
                                                                         "1 / 2 = 2^16 * 2^-17")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (factor
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (eval-formula)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (invoke
                                                                           (with-fresh-names
                                                                            ((bla
                                                                              "%1"))
                                                                            (grind))
                                                                           (!
                                                                            1
                                                                            1
                                                                            1))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "dlon")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (m const-decl "int" global_decoding nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (dlon const-decl "{x: real | 0 < x AND x <= 360}" cpr_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (Nb skolem-const-decl "posint" framac_logic_definitions nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nzrat nonempty-type-eq-decl nil rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NB type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (rLonr_nl_2_59_i_1 const-decl "real" framac_logic_definitions nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (rlat1 const-decl "real" global_decoding nil)
    (rlat0 const-decl "real" global_decoding nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (grLonr_nl_1_equivalence 0
  (grLonr_nl_1_equivalence-1 nil 3721755175
   ("" (skoletin)
    (("" (skeep*)
      (("" (skoletin)
        (("" (skoletin)
          (("" (flatten)
            (("" (skoletin)
              (("" (replace -1 :hide? t)
                (("" (expand "rlons_360")
                  (("" (assert)
                    (("" (replace -5 :dir rl :hide? t)
                      (("" (replace -1 :dir rl :hide? t)
                        (("" (replace -2 :hide? t)
                          (("" (assert)
                            (("" (case "max(1,1)=1")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (case "max(0,1)=1")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (expand "m")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "mod(floor(1/2 + -1 * xz1 / 2 ^ Nb), 1) = 0")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (eval-formula) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (m const-decl "int" global_decoding nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NB type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (rLonr_nl_1 const-decl "real" framac_logic_definitions nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (rlons_360 const-decl "Maybe[[# rl0: Longitude, rl1: Longitude #]]"
     framac_logic_definitions nil)
    (rlat1 const-decl "real" global_decoding nil)
    (rlat0 const-decl "real" global_decoding nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

