(nl
 (NL_cos_pos 0
  (NL_cos_pos-1 nil 3667732061
   ("" (skeep)
    (("" (lemma "cos_pi2")
      (("" (replaces -1 :dir rl)
        (("" (lemma "cos_decreasing")
          (("" (inst?)
            (("" (assert)
              (("" (split -1)
                (("1" (cancel-by 1 "pi") nil nil)
                 ("2" (cancel-by 1 "pi") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_pi2 formula-decl nil sincos trig)
    (cos_decreasing formula-decl nil trig_ineq trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (NL_dec_prep_denom_TCC1 0
  (NL_dec_prep_denom_TCC1-2 nil 3667732206 ("" (subtype-tcc) nil nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (NL_dec_prep_denom subtype "2"
    "{i: integers.int | booleans.OR(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l)) /= 0, reals.>=(i, 0))}"))
  (NL_dec_prep_denom_TCC1-1 nil 3667732126 ("" (subtype-tcc) nil nil)
   nil nil
   (NL_dec_prep_denom subtype "2"
    "{i: integers.int | booleans.OR(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l)) /= 0, reals.>=(i, 0))}")))
 (NL_dec_prep_denom 0
  (NL_dec_prep_denom-1 nil 3667732179
   ("" (skeep)
    (("" (lemma "NL_cos_pos")
      (("" (inst?)
        (("" (mult-ineq -1 -1)
          (("" (expand "^")
            (("" (expand "expt")
              (("" (expand "expt")
                (("" (expand "expt") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NL_cos_pos formula-decl nil nl nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (NL_num_rew_TCC1 0
  (NL_num_rew_TCC1-1 nil 3667732244
   ("" (assert) (("" (expand "NZ") (("" (assert) nil nil)) nil)) nil)
   ((NZ const-decl "int" basic_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil
   (NL_num_rew subtype "(number_fields.*(2, basic_defs.NZ))" "nznum")))
 (NL_num_rew_TCC2 0
  (NL_num_rew_TCC2-2 nil 3667732353 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil
   (NL_num_rew subtype "2"
    "{i: integers.int | booleans.OR((sincos_def.sin(number_fields./(pi_def.pi, 60))) /= 0, reals.>=(i, 0))}"))
  (NL_num_rew_TCC2-1 nil 3667732244 ("" (subtype-tcc) nil nil) nil nil
   (NL_num_rew subtype "2"
    "{i: integers.int | booleans.OR((sincos_def.sin(number_fields./(pi_def.pi, 60))) /= 0, reals.>=(i, 0))}")))
 (NL_num_rew 0
  (NL_num_rew-1 nil 3667732283
   ("" (expand "NZ")
    (("" (lemma "cos_0")
      (("" (replace -1 1 :dir rl)
        (("" (lemma "sin_times_sin")
          (("" (inst -1 "pi/60" "pi/60")
            (("" (expand "^" 1)
              (("" (simplify -1)
                (("" (expand "expt")
                  (("" (expand "expt")
                    (("" (expand "expt")
                      (("" (cross-mult -1) (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_0 formula-decl nil sincos_def trig)
    (sin_times_sin formula-decl nil trig_extra trig)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NZ const-decl "int" basic_defs nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (NL_arg_bounds_TCC1 0
  (NL_arg_bounds_TCC1-2 nil 3667733424
   ("" (lemma "NL_dec_prep_denom")
    (("" (assert)
      (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NL_dec_prep_denom formula-decl nil nl nil))
   nil
   (NL_arg_bounds subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l)), 2))"
    "nznum"))
  (NL_arg_bounds_TCC1-1 nil 3667732502 ("" (subtype-tcc) nil nil) nil
   nil
   (NL_arg_bounds subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l)), 2))"
    "nznum")))
 (NL_arg_bounds 0
  (NL_arg_bounds-1 nil 3667732520
   ("" (skeep)
    (("" (rewrite "NL_num_rew")
      (("" (split 1)
        (("1"
          (case "2>=2 * sin(pi / 60) ^ 2 / (cos((pi / 180) * l) ^ 2)")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (cancel-by 1 "2")
              (("2" (hide 1)
                (("2" (lemma "NL_dec_prep_denom")
                  (("2" (inst?)
                    (("2" (cross-mult 1)
                      (("2" (move-terms 1 r 1)
                        (("2" (simplify 1)
                          (("2"
                            (case-replace
                             "(cos((pi * l) / 180) ^ 2) - (sin(pi / 60) ^ 2) =
                                                                    (cos((pi * l) / 180) - sin(pi / 60)) * (cos((pi * l) / 180) + sin(pi / 60))")
                            (("1" (lemma "cos_pi2_minus")
                              (("1"
                                (inst -1 "pi/60")
                                (("1"
                                  (case
                                   "(cos((pi * l) / 180) - sin(pi / 60)) >=0")
                                  (("1"
                                    (case
                                     "(cos((pi * l) / 180) + sin(pi / 60)) >0")
                                    (("1"
                                      (mult-ineq -2 -1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (case "sin(pi / 60)>0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite "sin_0" :dir rl)
                                          (("2"
                                            (lemma "sin_increasing")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 1 :dir rl)
                                    (("2"
                                      (simplify 1)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (move-terms 1 l 2)
                                          (("2"
                                            (simplify 1)
                                            (("2"
                                              (case "l = 87")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "cos_decreasing")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "pi / 2 - pi / 60")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (cancel-by
                                                           1
                                                           "pi")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cancel-by
                                                           1
                                                           "pi")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (expand "expt")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (move-terms 1 l 2)
          (("2" (move-terms 1 r 1)
            (("2" (simplify 1)
              (("2" (lemma "NL_dec_prep_denom")
                (("2" (inst?)
                  (("2" (cross-mult)
                    (("2" (case "sin(pi / 60)>0")
                      (("1" (mult-ineq -1 -1)
                        (("1" (both-sides "*" "2" -1)
                          (("1" (expand "^")
                            (("1" (expand "expt")
                              (("1"
                                (expand "expt")
                                (("1"
                                  (expand "expt")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (rewrite "sin_0" :dir rl)
                          (("2" (lemma "sin_increasing")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NL_num_rew formula-decl nil nl nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even? const-decl "bool" integers nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (zero_times2 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sin const-decl "real" sincos_def trig)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (one_times formula-decl nil extra_tegies nil)
    (NL_dec_prep_denom formula-decl nil nl nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil) nil
    (expt def-decl "real" exponentiation nil)
    (cos_pi2_minus formula-decl nil trig_extra trig)
    (sin_0 formula-decl nil sincos_def trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_increasing formula-decl nil trig_ineq trig)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (cos_decreasing formula-decl nil trig_ineq trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil))
 (NL_acos_nz_TCC1 0
  (NL_acos_nz_TCC1-2 nil 3667733700
   ("" (lemma "NL_arg_bounds")
    (("" (skeep)
      (("" (inst?) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NL_arg_bounds formula-decl nil nl nil))
   nil
   (NL_acos_nz subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l)), 2)))))"
    "real_abs_le1"))
  (NL_acos_nz_TCC1-1 nil 3667733628 ("" (subtype-tcc) nil nil) nil nil
   (NL_acos_nz subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l)), 2)))))"
    "real_abs_le1")))
 (NL_acos_nz 0
  (NL_acos_nz-1 nil 3667733644
   ("" (skeep)
    (("" (lemma "acos_bij")
      (("" (lemma "acos_1")
        (("" (replaces -1 :dir rl)
          (("" (expand "bijective?")
            (("" (expand "injective?")
              (("" (lemma "NL_arg_bounds")
                (("" (inst?)
                  (("" (flatten)
                    ((""
                      (inst -3
                       " 1 - ((1 - cos(pi / (2 * NZ))) / (cos((pi / 180) * l) ^ 2))"
                       "1")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((acos_bij formula-decl nil acos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NL_arg_bounds formula-decl nil nl nil)
    (bijective? const-decl "bool" functions nil)
    (acos_1 formula-decl nil acos trig))
   nil))
 (NL_dec_prep_TCC1 0
  (NL_dec_prep_TCC1-1 nil 3667743145 ("" (subtype-tcc) nil nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (NL_dec_prep subtype "2"
    "{i: integers.int | booleans.OR(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l2)) /= 0, reals.>=(i, 0))}")))
 (NL_dec_prep_TCC2 0
  (NL_dec_prep_TCC2-2 nil 3667743379
   ("" (lemma "NL_dec_prep_denom")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NL_dec_prep_denom formula-decl nil nl nil))
   nil
   (NL_dec_prep subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l2)), 2))"
    "nznum"))
  (NL_dec_prep_TCC2-1 nil 3667743145 ("" (subtype-tcc) nil nil) nil nil
   (NL_dec_prep subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l2)), 2))"
    "nznum")))
 (NL_dec_prep_TCC3 0
  (NL_dec_prep_TCC3-2 nil 3667743396
   ("" (lemma "NL_arg_bounds")
    (("" (skeep)
      (("" (inst?)
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NL_arg_bounds formula-decl nil nl nil))
   nil
   (NL_dec_prep subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l2)), 2)))))"
    "real_abs_le1"))
  (NL_dec_prep_TCC3-1 nil 3667743145 ("" (subtype-tcc) nil nil) nil nil
   (NL_dec_prep subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l2)), 2)))))"
    "real_abs_le1")))
 (NL_dec_prep_TCC4 0
  (NL_dec_prep_TCC4-2 nil 3667743410
   ("" (lemma "NL_acos_nz")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NL_acos_nz formula-decl nil nl nil))
   nil
   (NL_dec_prep subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l2)), 2))))))) /= 0, reals.>=(i, 0))}"))
  (NL_dec_prep_TCC4-1 nil 3667743145 ("" (subtype-tcc) nil nil) nil nil
   (NL_dec_prep subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l2)), 2))))))) /= 0, reals.>=(i, 0))}")))
 (NL_dec_prep_TCC5 0
  (NL_dec_prep_TCC5-2 nil 3667743426
   ("" (lemma "NL_acos_nz")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NL_acos_nz formula-decl nil nl nil))
   nil
   (NL_dec_prep subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l1)), 2))))))) /= 0, reals.>=(i, 0))}"))
  (NL_dec_prep_TCC5-1 nil 3667743145 ("" (subtype-tcc) nil nil) nil nil
   (NL_dec_prep subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), nl.l1)), 2))))))) /= 0, reals.>=(i, 0))}")))
 (NL_dec_prep 0
  (NL_dec_prep-1 nil 3667743169
   ("" (skeep)
    (("" (cancel-by 1 "2*pi")
      (("" (hide (-1 2))
        (("" (case "cos((pi / 180) * l2)< cos((pi / 180) * l1) ")
          (("1" (lemma "NL_cos_pos")
            (("1" (inst?)
              (("1"
                (case "(cos((pi / 180) * l2))^2 < (cos((pi / 180) * l1))^2")
                (("1" (rewrite "NL_num_rew")
                  (("1"
                    (case "2 * sin(pi / 60) ^ 2 / (cos((pi / 180) * l2) ^ 2) > 2 * sin(pi / 60) ^ 2 / (cos((pi / 180) * l1) ^ 2)")
                    (("1" (lemma "acos_strict_decreasing")
                      (("1" (expand "strict_decreasing?")
                        (("1"
                          (inst -1
                           "(1 - (2 * (sin(pi / 60)) ^ 2 / (cos((pi / 180) * l2) ^ 2)))"
                           "(1 - (2 * (sin(pi / 60)) ^ 2 / (cos((pi / 180) * l1) ^ 2)))")
                          (("1" (assert)
                            (("1" (expand "^" 1 3)
                              (("1"
                                (expand "^" 1 5)
                                (("1"
                                  (expand "expt")
                                  (("1"
                                    (expand "expt")
                                    (("1"
                                      (cross-mult 1)
                                      (("1"
                                        (split 1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (typepred
                                           "acos(1 - (2 * (sin(pi / 60)) ^ 2 / (cos((pi * l1) / 180) ^ 2)))")
                                          (("2"
                                            (lemma "NL_acos_nz")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "NL_num_rew")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (cancel-by 1 "2 * sin(pi / 60) ^ 2")
                        (("1" (cancel-by -1 "2")
                          (("1" (lemma "sq_eq_0")
                            (("1" (inst -1 "sin(pi/60)")
                              (("1"
                                (expand "sq")
                                (("1"
                                  (hide-all-but (-1 -2))
                                  (("1"
                                    (expand "^")
                                    (("1"
                                      (expand "expt")
                                      (("1"
                                        (expand "expt")
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "sin_0")
                                                (("1"
                                                  (replaces
                                                   -1
                                                   -2
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (lemma
                                                     "sin_increasing")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "NL_dec_prep_denom")
                          (("2" (inst-cp -1 "l1")
                            (("2" (inst -1 "l2")
                              (("2"
                                (cross-mult 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (case "sin(pi / 60)>0")
                          (("1" (mult-ineq -1 -1)
                            (("1" (expand "^")
                              (("1"
                                (expand "expt")
                                (("1"
                                  (expand "expt")
                                  (("1"
                                    (expand "expt")
                                    (("1"
                                      (both-sides "*" "2" -1)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (rewrite "sin_0" :dir rl)
                              (("2"
                                (lemma "sin_increasing")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "^")
                    (("2" (expand "expt")
                      (("2" (expand "expt")
                        (("2" (expand "expt")
                          (("2" (mult-ineq -2 -2) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "cos_decreasing")
              (("2" (inst -1 "(pi / 180) * l2" "(pi / 180) * l1")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (cancel-by 1 "pi/180") nil nil)
                     ("2" (cancel-by 1 "pi") nil nil)
                     ("3" (cancel-by 1 "pi") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cos const-decl "real" sincos_def trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (NL_num_rew formula-decl nil nl nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even? const-decl "bool" integers nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (zero_times2 formula-decl nil real_props nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NL_dec_prep_denom formula-decl nil nl nil) nil
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil) nil
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_increasing formula-decl nil trig_ineq trig)
    (sin_0 formula-decl nil sincos_def trig)
    (sq const-decl "nonneg_real" sq reals)
    (sq_eq_0 formula-decl nil sq reals)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (both_sides_times_neg_le1_imp formula-decl nil extra_real_props
     nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil) nil
    (acos_strict_decreasing formula-decl nil acos trig)
    (expt def-decl "real" exponentiation nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_neg_lt2 formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NL_acos_nz formula-decl nil nl nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals)
    (sin const-decl "real" sincos_def trig)
    (NL_cos_pos formula-decl nil nl nil)
    (cos_decreasing formula-decl nil trig_ineq trig)
    (both_sides_times_pos_le1 formula-decl nil real_props nil))
   nil))
 (NL_87_TCC1 0
  (NL_87_TCC1-1 nil 3667743548 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig))
   nil
   (NL_87 subtype "2"
    "{i: integers.int | booleans.OR(sincos_def.cos(number_fields.*(87, (number_fields./(pi_def.pi, 180)))) /= 0, reals.>=(i, 0))}")))
 (NL_87_TCC2 0
  (NL_87_TCC2-2 nil 3667743668
   ("" (lemma "NL_dec_prep_denom")
    (("" (inst?) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NL_dec_prep_denom formula-decl nil nl nil))
   nil
   (NL_87 subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*(87, (number_fields./(pi_def.pi, 180)))), 2))"
    "nznum"))
  (NL_87_TCC2-1 nil 3667743548 ("" (subtype-tcc) nil nil) nil nil
   (NL_87 subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*(87, (number_fields./(pi_def.pi, 180)))), 2))"
    "nznum")))
 (NL_87_TCC3 0
  (NL_87_TCC3-2 nil 3667743680
   ("" (lemma "NL_arg_bounds")
    (("" (inst -1 "87") (("" (flatten) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NL_arg_bounds formula-decl nil nl nil))
   nil
   (NL_87 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*(87, (number_fields./(pi_def.pi, 180)))), 2)))))"
    "real_abs_le1"))
  (NL_87_TCC3-1 nil 3667743548 ("" (subtype-tcc) nil nil) nil nil
   (NL_87 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*(87, (number_fields./(pi_def.pi, 180)))), 2)))))"
    "real_abs_le1")))
 (NL_87_TCC4 0
  (NL_87_TCC4-2 nil 3667743690
   ("" (lemma "NL_dec_prep_denom")
    (("" (inst?) (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NL_dec_prep_denom formula-decl nil nl nil))
   nil
   (NL_87 subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 87)), 2))"
    "nznum"))
  (NL_87_TCC4-1 nil 3667743548 ("" (subtype-tcc) nil nil) nil nil
   (NL_87 subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 87)), 2))"
    "nznum")))
 (NL_87_TCC5 0
  (NL_87_TCC5-2 nil 3667743701
   ("" (lemma "NL_arg_bounds")
    (("" (inst?) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NL_arg_bounds formula-decl nil nl nil))
   nil
   (NL_87 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 87)), 2)))))"
    "real_abs_le1"))
  (NL_87_TCC5-1 nil 3667743548 ("" (subtype-tcc) nil nil) nil nil
   (NL_87 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 87)), 2)))))"
    "real_abs_le1")))
 (NL_87_TCC6 0
  (NL_87_TCC6-2 nil 3667743716
   ("" (lemma "NL_acos_nz")
    (("" (inst -1 "87") (("" (assert) nil nil)) nil)) nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NL_acos_nz formula-decl nil nl nil))
   nil
   (NL_87 subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((booleans.NOT)((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*(87, (number_fields./(pi_def.pi, 180)))), 2))))))) = 0), reals.>=(i, 0))}"))
  (NL_87_TCC6-1 nil 3667743548 ("" (subtype-tcc) nil nil) nil nil
   (NL_87 subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((booleans.NOT)((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*(87, (number_fields./(pi_def.pi, 180)))), 2))))))) = 0), reals.>=(i, 0))}")))
 (NL_87 0
  (NL_87-1 nil 3667743585
   ("" (rewrite "NL_num_rew")
    (("" (lemma "cos_minus_pi2")
      (("" (inst -1 "pi/60")
        (("" (rewrite "cos_neg" :dir rl)
          (("" (case-replace " (pi / 180) * 87 = -(pi / 60 - pi / 2)")
            (("1" (replace -2)
              (("1"
                (case "2 * (sin(pi / 60)) ^ 2 / (sin(pi / 60) ^ 2) = 2")
                (("1" (cancel-by -1 "2")
                  (("1" (simplify 2)
                    (("1" (lemma "acos_minus1")
                      (("1" (replaces -1)
                        (("1" (expand "^")
                          (("1" (expand "expt")
                            (("1" (expand "expt")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (cross-mult 1) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_minus_pi2 formula-decl nil trig_extra trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_neg formula-decl nil sincos_def trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (acos_minus1 formula-decl nil acos trig)
    (expt def-decl "real" exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (sin const-decl "real" sincos_def trig)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NL_num_rew formula-decl nil nl nil))
   nil))
 (NL_0_TCC1 0
  (NL_0_TCC1-1 nil 3667743781 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig))
   nil
   (NL_0 subtype "2"
    "{i: integers.int | booleans.OR(sincos_def.cos(0) /= 0, reals.>=(i, 0))}")))
 (NL_0_TCC2 0
  (NL_0_TCC2-2 nil 3667743869
   ("" (rewrite "cos_0") (("" (assert) nil nil)) nil)
   ((expt_1i formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (cos_0 formula-decl nil sincos_def trig))
   nil
   (NL_0 subtype "(exponentiation.^(sincos_def.cos(0), 2))" "nznum"))
  (NL_0_TCC2-1 nil 3667743781 ("" (subtype-tcc) nil nil) nil nil
   (NL_0 subtype "(exponentiation.^(sincos_def.cos(0), 2))" "nznum")))
 (NL_0_TCC3 0
  (NL_0_TCC3-2 nil 3667743883
   ("" (lemma "NL_arg_bounds")
    (("" (inst -1 "0") (("" (flatten) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NL_arg_bounds formula-decl nil nl nil))
   nil
   (NL_0 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(0), 2)))))"
    "real_abs_le1"))
  (NL_0_TCC3-1 nil 3667743781 ("" (subtype-tcc) nil nil) nil nil
   (NL_0 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(0), 2)))))"
    "real_abs_le1")))
 (NL_0_TCC4 0
  (NL_0_TCC4-2 nil 3667743895
   ("" (assert) (("" (rewrite "cos_0") (("" (assert) nil nil)) nil))
    nil)
   ((cos_0 formula-decl nil sincos_def trig)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_0 subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 0)), 2))"
    "nznum"))
  (NL_0_TCC4-1 nil 3667743781 ("" (subtype-tcc) nil nil) nil nil
   (NL_0 subtype
    "(exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 0)), 2))"
    "nznum")))
 (NL_0_TCC5 0
  (NL_0_TCC5-2 nil 3667743906
   ("" (assert)
    (("" (lemma "NL_arg_bounds")
      (("" (inst -1 "0") (("" (flatten) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NL_arg_bounds formula-decl nil nl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (NL_0 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 0)), 2)))))"
    "real_abs_le1"))
  (NL_0_TCC5-1 nil 3667743781 ("" (subtype-tcc) nil nil) nil nil
   (NL_0 subtype
    "(number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(number_fields.*((number_fields./(pi_def.pi, 180)), 0)), 2)))))"
    "real_abs_le1")))
 (NL_0_TCC6 0
  (NL_0_TCC6-2 nil 3667743917
   ("" (lemma "NL_acos_nz")
    (("" (inst -1 "0") (("" (assert) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NL_acos_nz formula-decl nil nl nil))
   nil
   (NL_0 subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((booleans.NOT)((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(0), 2))))))) = 0), reals.>=(i, 0))}"))
  (NL_0_TCC6-1 nil 3667743781 ("" (subtype-tcc) nil nil) nil nil
   (NL_0 subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR((booleans.NOT)((acos.acos((number_fields.-)(1, (number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), (exponentiation.^(sincos_def.cos(0), 2))))))) = 0), reals.>=(i, 0))}")))
 (NL_0 0
  (NL_0-1 nil 3667743845
   ("" (simplify 1)
    (("" (rewrite "cos_0")
      (("" (expand "^" 1 1)
        (("" (expand "expt")
          (("" (expand "expt")
            (("" (expand "expt")
              (("" (simplify 1)
                ((""
                  (case-replace
                   "(1 - cos(pi / (2 * NZ))) / 1 = 1 - cos(pi / (2 * NZ))")
                  (("1" (simplify 1)
                    (("1" (rewrite "acos_cos")
                      (("1" (expand "NZ")
                        (("1" (expand "^")
                          (("1" (expand "expt")
                            (("1" (expand "expt")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "NZ") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_0 formula-decl nil sincos_def trig)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cos const-decl "real" sincos_def trig)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (acos_cos formula-decl nil trig_inverses trig)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil))
 (NL_TCC1 0
  (NL_TCC1-1 nil 3665761692 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil))
   nil
   (NL subtype "cpr_nl_funs.nl_mul(2, basic_defs.NZ)" "nonzero_real")))
 (NL_TCC2 0
  (NL_TCC2-2 nil 3667743254 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL subtype "2"
    "{i: integers.int | booleans.OR(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))) /= 0, reals.>=(i, 0))}"))
  (NL_TCC2-1 nil 3665761692 ("" (subtype-tcc) nil nil) nil nil
   (NL subtype "2"
    "{i: integers.int | booleans.OR(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))) /= 0, reals.>=(i, 0))}")))
 (NL_TCC3 0
  (NL_TCC3-2 nil 3667235291
   ("" (assert)
    (("" (skeep)
      (("" (case "cos((pi / 180) * abs(lat))=0")
        (("1" (hide -2)
          (("1" (lemma "cos_eq_0")
            (("1" (inst?)
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (skolem -1 "k")
                    (("1" (case "abs(lat)=(2*k+1)*90")
                      (("1" (hide -2)
                        (("1"
                          (case "FORALL(n:nat): n=0 OR ((2*n+1)*90 > 87 AND (2*(-n)+1)*90 < -87)")
                          (("1" (case "k>=0")
                            (("1" (inst -2 "k")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (induct "n")
                              (("2"
                                (skeep)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-1 1))
                        (("2"
                          (case "abs(lat) = (2 * k + 1) * pi / 2 * 180/pi")
                          (("1" (hide -2) (("1" (grind) nil nil)) nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-1 1))
          (("2" (use "expt_nonzero")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_eq_0 formula-decl nil sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cos const-decl "real" sincos_def trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (NL subtype
    "cpr_nl_funs.nl_exp(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))), 2)"
    "nonzero_real"))
  (NL_TCC3-1 nil 3665761692 ("" (subtype-tcc) nil nil) nil nil
   (NL subtype
    "cpr_nl_funs.nl_exp(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))), 2)"
    "nonzero_real")))
 (NL_TCC4 0
  (NL_TCC4-1 nil 3665761692
   ("" (skeep)
    (("" (assert)
      (("" (use "NL_arg_bounds")
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (typepred "lat")
          (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (NZ const-decl "int" basic_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    nil (NL_arg_bounds formula-decl nil nl nil))
   nil
   (NL subtype
    "cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_exp(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))), 2)))"
    "real_abs_le1")))
 (NL_TCC5 0
  (NL_TCC5-1 nil 3665761692
   ("" (skeep)
    (("" (assert)
      (("" (use "NL_acos_nz")
        (("1" (assert) nil nil)
         ("2" (hide-all-but +) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    nil (NL_acos_nz formula-decl nil nl nil))
   nil
   (NL subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.OR(cpr_nl_funs.nl_acos(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_exp(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))), 2)))) /= 0, reals.>=(i, 0))}")))
 (NL_TCC6 0
  (NL_TCC6-2 nil 3676204241
   ("" (skeep)
    (("" (assert)
      ((""
        (name "ARG" "2 *
                     (acos(1 -
                            (1 - cos(pi / (2 * NZ))) /
                             cos(pi / 180 * abs(lat)) ^ 2)
                       ^ -1
                       * pi)")
        (("1" (replace -1)
          (("1" (case "1<=ARG AND ARG <60")
            (("1" (assert)
              (("1" (flatten)
                (("1" (split 6)
                  (("1" (assert) nil) ("2" (assert) nil)))))))
             ("2" (hide 7)
              (("2" (lemma "NL_dec_prep")
                (("2" (inst -1 "0" "abs(lat)")
                  (("1" (split -1)
                    (("1" (rewrite "NL_0")
                      (("1" (assert)
                        (("1" (hide -1)
                          (("1" (lemma "NL_dec_prep")
                            (("1" (inst -1 "abs(lat)" "87")
                              (("1"
                                (split -1)
                                (("1"
                                  (rewrite "NL_87")
                                  (("1" (assert) nil)))
                                 ("2"
                                  (hide (-1 2))
                                  (("2" (grind) nil)))))
                               ("2"
                                (hide (-1 2))
                                (("2" (grind) nil)))))))))))))
                     ("2" (hide -1)
                      (("2" (hide 2) (("2" (grind) nil)))))))
                   ("2" (hide 2)
                    (("2" (assert)
                      (("2" (ground)
                        (("1" (expand "abs")
                          (("1" (hide -1) (("1" (grind) nil)))))
                         ("2" (hide -1)
                          (("2" (grind) nil)))))))))))))))))))
         ("2" (lemma "NL_acos_nz")
          (("2" (inst?) (("2" (hide (2 8)) (("2" (grind) nil)))))))
         ("3" (lemma "NL_arg_bounds")
          (("3" (inst?)
            (("1" (ground) nil)
             ("2" (hide (2 8)) (("2" (grind) nil)))))))
         ("4" (lemma "NL_dec_prep_denom")
          (("4" (inst?)
            (("1" (ground) nil)
             ("2" (hide (2 8)) (("2" (grind) nil)))))))
         ("5" (expand "NZ") (("5" (assert) nil))))))))
    nil)
   ((nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (NL_dec_prep_denom formula-decl nil nl nil)
    (NL_arg_bounds formula-decl nil nl nil)
    (NL_acos_nz formula-decl nil nl nil) nil
    (NL_0 formula-decl nil nl nil) (NL_87 formula-decl nil nl nil)
    (NL_dec_prep formula-decl nil nl nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (acos const-decl "nnreal_le_pi" acos trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil
   (NL subtype
    "floor_ceil.floor(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), cpr_nl_funs.nl_exp(cpr_nl_funs.nl_acos(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_exp(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))), 2)))), (number_fields.-)(1))))"
    "integers.subrange(1, 59)"))
  (NL_TCC6-1 nil 3665761692 ("" (subtype-tcc) nil nil) nil nil
   (NL subtype
    "floor_ceil.floor(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), cpr_nl_funs.nl_exp(cpr_nl_funs.nl_acos(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_exp(cpr_nl_funs.nl_cos(cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, 180), real_defs.abs(nl.lat))), 2)))), (number_fields.-)(1))))"
    "integers.subrange(1, 59)")))
 (NL_decreasing 0
  (NL_decreasing-1 nil 3667743997
   ("" (skeep)
    (("" (case "l1=0")
      (("1" (expand "NL")
        (("1" (assert)
          (("1" (lift-if 1)
            (("1" (assert)
              (("1" (split 1)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (flip-ineq 3)
                            (("2" (case "l2<87")
                              (("1"
                                (lemma "NL_dec_prep")
                                (("1"
                                  (inst -1 "0" "l2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "NL_0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred
                                                 "floor(2 *
                          ((acos(1 -
                                  ((1 - cos(pi / (2 * NZ))) /
                                    (cos((pi / 180) * l2) ^ 2))))
                            ^ -1
                            * pi))")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "l2<87")
        (("1" (expand "NL")
          (("1" (lift-if 2)
            (("1" (assert)
              (("1" (split-ineq -2)
                (("1" (lemma "NL_dec_prep")
                  (("1"
                    (case "FORALL (r,s: real): r<s IMPLIES floor(r)<= floor(s)")
                    (("1" (inst -2 "l1" "l2")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (expand "abs") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (case "FORALL (r,s: real): r<s IMPLIES floor(r)<= floor(s)")
          (("1" (case "l1<87")
            (("1" (expand "NL")
              (("1" (assert)
                (("1" (lemma "NL_dec_prep")
                  (("1" (expand "abs")
                    (("1" (inst -1 "l1" "87")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (rewrite "NL_87")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "floor_int")
                                  (("1"
                                    (lift-if 3)
                                    (("1"
                                      (split 3)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "NL")
              (("2" (assert)
                (("2" (lift-if 4)
                  (("2" (split 4)
                    (("1" (flatten)
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (lift-if 2)
                        (("2" (split 2)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (< const-decl "bool" reals nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NL_0 formula-decl nil nl nil)
    (TRUE const-decl "bool" booleans nil)
    (NZ const-decl "int" basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NL_dec_prep formula-decl nil nl nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (NL_87 formula-decl nil nl nil)
    (floor_int formula-decl nil floor_ceil nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (denom_nz_TCC1 0
  (denom_nz_TCC1-1 nil 3665932799 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil (denom_nz subtype "nl.nl" "nznum")))
 (denom_nz 0
  (denom_nz-1 nil 3665932815
   ("" (skeep :preds? t)
    (("" (expand "NZ")
      (("" (lemma "cos_eq_1")
        (("" (inst?)
          (("" (flatten)
            (("" (assert)
              (("" (hide -2)
                (("" (skeep)
                  (("" (cross-mult -1)
                    (("" (cancel-by -1 "2")
                      (("" (cancel-by -1 "pi")
                        (("" (case "nl = 1/i")
                          (("1" (replace -1 -3)
                            (("1" (cross-mult -3) nil nil)) nil)
                           ("2" (cross-mult 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NZ const-decl "int" basic_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (cos_eq_1 formula-decl nil trig_basic trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (expr_bounds_TCC1 0
  (expr_bounds_TCC1-1 nil 3665933015
   ("" (skeep) (("" (use "denom_nz") (("" (assert) nil nil)) nil)) nil)
   ((denom_nz formula-decl nil nl nil)
    (subrange type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil
   (expr_bounds subtype
    "((number_fields.-)(1, sincos_def.cos(number_fields./(number_fields.*(2, pi_def.pi), nl.nl))))"
    "nznum")))
 (expr_bounds 0
  (expr_bounds-1 nil 3665933023
   ("" (skeep :preds? t)
    (("" (typepred "cos(2 * pi / nl)")
      (("" (lemma "denom_nz")
        (("" (inst?)
          (("" (move-terms -3 l 1)
            (("" (ground)
              (("1" (cross-mult 1)
                (("1" (expand "NZ")
                  (("1" (typepred "cos(pi/30)")
                    (("1" (move-terms 1 l 2)
                      (("1" (simplify 1)
                        (("1" (split-ineq -2)
                          (("1" (lemma "cos_eq_1")
                            (("1" (inst?)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (cross-mult -1)
                                      (("1"
                                        (cancel-by -1 "pi")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (cross-mult 1)
                (("2" (move-terms 1 l 2)
                  (("2" (move-terms 1 r 2)
                    (("2" (both-sides "-" "1" 1)
                      (("2" (simplify 1)
                        (("2" (expand "NZ")
                          (("2" (lemma "cos_decreasing")
                            (("2" (inst -1 "2*pi/nl" "pi/30")
                              (("2"
                                (assert)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (cancel-by 1 "pi")
                                    (("1" (cross-mult 1) nil nil))
                                    nil)
                                   ("2"
                                    (cancel-by 1 "pi")
                                    (("2" (cross-mult 2) nil nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (cos_eq_1 formula-decl nil trig_basic trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_plus_lt2 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (times_div2 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (cos_decreasing formula-decl nil trig_ineq trig)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (denom_nz formula-decl nil nl nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (arg_bounds_TCC1 0
  (arg_bounds_TCC1-1 nil 3665933920
   ("" (lemma "expr_bounds")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (expr_bounds formula-decl nil nl nil))
   nil
   (arg_bounds subtype
    "number_fields./(((number_fields.-)(1, sincos_def.cos(number_fields./(pi_def.pi, (number_fields.*(2, basic_defs.NZ)))))), ((number_fields.-)(1, sincos_def.cos(number_fields./(number_fields.*(2, pi_def.pi), nl.nl)))))"
    "nonneg_real")))
 (arg_bounds 0
  (arg_bounds-1 nil 3665933921
   ("" (skeep)
    (("" (lemma "sqrt_gt_0")
      (("" (lemma "sqrt_lt1")
        (("" (lemma "denom_nz")
          (("" (inst?)
            (("" (lemma "expr_bounds")
              (("" (inst?)
                (("" (flatten)
                  ((""
                    (inst -4
                     "(1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / nl))")
                    (("1"
                      (inst -5
                       "(1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / nl))")
                      (("1" (flatten)
                        (("1" (hide (-5 -7)) (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_gt_0 formula-decl nil sqrt reals)
    (denom_nz formula-decl nil nl nil)
    (expr_bounds formula-decl nil nl nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil) nil
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_lt1 formula-decl nil sqrt reals)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (trans_lat_TCC1 0
  (trans_lat_TCC1-2 nil 3667668879
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil (trans_lat subtype "cpr_nl_funs.nl_pi" "nonzero_real"))
  (trans_lat_TCC1-1 nil 3665847468
   ("" (skeep)
    (("" (lemma "arg_bounds")
      (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil (trans_lat subtype "cpr_nl_funs.nl_pi" "nonzero_real")))
 (trans_lat_TCC2 0
  (trans_lat_TCC2-1 nil 3665847468
   ("" (skeep)
    (("" (ground)
      (("1" (cancel-by 1 "180/pi")
        (("1" (hide-all-but 2)
          (("1" (lemma "acos_0")
            (("1" (replaces -1 :dir rl)
              (("1" (lemma " acos_strict_decreasing")
                (("1" (expand "strict_decreasing?")
                  (("1" (lemma "arg_bounds")
                    (("1" (inst?)
                      (("1" (flatten)
                        (("1" (hide -2)
                          (("1" (inst?)
                            (("1" (inst -2 "0")
                              (("1" (assert) nil nil)) nil)
                             ("2" (lemma "expr_bounds")
                              (("2"
                                (inst?)
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (cancel-by 1 "180/pi")
        (("2" (hide-all-but 1)
          (("2" (lemma "acos_1")
            (("2" (replaces -1 :dir rl)
              (("2" (lemma "acos_strict_decreasing")
                (("2" (expand "strict_decreasing?")
                  (("2" (lemma "arg_bounds")
                    (("2" (inst?)
                      (("2" (flatten)
                        (("2" (inst?)
                          (("1" (assert) nil nil)
                           ("2" (lemma "expr_bounds")
                            (("2" (inst?)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nl_mul const-decl "real" cpr_nl_funs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil
   (trans_lat subtype "cpr_nl_funs.nl_mul(2, basic_defs.NZ)"
    "nonzero_real")))
 (trans_lat_TCC3 0
  (trans_lat_TCC3-1 nil 3667668254
   ("" (assert)
    (("" (lemma "denom_nz")
      (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((denom_nz formula-decl nil nl nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (cos_range application-judgement "real_abs_le1" sincos trig))
   nil
   (trans_lat subtype
    "cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), nl.nl)))"
    "nonzero_real")))
 (trans_lat_TCC4 0
  (trans_lat_TCC4-2 nil 3667730788
   ("" (assert)
    (("" (lemma "expr_bounds")
      (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((expr_bounds formula-decl nil nl nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (trans_lat subtype
    "cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), nl.nl))))"
    "nonneg_real"))
  (trans_lat_TCC4-1 nil 3667668254 ("" (subtype-tcc) nil nil) nil nil
   (trans_lat subtype
    "cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), nl.nl))))"
    "nonneg_real")))
 (trans_lat_TCC5 0
  (trans_lat_TCC5-1 nil 3667668254
   ("" (assert)
    (("" (skeep)
      (("" (lemma "arg_bounds")
        (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (arg_bounds formula-decl nil nl nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (trans_lat subtype
    "cpr_nl_funs.nl_sqrt(cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), nl.nl)))))"
    "real_abs_le1")))
 (trans_lat_TCC6 0
  (trans_lat_TCC6-2 nil 3667730950
   ("" (skeep)
    (("" (ground)
      (("" (cancel-by 1 "180/pi")
        (("" (lemma "arg_bounds")
          (("" (inst?)
            (("" (lemma "acos_1")
              (("" (flatten)
                (("" (lemma "acos_strict_decreasing")
                  (("" (expand "strict_decreasing?")
                    (("" (inst?)
                      (("1" (assert) nil nil)
                       ("2" (lemma "expr_bounds")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nl_acos const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (arg_bounds formula-decl nil nl nil)
    (acos_1 formula-decl nil acos trig)
    (acos_strict_decreasing formula-decl nil acos trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expr_bounds formula-decl nil nl nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (acos const-decl "nnreal_le_pi" acos trig) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (subrange type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil
   (trans_lat subtype
    "cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(180, cpr_nl_funs.nl_pi), cpr_nl_funs.nl_acos(cpr_nl_funs.nl_sqrt(cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), nl.nl)))))))"
    "{lat: reals.real | reals.>(lat, 0)}"))
  (trans_lat_TCC6-1 nil 3667668254 ("" (subtype-tcc) nil nil) nil nil
   (trans_lat subtype
    "cpr_nl_funs.nl_mul(cpr_nl_funs.nl_div(180, cpr_nl_funs.nl_pi), cpr_nl_funs.nl_acos(cpr_nl_funs.nl_sqrt(cpr_nl_funs.nl_div(cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_pi, cpr_nl_funs.nl_mul(2, basic_defs.NZ)))), cpr_nl_funs.nl_sub(1, cpr_nl_funs.nl_cos(cpr_nl_funs.nl_div(cpr_nl_funs.nl_mul(2, cpr_nl_funs.nl_pi), nl.nl)))))))"
    "{lat: reals.real | reals.>(lat, 0)}")))
 (trans_lat_dec 0
  (trans_lat_dec-1 nil 3665847604
   ("" (expand "strict_decreasing?")
    (("" (skeep :preds? t)
      (("" (expand "trans_lat")
        (("" (cancel-by 1 "180/pi")
          (("" (lemma "acos_strict_decreasing")
            (("" (hide (2))
              (("" (case "2*pi/y<2*pi/x")
                (("1" (lemma "cos_decreasing")
                  (("1" (inst -1 "2*pi/x" "2*pi/y")
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (hide -1)
                          (("1" (assert)
                            (("1" (move-terms -1 l 1)
                              (("1"
                                (move-terms -1 r 1)
                                (("1"
                                  (both-sides "+" "1" -1)
                                  (("1"
                                    (case
                                     "(1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / y)) >
                                        (1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / x))")
                                    (("1"
                                      (lemma "sqrt_lt")
                                      (("1"
                                        (inst
                                         -1
                                         "(1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / x))"
                                         "(1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / y))")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "strict_decreasing?")
                                                (("1"
                                                  (inst
                                                   -5
                                                   "sqrt((1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / x)))"
                                                   "sqrt((1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / y)))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "expr_bounds")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "expr_bounds")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "expr_bounds")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "expr_bounds")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "denom_nz")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (cross-mult 1)
                                          (("2"
                                            (case
                                             "(1 - cos(pi / (2 * NZ))) >= (1 - cos(pi / (2 * NZ)))")
                                            (("1"
                                              (mult-ineq -1 -3)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (lemma "expr_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (cross-mult -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (ground)
                                                (("3"
                                                  (expand "abs")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (cancel-by 1 "pi")
                        (("2" (cross-mult 2) nil nil)) nil)
                       ("3" (cross-mult 1) nil nil)
                       ("4" (cancel-by 1 "pi")
                        (("4" (cross-mult 2) nil nil)) nil)
                       ("5" (cross-mult 1) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (cancel-by 1 "2*pi")
                  (("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil (nl_acos const-decl "real" cpr_nl_funs nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cos_decreasing formula-decl nil trig_ineq trig)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_plus_gt1 formula-decl nil real_props nil)
    (denom_nz formula-decl nil nl nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sqrt_lt formula-decl nil sqrt reals)
    (expr_bounds formula-decl nil nl nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (acos_strict_decreasing formula-decl nil acos trig)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (trans_lat_2_TCC1 0
  (trans_lat_2_TCC1-1 nil 3665941248 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (trans_lat_2 subtype "2"
    "integers.subrange(2, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (trans_lat_2 0
  (trans_lat_2-2 nil 3667731003
   ("" (expand "trans_lat")
    (("" (assert)
      (("" (case-replace "2*pi/2 =pi")
        (("1" (hide -1)
          (("1" (rewrite "cos_pi")
            (("1" (simplify 1)
              (("1" (expand "NZ")
                (("1" (lemma "sin_times_sin")
                  (("1" (inst -1 "pi/60" "pi/60")
                    (("1" (simplify -1)
                      (("1" (rewrite "cos_0")
                        (("1" (case "2*(pi/60) = pi/30")
                          (("1" (replaces -1)
                            (("1" (replaces -1 :dir rl)
                              (("1"
                                (lemma "sqrt_sq")
                                (("1"
                                  (inst -1 "sin(pi/60)")
                                  (("1"
                                    (expand "sq")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "acos")
                                          (("1"
                                            (lemma "asin_sin")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "sin_increasing")
                                        (("2"
                                          (inst -1 "pi/60" "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "sin_0")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (sin_times_sin formula-decl nil trig_extra trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin const-decl "real" sincos_def trig)
    (acos const-decl "nnreal_le_pi" acos trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types trig)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (asin_sin formula-decl nil trig_inverses trig)
    (sin_0 formula-decl nil sincos_def trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_increasing formula-decl nil trig_ineq trig)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (TRUE const-decl "bool" booleans nil)
    (cos_0 formula-decl nil sincos_def trig)
    (NZ const-decl "int" basic_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_pi formula-decl nil sincos trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil))
   nil)
  (trans_lat_2-1 nil 3665941309
   ("" (expand "trans_lat")
    (("" (case-replace "2*pi/2 =pi")
      (("1" (hide -1)
        (("1" (rewrite "cos_pi")
          (("1" (simplify 1)
            (("1" (expand "NZ")
              (("1" (lemma "sin_times_sin")
                (("1" (inst -1 "pi/60" "pi/60")
                  (("1" (simplify -1)
                    (("1" (rewrite "cos_0")
                      (("1" (case "2*(pi/60) = pi/30")
                        (("1" (replaces -1)
                          (("1" (replaces -1 :dir rl)
                            (("1" (lemma "sqrt_sq")
                              (("1"
                                (inst -1 "sin(pi/60)")
                                (("1"
                                  (expand "sq")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "acos")
                                        (("1"
                                          (lemma "asin_sin")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (replaces -1)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "sin_increasing")
                                      (("2"
                                        (inst -1 "pi/60" "0")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "sin_0")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((sqrt_sq formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals))
   shostak))
 (trans_lat_inverse 0
  (trans_lat_inverse-2 nil 3667731050
   ("" (skeep :preds? t)
    (("" (expand "NZ")
      (("" (expand "NL")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "trans_lat")
                (("1" (assert)
                  (("1" (cancel-by -1 "180/pi")
                    (("1" (lemma "acos_1")
                      (("1" (replaces -1 -2 :dir rl)
                        (("1" (lemma "acos_bij")
                          (("1" (expand "bijective?")
                            (("1" (expand "injective?")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (inst
                                     -1
                                     "sqrt((1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / nl)))"
                                     "1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "arg_bounds")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "expr_bounds")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (case "trans_lat(2) = 87")
                (("1" (split 2)
                  (("1" (ground)
                    (("1" (lemma "trans_lat_dec")
                      (("1" (expand "strict_decreasing?")
                        (("1" (split-ineq -4)
                          (("1" (inst -1 "2" "nl")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 3)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (lemma "trans_lat_dec")
                            (("1" (expand "strict_decreasing?")
                              (("1"
                                (inst -1 "2" "nl")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (case "2<nl")
                          (("1" (hide -3)
                            (("1" (hide (1 2 4 5 6))
                              (("1"
                                (expand "abs")
                                (("1"
                                  (typepred "trans_lat(nl)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "trans_lat" +)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (simplify 1)
                                          (("1"
                                            (case
                                             "forall (r:real): (pi/180)*((180/pi) * r) = r")
                                            (("1"
                                              (inst
                                               -1
                                               "acos(sqrt
                                                                ((1 - cos(pi / (2 * NZ)))
                                                                 /
                                                                 (1 - cos(2 * pi / nl))))")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (lemma "cos_acos")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "sqrt((1 - cos(pi / (2 * NZ)))
                                                                      /
                                                                      (1 - cos(2 * pi / nl)))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lemma
                                                         "sq_sqrt")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (lemma
                                                             "expr_bounds")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "sq")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "expt")
                                                                            (("1"
                                                                              (replaces
                                                                               -3)
                                                                              (("1"
                                                                                (case
                                                                                 "(1 - cos(pi / (2 * NZ))) /
                                                                     ((1 - cos(pi / (2 * NZ))) /
                                                                       (1 - cos(2 * pi / nl)))  = (1 - cos(2 * pi / nl))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (simplify
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "acos_cos")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "expt")
                                                                                                (("1"
                                                                                                  (simplify
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "2 * (1 / (2 * pi / nl) * pi) = nl")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "floor(nl)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (cross-mult)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (cancel-by
                                                                                               1
                                                                                               "pi")
                                                                                              (("2"
                                                                                                (cross-mult
                                                                                                 2)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "expr_bounds")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "expr_bounds")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "trans_lat_2") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NZ const-decl "int" basic_defs nil)
    (trans_lat_2 formula-decl nil nl nil)
    (trans_lat_dec formula-decl nil nl nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals)
    (cos_acos formula-decl nil trig_inverses trig)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (acos_cos formula-decl nil trig_inverses trig)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (acos_1 formula-decl nil acos trig)
    (acos_bij formula-decl nil acos trig)
    (injective? const-decl "bool" functions nil)
    (expr_bounds formula-decl nil nl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (arg_bounds formula-decl nil nl nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (acos const-decl "nnreal_le_pi" acos trig) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (subrange type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil)
  (trans_lat_inverse-1 nil 3665918922
   ("" (skeep :preds? t)
    (("" (expand "NZ")
      (("" (expand "NL")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "trans_lat")
                (("1" (cancel-by -1 "180/pi")
                  (("1" (lemma "acos_1")
                    (("1" (replaces -1 -2 :dir rl)
                      (("1" (lemma "acos_bij")
                        (("1" (expand "bijective?")
                          (("1" (expand "injective?")
                            (("1" (flatten)
                              (("1"
                                (hide -2)
                                (("1"
                                  (inst
                                   -1
                                   "sqrt((1 - cos(pi / (2 * NZ))) / (1 - cos(2 * pi / nl)))"
                                   "1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "arg_bounds")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "expr_bounds")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (case "trans_lat(2) = 87")
                (("1" (split 2)
                  (("1" (ground)
                    (("1" (lemma "trans_lat_dec")
                      (("1" (expand "strict_decreasing?")
                        (("1" (split-ineq -4)
                          (("1" (inst -1 "2" "nl")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 3)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (lemma "trans_lat_dec")
                            (("1" (expand "strict_decreasing?")
                              (("1"
                                (inst -1 "2" "nl")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (case "2<nl")
                          (("1" (hide -3)
                            (("1" (hide (1 2 4 5 6))
                              (("1"
                                (expand "abs")
                                (("1"
                                  (typepred "trans_lat(nl)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "trans_lat" +)
                                      (("1"
                                        (simplify 1)
                                        (("1"
                                          (case
                                           "forall (r:real): (pi/180)*((180/pi) * r) = r")
                                          (("1"
                                            (inst
                                             -1
                                             "acos(sqrt
                                    ((1 - cos(pi / (2 * NZ)))
                                     /
                                     (1 - cos(2 * pi / nl))))")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (lemma "cos_acos")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sqrt((1 - cos(pi / (2 * NZ)))
                                      /
                                      (1 - cos(2 * pi / nl)))")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (lemma "sq_sqrt")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (lemma
                                                           "expr_bounds")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "sq")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (replaces
                                                                             -3)
                                                                            (("1"
                                                                              (case
                                                                               "(1 - cos(pi / (2 * NZ))) /
                       ((1 - cos(pi / (2 * NZ))) /
                         (1 - cos(2 * pi / nl)))  = (1 - cos(2 * pi / nl))")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (simplify
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "acos_cos")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("1"
                                                                                                (simplify
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "2 * (1 / (2 * pi / nl) * pi) = nl")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "floor(nl)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (cross-mult)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cancel-by
                                                                                             1
                                                                                             "pi")
                                                                                            (("2"
                                                                                              (cross-mult
                                                                                               2)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "expr_bounds")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "expr_bounds")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (skeep)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "trans_lat_2") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_decreasing? const-decl "bool" real_fun_preds reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals))
   shostak))
 (transitions_TCC1 0
  (transitions_TCC1-1 nil 3666520980 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NZ const-decl "int" basic_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil
   (transitions subtype "nl.num_lat"
    "integers.subrange(2, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (transitions_NL_inverse 0
  (transitions_NL_inverse-1 nil 3668196742
   ("" (skeep)
    (("" (expand "transitions")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "NL") (("1" (assert) nil nil)) nil)) nil)
           ("2" (flatten) (("2" (rewrite "trans_lat_inverse") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitions const-decl "{lat: real | lat > 0}" nl nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (trans_lat_inverse formula-decl nil nl nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Lat_table_transition_TCC1 0
  (Lat_table_transition_TCC1-1 nil 3666542371
   ("" (subtype-tcc) nil nil) ((NZ const-decl "int" basic_defs nil))
   nil
   (Lat_table_transition subtype "59"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (Lat_table_transition_TCC2 0
  (Lat_table_transition_TCC2-1 nil 3666542371
   ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (Lat_table_transition subtype "(number_fields.+)(nl.num_lat, 1)"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (Lat_table_transition_TCC3 0
  (Lat_table_transition_TCC3-1 nil 3666542371
   ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (Lat_table_transition subtype "nl.num_lat"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (Lat_table_transition 0
  (Lat_table_transition-2 nil 3667731269
   ("" (skeep)
    (("" (case "NL(lat) = NL(abs(lat))")
      (("1" (ground)
        (("1" (expand "transitions")
          (("1" (lemma "NL_decreasing")
            (("1" (inst -1 "abs(lat)" "trans_lat(59)")
              (("1" (assert)
                (("1" (rewrite "trans_lat_inverse")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (lemma "NL_decreasing")
          (("2" (inst -1 "abs(lat)" "transitions(num_lat)")
            (("2" (assert)
              (("2" (expand "transitions" -2)
                (("2" (case "NL(trans_lat(1+num_lat))>NL(lat)")
                  (("1" (rewrite "trans_lat_inverse")
                    (("1" (assert)
                      (("1" (use "transitions_NL_inverse")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (typepred "num_lat")
                    (("2" (case "num_lat = 1")
                      (("1" (replace -1 1)
                        (("1" (simplify 1)
                          (("1" (replace -1 -5)
                            (("1" (simplify -5)
                              (("1"
                                (rewrite "trans_lat_2")
                                (("1"
                                  (expand "NL" 2)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lift-if 2)
                                      (("1"
                                        (split 2)
                                        (("1"
                                          (expand "abs")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (expand "abs")
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (lift-if -5)
                                                  (("2"
                                                    (split -5)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "transitions")
                        (("2" (assert)
                          (("2" (case "trans_lat(num_lat)<=87")
                            (("1" (case "trans_lat(1 + num_lat)<=87")
                              (("1"
                                (case
                                 "NL(trans_lat(1 + num_lat)) = 2*pi * (acos(1-((1-cos(pi/(2*NZ))) / (cos((pi/180)*trans_lat(1 + num_lat)) ^2 ))))^-1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (lemma "NL_dec_prep")
                                    (("1"
                                      (inst
                                       -1
                                       "trans_lat(1 + num_lat)"
                                       "abs(lat)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "NL" 2)
                                          (("1"
                                            (lift-if 2)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -9))
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "abs(lat) = 87")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -11)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "trans_lat_inverse")
                                                                (("1"
                                                                  (lemma
                                                                   "NL_decreasing")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "87"
                                                                     "trans_lat(num_lat)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "floor(2 *
                                                          (acos(1 -
                                                                 (1 - cos(pi / (2 * NZ))) /
                                                                  cos(pi / 180 * abs(lat)) ^ 2)
                                                            ^ -1
                                                            * pi))")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name-replace "nnl" "1+num_lat")
                                  (("2"
                                    (rewrite "trans_lat_inverse")
                                    (("2"
                                      (hide
                                       (-2 -3 -4 -5 -6 -7 -8 2 3 4))
                                      (("2"
                                        (typepred "trans_lat(nnl)")
                                        (("2"
                                          (hide (-1 -2))
                                          (("2"
                                            (expand "trans_lat" +)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (simplify 1)
                                                (("2"
                                                  (case
                                                   "forall (r:real): (pi/180)*((180/pi) * r) = r")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "acos(sqrt
                                                                                      ((1 - cos(pi / (2 * NZ)))
                                                                                       /
                                                                                       (1 - cos(2 * pi / nnl))))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lemma
                                                         "cos_acos")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "sqrt((1 - cos(pi / (2 * NZ)))
                                                                                              /
                                                                                              (1 - cos(2 * pi / nnl)))")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               "sq_sqrt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (lemma
                                                                   "expr_bounds")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "sq")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -3)
                                                                                    (("1"
                                                                                      (case
                                                                                       "(1 - cos(pi / (2 * NZ))) /
                                                                                                    ((1 - cos(pi / (2 * NZ))) /
                                                                                                      (1 - cos(2 * pi / nnl)))  = (1 - cos(2 * pi / nnl))")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (simplify
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "acos_cos")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "expt")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "expt")
                                                                                                      (("1"
                                                                                                        (simplify
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (cancel-by
                                                                                                 1
                                                                                                 "pi")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (cross-mult
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nnl")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "expr_bounds")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               (nnl))
                                                                              (("1"
                                                                                (expand
                                                                                 "nnl")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "NZ")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "nnl")
                                                                          (("2"
                                                                            (expand
                                                                             "NZ")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "expr_bounds")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "nnl")
                                                                (("2"
                                                                  (expand
                                                                   "NZ")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "expr_bounds")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nnl")
                                                          (("2"
                                                            (expand
                                                             "NZ")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "NL_acos_nz")
                                  (("3" (inst?) nil nil))
                                  nil)
                                 ("4"
                                  (lemma "NL_arg_bounds")
                                  (("4"
                                    (inst?)
                                    (("4"
                                      (flatten)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (lemma "NL_dec_prep_denom")
                                  (("5"
                                    (inst?)
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (expand "NZ")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "trans_lat_dec")
                                (("2"
                                  (expand "strict_decreasing?")
                                  (("2"
                                    (inst -1 "2" "1+num_lat")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "NZ")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "trans_lat_dec")
                              (("2"
                                (expand "strict_decreasing?")
                                (("2"
                                  (case "num_lat =2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (rewrite "trans_lat_2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -1 "2" "num_lat")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "trans_lat_2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "NZ")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "NL")
          (("2" (assert)
            (("2" (expand "abs" 1 7)
              (("2" (expand "abs" 1 3)
                (("2" (expand "abs" 1 3)
                  (("2" (expand "abs" 1 2)
                    (("2" (assert)
                      (("2" (lift-if 1)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (ground)
                                    (("2"
                                      (lift-if 3)
                                      (("2"
                                        (split 3)
                                        (("1" (ground) nil nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (transitions_NL_inverse formula-decl nil nl nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat_2 formula-decl nil nl nil)
    (NL_dec_prep_denom formula-decl nil nl nil)
    (NL_arg_bounds formula-decl nil nl nil)
    (NL_acos_nz formula-decl nil nl nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (expr_bounds formula-decl nil nl nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (acos_cos formula-decl nil trig_inverses trig)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (sq const-decl "nonneg_real" sq reals)
    (cos_acos formula-decl nil trig_inverses trig)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) nil
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NL_dec_prep formula-decl nil nl nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (< const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals)
    (trans_lat_dec formula-decl nil nl nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (> const-decl "bool" reals nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (trans_lat_inverse formula-decl nil nl nil)
    (NL_decreasing formula-decl nil nl nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (Lat_table_transition-1 nil 3666542446
   ("" (skeep)
    (("" (case "NL(lat) = NL(abs(lat))")
      (("1" (ground)
        (("1" (expand "transitions")
          (("1" (lemma "NL_decreasing")
            (("1" (inst -1 "abs(lat)" "trans_lat(59)")
              (("1" (assert)
                (("1" (rewrite "trans_lat_inverse")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (lemma "NL_decreasing")
          (("2" (inst -1 "abs(lat)" "transitions(num_lat)")
            (("2" (assert)
              (("2" (rewrite "transitions_NL_inverse")
                (("2" (expand "transitions" -2)
                  (("2" (case "NL(trans_lat(1+num_lat))>NL(lat)")
                    (("1" (rewrite "trans_lat_inverse")
                      (("1" (assert) nil nil)) nil)
                     ("2" (typepred "num_lat")
                      (("2" (case "num_lat = 1")
                        (("1" (replace -1 1)
                          (("1" (simplify 1)
                            (("1" (replace -1 -5)
                              (("1"
                                (simplify -5)
                                (("1"
                                  (rewrite "trans_lat_2")
                                  (("1"
                                    (expand "NL" 2)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (split 2)
                                          (("1"
                                            (expand "abs")
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (lift-if -5)
                                                    (("2"
                                                      (split -5)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "transitions")
                          (("2" (assert)
                            (("2" (case "trans_lat(num_lat)<=87")
                              (("1"
                                (case "trans_lat(1 + num_lat)<=87")
                                (("1"
                                  (case
                                   "NL(trans_lat(1 + num_lat)) = 2*pi * (acos(1-((1-cos(pi/(2*NZ))) / (cos((pi/180)*trans_lat(1 + num_lat)) ^2 ))))^-1")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "NL_dec_prep")
                                      (("1"
                                        (inst
                                         -1
                                         "trans_lat(1 + num_lat)"
                                         "abs(lat)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "NL" 2)
                                            (("1"
                                              (lift-if 2)
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -9))
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "abs(lat) = 87")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -11)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "trans_lat_inverse")
                                                                  (("1"
                                                                    (lemma
                                                                     "NL_decreasing")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "87"
                                                                       "trans_lat(num_lat)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "floor(2 *
              (acos(1 -
                     (1 - cos(pi / (2 * NZ))) /
                      cos(pi / 180 * abs(lat)) ^ 2)
                ^ -1
                * pi))")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name-replace "nnl" "1+num_lat")
                                    (("2"
                                      (rewrite "trans_lat_inverse")
                                      (("2"
                                        (hide
                                         (-2 -3 -4 -5 -6 -7 -8 2 3 4))
                                        (("2"
                                          (typepred "trans_lat(nnl)")
                                          (("2"
                                            (hide (-1 -2))
                                            (("2"
                                              (expand "trans_lat" +)
                                              (("2"
                                                (simplify 1)
                                                (("2"
                                                  (case
                                                   "forall (r:real): (pi/180)*((180/pi) * r) = r")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "acos(sqrt
                                                  ((1 - cos(pi / (2 * NZ)))
                                                   /
                                                   (1 - cos(2 * pi / nnl))))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lemma
                                                         "cos_acos")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "sqrt((1 - cos(pi / (2 * NZ)))
                                                      /
                                                      (1 - cos(2 * pi / nnl)))")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               "sq_sqrt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (lemma
                                                                   "expr_bounds")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "sq")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -3)
                                                                                    (("1"
                                                                                      (case
                                                                                       "(1 - cos(pi / (2 * NZ))) /
                                              ((1 - cos(pi / (2 * NZ))) /
                                                (1 - cos(2 * pi / nnl)))  = (1 - cos(2 * pi / nnl))")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (simplify
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "acos_cos")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "expt")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "expt")
                                                                                                      (("1"
                                                                                                        (simplify
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (cancel-by
                                                                                                 1
                                                                                                 "pi")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (cross-mult
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nnl")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "expr_bounds")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "expr_bounds")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "NL_acos_nz")
                                    (("3" (inst?) nil nil))
                                    nil)
                                   ("4"
                                    (lemma "NL_arg_bounds")
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (flatten)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (lemma "NL_dec_prep_denom")
                                    (("5"
                                      (inst?)
                                      (("5" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (expand "NZ")
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "trans_lat_dec")
                                  (("2"
                                    (expand "strict_decreasing?")
                                    (("2"
                                      (inst -1 "2" "1+num_lat")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "NZ")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "trans_lat_dec")
                                (("2"
                                  (expand "strict_decreasing?")
                                  (("2"
                                    (case "num_lat =2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "trans_lat_2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "2" "num_lat")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "trans_lat_2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "NZ")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "NL")
          (("2" (assert)
            (("2" (expand "abs" 1 7)
              (("2" (expand "abs" 1 3)
                (("2" (expand "abs" 1 3)
                  (("2" (expand "abs" 1 2)
                    (("2" (assert)
                      (("2" (lift-if 1)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (ground)
                                    (("2"
                                      (lift-if 3)
                                      (("2"
                                        (split 3)
                                        (("1" (ground) nil nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (expand "abs")
          (("3" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (strict_decreasing? const-decl "bool" real_fun_preds reals))
   shostak))
 (NL_table_TCC1 0
  (NL_table_TCC1-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (NL_table subtype "2"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC2 0
  (NL_table_TCC2-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "3"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC3 0
  (NL_table_TCC3-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "4"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC4 0
  (NL_table_TCC4-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "5"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC5 0
  (NL_table_TCC5-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "6"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC6 0
  (NL_table_TCC6-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "7"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC7 0
  (NL_table_TCC7-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "8"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC8 0
  (NL_table_TCC8-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "9"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC9 0
  (NL_table_TCC9-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "10"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC10 0
  (NL_table_TCC10-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "11"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC11 0
  (NL_table_TCC11-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "12"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC12 0
  (NL_table_TCC12-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "13"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC13 0
  (NL_table_TCC13-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "14"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC14 0
  (NL_table_TCC14-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "15"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC15 0
  (NL_table_TCC15-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "16"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC16 0
  (NL_table_TCC16-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "17"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC17 0
  (NL_table_TCC17-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "18"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC18 0
  (NL_table_TCC18-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "19"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC19 0
  (NL_table_TCC19-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "20"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC20 0
  (NL_table_TCC20-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "21"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC21 0
  (NL_table_TCC21-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "22"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC22 0
  (NL_table_TCC22-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "23"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC23 0
  (NL_table_TCC23-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "24"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC24 0
  (NL_table_TCC24-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "25"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC25 0
  (NL_table_TCC25-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "26"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC26 0
  (NL_table_TCC26-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "27"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC27 0
  (NL_table_TCC27-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "28"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC28 0
  (NL_table_TCC28-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "29"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC29 0
  (NL_table_TCC29-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "30"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC30 0
  (NL_table_TCC30-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "31"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC31 0
  (NL_table_TCC31-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "32"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC32 0
  (NL_table_TCC32-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "33"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC33 0
  (NL_table_TCC33-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "34"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC34 0
  (NL_table_TCC34-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "35"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC35 0
  (NL_table_TCC35-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "36"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC36 0
  (NL_table_TCC36-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "37"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC37 0
  (NL_table_TCC37-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "38"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC38 0
  (NL_table_TCC38-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "39"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC39 0
  (NL_table_TCC39-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "40"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC40 0
  (NL_table_TCC40-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "41"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC41 0
  (NL_table_TCC41-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "42"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC42 0
  (NL_table_TCC42-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "43"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC43 0
  (NL_table_TCC43-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "44"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC44 0
  (NL_table_TCC44-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "45"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC45 0
  (NL_table_TCC45-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "46"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC46 0
  (NL_table_TCC46-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "47"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC47 0
  (NL_table_TCC47-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "48"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC48 0
  (NL_table_TCC48-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "49"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC49 0
  (NL_table_TCC49-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "50"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC50 0
  (NL_table_TCC50-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "51"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC51 0
  (NL_table_TCC51-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "52"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC52 0
  (NL_table_TCC52-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "53"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC53 0
  (NL_table_TCC53-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "54"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC54 0
  (NL_table_TCC54-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "55"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC55 0
  (NL_table_TCC55-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "56"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC56 0
  (NL_table_TCC56-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "57"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC57 0
  (NL_table_TCC57-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "58"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (NL_table_TCC58 0
  (NL_table_TCC58-1 nil 3667756821 ("" (subtype-tcc) nil nil)
   ((nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (NZ const-decl "int" basic_defs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_sqrt const-decl "nonneg_real" cpr_nl_funs nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat const-decl "{lat: real | lat > 0}" nl nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (NL_table subtype "59"
    "integers.subrange(1, (number_fields.-)(number_fields.*(4, basic_defs.NZ), 1))")))
 (nl_table_equiv_nl 0
  (nl_table_equiv_nl-2 nil 3794750691
   ("" (skeep)
    (("" (expand "NL_table")
      (("" (lift-if 1)
        (("" (lemma "Lat_table_transition")
          (("" (case "abs(lat) <= transitions(1)")
            (("1" (ground)
              (("1" (inst?) (("1" (assert) nil nil)) nil)
               ("2" (inst?) (("2" (assert) nil nil)) nil)
               ("3" (inst?) (("3" (assert) nil nil)) nil)
               ("4" (inst?) (("4" (assert) nil nil)) nil)
               ("5" (inst?) (("5" (assert) nil nil)) nil)
               ("6" (inst?) (("6" (assert) nil nil)) nil)
               ("7" (inst?) (("7" (assert) nil nil)) nil)
               ("8" (inst?) (("8" (assert) nil nil)) nil)
               ("9" (inst?) (("9" (assert) nil nil)) nil)
               ("10" (inst?) (("10" (assert) nil nil)) nil)
               ("11" (inst?) (("11" (assert) nil nil)) nil)
               ("12" (inst?) (("12" (assert) nil nil)) nil)
               ("13" (inst?) (("13" (assert) nil nil)) nil)
               ("14" (inst?) (("14" (assert) nil nil)) nil)
               ("15" (inst?) (("15" (assert) nil nil)) nil)
               ("16" (inst?) (("16" (assert) nil nil)) nil)
               ("17" (inst?) (("17" (assert) nil nil)) nil)
               ("18" (inst?) (("18" (assert) nil nil)) nil)
               ("19" (inst?) (("19" (assert) nil nil)) nil)
               ("20" (inst?) (("20" (assert) nil nil)) nil)
               ("21" (inst?) (("21" (assert) nil nil)) nil)
               ("22" (inst?) (("22" (assert) nil nil)) nil)
               ("23" (inst?) (("23" (assert) nil nil)) nil)
               ("24" (inst?) (("24" (assert) nil nil)) nil)
               ("25" (inst?) (("25" (assert) nil nil)) nil)
               ("26" (inst?) (("26" (assert) nil nil)) nil)
               ("27" (inst?) (("27" (assert) nil nil)) nil)
               ("28" (inst?) (("28" (assert) nil nil)) nil)
               ("29" (inst?) (("29" (assert) nil nil)) nil)
               ("30" (inst?) (("30" (assert) nil nil)) nil)
               ("31" (inst?) (("31" (assert) nil nil)) nil)
               ("32" (inst?) (("32" (assert) nil nil)) nil)
               ("33" (inst?) (("33" (assert) nil nil)) nil)
               ("34" (inst?) (("34" (assert) nil nil)) nil)
               ("35" (inst?) (("35" (assert) nil nil)) nil)
               ("36" (inst?) (("36" (assert) nil nil)) nil)
               ("37" (inst?) (("37" (assert) nil nil)) nil)
               ("38" (inst?) (("38" (assert) nil nil)) nil)
               ("39" (inst?) (("39" (assert) nil nil)) nil)
               ("40" (inst?) (("40" (assert) nil nil)) nil)
               ("41" (inst?) (("41" (assert) nil nil)) nil)
               ("42" (inst?) (("42" (assert) nil nil)) nil)
               ("43" (inst?) (("43" (assert) nil nil)) nil)
               ("44" (inst?) (("44" (assert) nil nil)) nil)
               ("45" (inst?) (("45" (assert) nil nil)) nil)
               ("46" (inst?) (("46" (assert) nil nil)) nil)
               ("47" (inst?) (("47" (assert) nil nil)) nil)
               ("48" (inst?) (("48" (assert) nil nil)) nil)
               ("49" (inst?) (("49" (assert) nil nil)) nil)
               ("50" (inst?) (("50" (assert) nil nil)) nil)
               ("51" (inst?) (("51" (assert) nil nil)) nil)
               ("52" (inst?) (("52" (assert) nil nil)) nil)
               ("53" (inst?) (("53" (assert) nil nil)) nil)
               ("54" (inst?) (("54" (assert) nil nil)) nil)
               ("55" (inst?) (("55" (assert) nil nil)) nil)
               ("56" (inst?) (("56" (assert) nil nil)) nil)
               ("57" (inst?) (("57" (assert) nil nil)) nil)
               ("58" (inst?) (("58" (assert) nil nil)) nil)
               ("59" (inst?) (("59" (assert) nil nil)) nil))
              nil)
             ("2" (label "bigif" 2)
              (("2" (hide 2)
                (("2" (flip-ineq 1)
                  (("2" (case "transitions(1)>transitions(2)")
                    (("1" (case "abs(lat)>transitions(2)")
                      (("1" (reveal "bigif")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "NL")
                              (("1"
                                (lemma "trans_lat_2")
                                (("1"
                                  (hide -5)
                                  (("1"
                                    (expand "transitions")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (lift-if -1)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (expand "transitions")
                      (("2" (lemma "trans_lat_2")
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (expand "NZ") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (expand "NZ") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitions const-decl "{lat: real | lat > 0}" nl nil)
    (> const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (NZ const-decl "int" basic_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trans_lat_2 formula-decl nil nl nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (Lat_table_transition formula-decl nil nl nil)
    (NL_table const-decl "subrange(1, 59)" nl nil))
   nil)
  (nl_table_equiv_nl-1 nil 3667821042
   ("" (skeep)
    (("" (expand "NL_table")
      (("" (lift-if 1)
        (("" (lemma "Lat_table_transition")
          (("" (case "abs(lat) <= transitions(1)")
            (("1" (ground 1)
              (("1" (inst?) (("1" (assert) nil nil)) nil)
               ("2" (inst?) (("2" (assert) nil nil)) nil)
               ("3" (inst?) (("3" (assert) nil nil)) nil)
               ("4" (inst?) (("4" (assert) nil nil)) nil)
               ("5" (inst?) (("5" (assert) nil nil)) nil)
               ("6" (inst?) (("6" (assert) nil nil)) nil)
               ("7" (inst?) (("7" (assert) nil nil)) nil)
               ("8" (inst?) (("8" (assert) nil nil)) nil)
               ("9" (inst?) (("9" (assert) nil nil)) nil)
               ("10" (inst?) (("10" (assert) nil nil)) nil)
               ("11" (inst?) (("11" (assert) nil nil)) nil)
               ("12" (inst?) (("12" (assert) nil nil)) nil)
               ("13" (inst?) (("13" (assert) nil nil)) nil)
               ("14" (inst?) (("14" (assert) nil nil)) nil)
               ("15" (inst?) (("15" (assert) nil nil)) nil)
               ("16" (inst?) (("16" (assert) nil nil)) nil)
               ("17" (inst?) (("17" (assert) nil nil)) nil)
               ("18" (inst?) (("18" (assert) nil nil)) nil)
               ("19" (inst?) (("19" (assert) nil nil)) nil)
               ("20" (inst?) (("20" (assert) nil nil)) nil)
               ("21" (inst?) (("21" (assert) nil nil)) nil)
               ("22" (inst?) (("22" (assert) nil nil)) nil)
               ("23" (inst?) (("23" (assert) nil nil)) nil)
               ("24" (inst?) (("24" (assert) nil nil)) nil)
               ("25" (inst?) (("25" (assert) nil nil)) nil)
               ("26" (inst?) (("26" (assert) nil nil)) nil)
               ("27" (inst?) (("27" (assert) nil nil)) nil)
               ("28" (inst?) (("28" (assert) nil nil)) nil)
               ("29" (inst?) (("29" (assert) nil nil)) nil)
               ("30" (inst?) (("30" (assert) nil nil)) nil)
               ("31" (inst?) (("31" (assert) nil nil)) nil)
               ("32" (inst?) (("32" (assert) nil nil)) nil)
               ("33" (inst?) (("33" (assert) nil nil)) nil)
               ("34" (inst?) (("34" (assert) nil nil)) nil)
               ("35" (inst?) (("35" (assert) nil nil)) nil)
               ("36" (inst?) (("36" (assert) nil nil)) nil)
               ("37" (inst?) (("37" (assert) nil nil)) nil)
               ("38" (inst?) (("38" (assert) nil nil)) nil)
               ("39" (inst?) (("39" (assert) nil nil)) nil)
               ("40" (inst?) (("40" (assert) nil nil)) nil)
               ("41" (inst?) (("41" (assert) nil nil)) nil)
               ("42" (inst?) (("42" (assert) nil nil)) nil)
               ("43" (inst?) (("43" (assert) nil nil)) nil)
               ("44" (inst?) (("44" (assert) nil nil)) nil)
               ("45" (inst?) (("45" (assert) nil nil)) nil)
               ("46" (inst?) (("46" (assert) nil nil)) nil)
               ("47" (inst?) (("47" (assert) nil nil)) nil)
               ("48" (inst?) (("48" (assert) nil nil)) nil)
               ("49" (inst?) (("49" (assert) nil nil)) nil)
               ("50" (inst?) (("50" (assert) nil nil)) nil)
               ("51" (inst?) (("51" (assert) nil nil)) nil)
               ("52" (inst?) (("52" (assert) nil nil)) nil)
               ("53" (inst?) (("53" (assert) nil nil)) nil)
               ("54" (inst?) (("54" (assert) nil nil)) nil)
               ("55" (inst?) (("55" (assert) nil nil)) nil)
               ("56" (inst?) (("56" (assert) nil nil)) nil)
               ("57" (inst?) (("57" (assert) nil nil)) nil)
               ("58" (inst?) (("58" (assert) nil nil)) nil)
               ("59" (inst?) (("59" (assert) nil nil)) nil))
              nil)
             ("2" (label "bigif" 2)
              (("2" (hide 2)
                (("2" (flip-ineq 1)
                  (("2" (case "transitions(1)>transitions(2)")
                    (("1" (case "abs(lat)>transitions(2)")
                      (("1" (reveal "bigif")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "NL")
                              (("1"
                                (lemma "trans_lat_2")
                                (("1"
                                  (hide -5)
                                  (("1"
                                    (expand "transitions")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (lift-if -1)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (expand "transitions")
                      (("2" (lemma "trans_lat_2")
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (expand "NZ") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (expand "NZ") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NL_table const-decl "subrange(1, 59)" nl nil)
    (Lat_table_transition formula-decl nil nl nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nl_pi const-decl "real" cpr_nl_funs nil)
    (nl_mul const-decl "real" cpr_nl_funs nil)
    (nl_div const-decl "real" cpr_nl_funs nil)
    (nl_cos const-decl "real" cpr_nl_funs nil)
    (nl_sub const-decl "real" cpr_nl_funs nil)
    (nl_exp const-decl "real" cpr_nl_funs nil)
    (nl_acos const-decl "real" cpr_nl_funs nil)
    (trans_lat_2 formula-decl nil nl nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NZ const-decl "int" basic_defs nil)
    (subrange type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (transitions const-decl "{lat: real | lat > 0}" nl nil))
   shostak)))

