(alt_encoding
 (alt_is_YZ 0
  (alt_is_YZ-1 nil 3678638365
   ("" (skeep)
    (("" (expand "YZ")
      (("" (assert)
        (("" (case "mod(lat, dlat(i))/dlat(i) <1-1/2^18")
          (("1" (case "2^17<=2^17")
            (("1" (lemma "mod_frac")
              (("1" (inst?)
                (("1" (replace -1)
                  (("1" (mult-ineq -2 -3)
                    (("1"
                      (case "not (2 ^ 17) * (1 - 1 / 2 ^ 18) + 1 / 2 = 2^17")
                      (("1" (eval-formula 1) nil nil)
                       ("2" (typepred "fractional(lat / dlat(i))")
                        (("2" (hide -2)
                          (("2" (mult-ineq -5 -1)
                            (("2" (simplify -1)
                              (("2"
                                (both-sides "+" "1/2" -4)
                                (("1"
                                  (replaces -3)
                                  (("1"
                                    (case
                                     "not mod(floor(1/2 + 2 ^ 17 * fractional(lat / dlat(i))), 2 ^ 17) = floor(1/2 + 2 ^ 17 * fractional(lat / dlat(i)))")
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (name
                                         "FL"
                                         "floor(1 / 2 + 2 ^ 17 * fractional(lat / dlat(i)))")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (expand "mod" 1)
                                            (("1"
                                              (case "FL<2^17")
                                              (("1"
                                                (lemma "floor_0")
                                                (("1"
                                                  (inst -1 "FL/2^17")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "FL")
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (cross-mult
                                                               1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (replaces -4 :dir rl)
                                        (("2"
                                          (expand "YZ_alt")
                                          (("2"
                                            (expand "mod" 1 2)
                                            (("2"
                                              (case
                                               "not 2 ^ 17 * (dlat(i) / 2 ^ 18) = dlat(i)/2")
                                              (("1"
                                                (cancel-by 1 "dlat(i)")
                                                (("1"
                                                  (eval-formula 2)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (simplify 1)
                                                  (("2"
                                                    (case
                                                     "not (dlat(i) / 2 + 2 ^ 17 * lat -
                                  floor((dlat(i) / 2 ^ 18 + lat) / dlat(i)) * dlat(i) *
                                   2 ^ 17)
                                 / dlat(i) = 1/2 +2^17*(lat/dlat(i) - floor((dlat(i) / 2 ^ 18 + lat) / dlat(i)))")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (rewrite
                                                         "mod_frac"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "fractional")
                                                          (("2"
                                                            (lemma
                                                             "floor_plus")
                                                            (("2"
                                                              (case
                                                               "not (dlat(i) / 2 ^ 18 + lat) / dlat(i) = 1/2^18+lat/dlat(i)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replaces
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "1/2^18"
                                                                   "lat/dlat(i)")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (case
                                                                       "not FORALL (x:real): 0<=x AND x<1 IMPLIES fractional(x) = x")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst-cp
                                                                         -1
                                                                         "1/2^18")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (replaces
                                                                               -2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (case
                                                                                   "not fractional(lat/dlat(i)) = lat / dlat(i) - floor(lat / dlat(i))")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "fractional")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "floor_0")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "1 / 2 ^ 18 + fractional(lat / dlat(i))")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "floor_0")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1/2^18")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (case
                                       "exists (x:real): 0<=x and x<1 and x=fractional(lat/dlat(i))")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (replaces -3 :dir rl)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             1
                                             "fractional(lat/dlat(i))")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (rewrite "mod_frac")
            (("2" (typepred "fractional(lat/dlat(i))")
              (("2" (hide -1)
                (("2" (flip-ineq 1)
                  (("2" (both-sides "*" "2^17" -1)
                    (("2" (both-sides "*" "2^17" -2)
                      (("2" (both-sides "+" "1/2" -1)
                        (("1" (both-sides "+" "1/2" -2)
                          (("1"
                            (case "not (1 - 1 / 2 ^ 18) * 2 ^ 17 + 1 / 2 = 2^17")
                            (("1" (eval-formula 1) nil nil)
                             ("2" (replaces -1)
                              (("2"
                                (both-sides-f -1 "floor")
                                (("2"
                                  (case
                                   "NOT floor(fractional(lat / dlat(i)) * 2 ^ 17 + 1 / 2) <= floor(1 * 2 ^ 17 + 1 / 2)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (lemma "floor_int")
                                    (("2"
                                      (inst -1 "2^17")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lemma "floor_plus_int")
                                          (("2"
                                            (inst -1 "1*2^17" "1/2")
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (case
                                                 "not floor(1/2) = 0")
                                                (("1"
                                                  (eval-formula 1)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (case
                                                     "not floor(fractional(lat / dlat(i)) * 2 ^ 17 + 1 / 2) = 2^17")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand "mod")
                                                        (("2"
                                                          (case
                                                           "not 2 ^ 17 - 2 ^ 17 * floor(2 ^ 17 / 2 ^ 17) =0")
                                                          (("1"
                                                            (eval-formula
                                                             1)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "YZ_alt")
                                                              (("2"
                                                                (reveal
                                                                 1)
                                                                (("2"
                                                                  (flip-ineq
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "floor_0")
                                                                    (("2"
                                                                      (hide
                                                                       (-3
                                                                        -4))
                                                                      (("2"
                                                                        (case
                                                                         "not 2 ^ 17 * mod(dlat(i) / 2 ^ 18 + lat, dlat(i)) / dlat(i) = 2 ^ 17 * (mod(dlat(i) / 2 ^ 18 + lat, dlat(i)) / dlat(i))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "mod_frac")
                                                                            (("2"
                                                                              (expand
                                                                               "fractional"
                                                                               1)
                                                                              (("2"
                                                                                (case
                                                                                 "(dlat(i) / 2 ^ 18 + lat) / dlat(i) = 1/2^18 + lat/dlat(i)")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "floor_plus "
                                                                                     1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "not floor(1/2^18) = 0")
                                                                                      (("1"
                                                                                        (eval-formula
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "fractional(1/2^18) = 1/2^18")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (case
                                                                                               "not fractional(lat/dlat(i))<=1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (both-sides
                                                                                                 "+"
                                                                                                 "1/2^18"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (both-sides
                                                                                                   "+"
                                                                                                   "1/2^18"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (simplify
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (both-sides-f
                                                                                                       -1
                                                                                                       "floor")
                                                                                                      (("2"
                                                                                                        (both-sides-f
                                                                                                         -3
                                                                                                         "floor")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "floor_int")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "floor_plus_int")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "1"
                                                                                                                 "1/2^18")
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (eval-expr
                                                                                                                       "floor(1/2^18)")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "not floor(fractional(lat / dlat(i)) + 1 / 2 ^ 18) =1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (simplify
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (eval-expr
                                                                                                                                 "2 ^ 17 * (1 / 2 ^ 18)")
                                                                                                                                (("2"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "not 1 / 2 + 2 ^ 17 * (lat / dlat(i)) - 2 ^ 17 -
              floor(lat / dlat(i)) * 2 ^ 17 = fractional(lat/dlat(i))*2^17 +1/2 -2^17")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "fractional")
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "floor_plus_int")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "-2^17"
                                                                                                                                           "fractional(lat / dlat(i)) * 2 ^ 17 + 1 / 2")
                                                                                                                                          (("2"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "floor(fractional(lat / dlat(i)) * 2 ^ 17 + 1 / 2) <= floor(1 * 2 ^ 17 + 1 / 2)")
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "floor_plus_int")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "1*2^17"
                                                                                                                                                   "1/2")
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (eval-expr
                                                                                                                                                       "floor(1/2)")
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (reveal
                                                                                                                                                           -7)
                                                                                                                                                          (("1"
                                                                                                                                                            (both-sides
                                                                                                                                                             "*"
                                                                                                                                                             "2^17"
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (simplify
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (eval-expr
                                                                                                                                                                 "2 ^ 17 * (1 / 2 ^ 18)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (both-sides-f
                                                                                                                                                                     -1
                                                                                                                                                                     "floor")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "floor_int")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "1*2^17")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replaces
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (eval-formula
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -)
                          (("2" (hide 2)
                            (("2" (ground)
                              (("2"
                                (case
                                 "exists (x:real): 0<=x and x<1 and x=fractional(lat/dlat(i))")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (replaces -3 :dir rl)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (inst 1 "fractional(lat/dlat(i))")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((YZ const-decl "int" cpr_defs nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (YZ_alt const-decl "int" alt_encoding nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_plus formula-decl nil floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (FL skolem-const-decl "{i_1 |
         i_1 <= 1 / 2 + 2 ^ 17 * fractional(lat / dlat(i)) &
          1 / 2 + 2 ^ 17 * fractional(lat / dlat(i)) < 1 + i_1}"
     alt_encoding nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (floor_int formula-decl nil floor_ceil nil)
    (both_sides_div_pos_ge2 formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (XZ_alt_TCC1 0
  (XZ_alt_TCC1-1 nil 3687275645 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (alt_is_XZ 0
  (alt_is_XZ-1 nil 3687509935
   ("" (skeep)
    (("" (expand "XZi")
      (("" (assert)
        (("" (name "dlon" "Dloni(17,i)(lat)")
          (("" (replaces -1)
            (("" (case "mod(lon, dlon)/dlon<1-1/2^18")
              (("1" (case "2^17<=2^17")
                (("1" (lemma "mod_frac")
                  (("1" (inst?)
                    (("1" (replace -1)
                      (("1" (mult-ineq -2 -3)
                        (("1"
                          (case "not (2 ^ 17) * (1 - 1 / 2 ^ 18) + 1 / 2 = 2^17")
                          (("1" (eval-formula 1) nil nil)
                           ("2" (typepred "fractional(lon/dlon)")
                            (("2" (hide -2)
                              (("2"
                                (mult-ineq -5 -1)
                                (("2"
                                  (simplify -1)
                                  (("2"
                                    (both-sides "+" "1/2" -4)
                                    (("1"
                                      (replaces -3)
                                      (("1"
                                        (case
                                         "not mod(floor(1/2 + 2 ^ 17 * fractional(lon / dlon)), 2 ^ 17) = floor(1/2 + 2 ^ 17 * fractional(lon / dlon))")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (name
                                             "FL"
                                             "floor(1 / 2 + 2 ^ 17 * fractional(lon / dlon))")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (expand "mod" 1)
                                                (("1"
                                                  (case "FL<2^17")
                                                  (("1"
                                                    (lemma "floor_0")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "FL/2^17")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "FL")
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (replaces -4 :dir rl)
                                            (("2"
                                              (expand "XZ_alt")
                                              (("2"
                                                (case
                                                 "not dlon = 360 / max(nl - i, 1)")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "dlon")
                                                    (("1"
                                                      (expand "Dloni")
                                                      (("1"
                                                        (expand "dlon")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   -7
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "max")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -6
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "max")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lift-if
                                                                         2)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (typepred
                                                                               "nl")
                                                                              (("1"
                                                                                (typepred
                                                                                 (i))
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (expand
                                                     "fractional")
                                                    (("2"
                                                      (expand "mod")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "div_distributes_minus"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (case
                                                             "not 2 ^ 17 * (1 / 2 ^ 18) = 1/2")
                                                            (("1"
                                                              (eval-formula
                                                               1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "not dlon * floor(lon / dlon) / dlon = floor(lon/dlon)")
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (simplify
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "floor_plus_int")
                                                                      (("2"
                                                                        (inst-cp
                                                                         -1
                                                                         "-floor(lon/dlon)*2^17"
                                                                         " 1/2 + 2 ^ 17 * (lon / dlon)")
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (replaces
                                                                             -2)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "-floor(1/2^18+lon/dlon)*2^17"
                                                                               " 1/2 + 2 ^ 17 * (lon / dlon)")
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (simplify
                                                                                   1)
                                                                                  (("2"
                                                                                    (case
                                                                                     " floor(lon / dlon) = floor(1 / 2 ^ 18 + lon / dlon) ")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "floor(1 / 2 ^ 18 + lon / dlon)")
                                                                                        (("2"
                                                                                          (move-terms
                                                                                           -8
                                                                                           l
                                                                                           2)
                                                                                          (("2"
                                                                                            (move-terms
                                                                                             -8
                                                                                             r
                                                                                             2)
                                                                                            (("2"
                                                                                              (case
                                                                                               "not floor(1 / 2 ^ 18 + lon / dlon) < 1 + floor(lon / dlon)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "NOT floor(lon / dlon)<=floor(1 / 2 ^ 18 + lon / dlon)")
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "forall (x, y: real): x<=y IMPLIES floor(x)<=floor(y)")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (move-terms
                                                                                                           1
                                                                                                           r
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (simplify
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "forall (m,n :int): (m<=n and n<m+1) IMPLIES m=n")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "floor(lon/dlon)"
                                                                                                     "floor(1/2^18+lon/dlon)")
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (eval-expr "2^17")
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (eval-expr "2^18")
                                            (("2"
                                              (replaces -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "dlon")
                      (("2" (hide 2)
                        (("2" (expand "Dloni")
                          (("2" (expand "dlon")
                            (("2" (assert)
                              (("2"
                                (replaces -3 :dir rl)
                                (("2"
                                  (case "nl-i = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (cross-mult 1)
                                          (("1"
                                            (split 1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (typepred "nl")
                                              (("2"
                                                (typepred (i))
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (cross-mult 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred "nl")
                                              (("2"
                                                (typepred (i))
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (rewrite "mod_frac")
                (("1" (copy 1)
                  (("1" (label "frac_ineq" 2)
                    (("1" (hide 2)
                      (("1" (expand "XZ_alt")
                        (("1" (case "not 360/max(nl-i, 1) = dlon")
                          (("1" (hide (2 3))
                            (("1" (expand "dlon")
                              (("1"
                                (expand "Dloni")
                                (("1"
                                  (expand "dlon")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "max")
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (typepred (nl))
                                                      (("1"
                                                        (typepred (i))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2"
                              (name "XZ_al"
                                    "floor(2 ^ 17 * fractional(1 / 2 ^ 18 + lon / dlon))")
                              (("2"
                                (replaces -1)
                                (("2"
                                  (label "dlon_def" -1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (label "nl_def" -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (typepred
                                           "fractional(lon/dlon)")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (flip-ineq 1)
                                              (("2"
                                                (both-sides
                                                 "*"
                                                 "2^17"
                                                 -1)
                                                (("2"
                                                  (both-sides
                                                   "*"
                                                   "2^17"
                                                   -2)
                                                  (("2"
                                                    (both-sides
                                                     "+"
                                                     "1/2"
                                                     -1)
                                                    (("1"
                                                      (both-sides
                                                       "+"
                                                       "1/2"
                                                       -2)
                                                      (("1"
                                                        (case
                                                         "not (1 - 1 / 2 ^ 18) * 2 ^ 17 + 1 / 2 = 2^17")
                                                        (("1"
                                                          (eval-formula
                                                           1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (both-sides-f
                                                             -1
                                                             "floor")
                                                            (("2"
                                                              (case
                                                               "NOT floor(fractional(lon / dlon) * 2 ^ 17 + 1 / 2) <= floor(1 * 2 ^ 17 + 1 / 2)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "floor_int")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "2^17")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "floor_plus_int")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "1*2^17"
                                                                         "1/2")
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (case
                                                                             "not floor(1/2) = 0")
                                                                            (("1"
                                                                              (eval-formula
                                                                               1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (case
                                                                                 "not floor(fractional(lon / dlon) * 2 ^ 17 + 1 / 2) = 2^17")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "mod")
                                                                                    (("2"
                                                                                      (case
                                                                                       "not 2 ^ 17 - 2 ^ 17 * floor(2 ^ 17 / 2 ^ 17) =0")
                                                                                      (("1"
                                                                                        (eval-formula
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "XZ_al")
                                                                                          (("2"
                                                                                            (reveal
                                                                                             1)
                                                                                            (("2"
                                                                                              (flip-ineq
                                                                                               1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "floor_0")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   (-3
                                                                                                    -4))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "fractional")
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "not 2 ^ 17 * (1 / 2 ^ 18) = 1/2")
                                                                                                      (("1"
                                                                                                        (eval-formula
                                                                                                         1)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "floor_plus_int")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             " -
                                    floor(1 / 2 ^ 18 + lon / dlon) * 2 ^ 17"
                                                                                                             "1 / 2 + 2 ^ 17 * (lon / dlon)")
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (move-terms
                                                                                                                 1
                                                                                                                 r
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "not  0 - -floor(1 / 2 ^ 18 + lon / dlon) * 2 ^ 17 =  floor(1 / 2 ^ 18 + lon / dlon) * 2 ^ 17")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (move-terms
                                                                                                                       -3
                                                                                                                       l
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "not floor(1 / 2 + 2 ^ 17 * (lon / dlon)) <= floor(2 ^ 17 + 1 / 2 + floor(lon / dlon) * 2 ^ 17)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (move-terms
                                                                                                                           -3
                                                                                                                           r
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (move-terms
                                                                                                                             -3
                                                                                                                             l
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (swap-rel
                                                                                                                               -3)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "lon/dlon+1/2^18<= lon/dlon+1")
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "floor(lon/dlon+1)")
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "floor_plus_int")
                                                                                                                                      (("1"
                                                                                                                                        (simplify
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (simplify
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "NOT lon / dlon + 1 / 2 ^ 18< 2 + floor(lon / dlon)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (both-sides-f
                                                                                                                                               -6
                                                                                                                                               "floor")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "floor_int")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "1 + floor(lon / dlon)")
                                                                                                                                                  (("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (both-sides-f
                                                                                                                                                       -4
                                                                                                                                                       "floor")
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "floor_plus_int")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "1"
                                                                                                                                                           " lon/dlon")
                                                                                                                                                          (("2"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (case
                                                                                                                                                               "not floor(lon / dlon + 1 / 2 ^ 18) = floor(lon / dlon) + 1")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (simplify
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "floor_plus_int")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "2 ^ 17 + floor(lon / dlon) * 2 ^ 17"
                                                                                                                                                                       "1 / 2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (case
                                                                                                                                                                           "NOT floor(1/2) = 0")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (eval-formula
                                                                                                                                                                             1)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                 (-6
                                                                                                                                                                                  1))
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (move-terms
                                                                                                                                                                                   -1
                                                                                                                                                                                   r
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (move-terms
                                                                                                                                                                                     -1
                                                                                                                                                                                     l
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (reveal
                                                                                                                                                                                       "frac_ineq")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (flip-ineq
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "fractional")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (both-sides
                                                                                                                                                                                             "*"
                                                                                                                                                                                             "2^17"
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (simplify
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (eval-expr
                                                                                                                                                                                                 "2 ^ 17 * (1 / 2 ^ 18)")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (move-terms
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     r
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (move-terms
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       l
                                                                                                                                                                                                       2)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (both-sides-f
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         "floor")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           "floor_int")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -1
                                                                                                                                                                                                             " 2 ^ 17 + floor(lon / dlon) * 2 ^ 17")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (move-terms
                                                                                                                                     1
                                                                                                                                     l
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (simplify
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (eval-formula
                                                                                                                                         1)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (eval-expr
                                                       "2^17")
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (eval-expr
                                                           "2^18")
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (2 3))
                  (("2" (expand "dlon")
                    (("2" (expand "Dloni")
                      (("2" (expand "dlon")
                        (("2" (assert)
                          (("2" (replaces -1 :dir rl)
                            (("2" (case "nl-i = 0")
                              (("1"
                                (replaces -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "not nl-i>=0")
                                  (("1"
                                    (typepred (nl))
                                    (("1"
                                      (typepred (i))
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (ground)
                                    (("1" (cross-mult 1) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((XZi const-decl "int" encoding nil)
    (Dloni const-decl "Longitude" encoding nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (div_mult_pos_neg_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (XZ_alt const-decl "int" alt_encoding nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (dlon const-decl "{x: real | 0 < x AND x <= 360}" cpr_defs nil)
    (subrange type-eq-decl nil integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (FL skolem-const-decl "{i |
         i <= 1 / 2 + 2 ^ 17 * fractional(lon / dlon) &
          1 / 2 + 2 ^ 17 * fractional(lon / dlon) < 1 + i}"
     alt_encoding nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (dlon skolem-const-decl "Longitude" alt_encoding nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (XZ_al skolem-const-decl "{i |
         i <= 2 ^ 17 * fractional(1 / 2 ^ 18 + lon / dlon) &
          2 ^ 17 * fractional(1 / 2 ^ 18 + lon / dlon) < 1 + i}"
     alt_encoding nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (floor_int formula-decl nil floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (both_sides_div_pos_ge2 formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak)))

