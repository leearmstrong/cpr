(simplifications
 (mod_div_simp 0
  (mod_div_simp-1 nil 3676130705
   ("" (skeep) (("" (expand "mod") (("" (assert) nil nil)) nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (floor_plus_mod_simp 0
  (floor_plus_mod_simp-1 nil 3676131159
   ("" (skeep)
    (("" (lemma "floor_plus_int")
      (("" (inst -1 "floor(a/b)" "mod(a, b) / b + other")
        (("" (replaces -1 :dir rl)
          (("" (rewrite "mod_div_simp") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((floor_plus_int formula-decl nil floor_ceil nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mod_div_simp formula-decl nil simplifications nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (nl_table_simp_TCC1 0
  (nl_table_simp_TCC1-1 nil 3676131564
   ("" (skeep) (("" (expand "NZ") (("" (assert) nil nil)) nil)) nil)
   ((NZ const-decl "int" basic_defs nil)) nil))
 (nl_table_simp_TCC2 0
  (nl_table_simp_TCC2-1 nil 3676131564
   ("" (skeep)
    (("" (move-terms -1 l 2)
      (("" (simplify -1)
        (("" (lemma "cos_decreasing")
          (("" (inst -1 "2*pi/nl" "0")
            (("" (assert)
              (("" (case "not 2*pi/nl<=pi")
                (("1" (cross-mult 1) (("1" (cancel-by 1 "pi") nil nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (rewrite "cos_0") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cos const-decl "real" sincos_def "trig/")
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (cos_decreasing formula-decl nil trig_ineq "trig/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_0 formula-decl nil sincos_def "trig/")
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (nl_table_simp_TCC3 0
  (nl_table_simp_TCC3-1 nil 3676131564
   ("" (skeep)
    (("" (case "1-cos(pi/(2*NZ))>0")
      (("1" (case "1-cos(2*pi/nl) > 0")
        (("1" (cross-mult 1) nil nil)
         ("2" (hide 2)
          (("2" (hide -1)
            (("2" (move-terms 1 l 2)
              (("2" (simplify 1)
                (("2" (lemma "cos_decreasing")
                  (("2" (inst -1 "2*pi/nl" "0")
                    (("2" (assert)
                      (("2" (case "not 2*pi/nl<=pi")
                        (("1" (cross-mult 1)
                          (("1" (cancel-by 1 "pi") nil nil)) nil)
                         ("2" (replaces -1)
                          (("2" (rewrite "cos_0") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (move-terms 1 l 2)
          (("2" (simplify 1)
            (("2" (lemma "cos_decreasing")
              (("2" (inst -1 "pi/(2*NZ)" "0")
                (("2" (assert)
                  (("2" (expand "NZ") (("2" (rewrite "cos_0") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NZ const-decl "int" basic_defs nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def "trig/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_decreasing formula-decl nil trig_ineq "trig/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_0 formula-decl nil sincos_def "trig/")
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nl skolem-const-decl "subrange(2, 59)" simplifications nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (nl_table_simp_TCC4 0
  (nl_table_simp_TCC4-1 nil 3676132476 ("" (subtype-tcc) nil nil)
   ((NZ const-decl "int" basic_defs nil)) nil))
 (nl_table_simp_TCC5 0
  (nl_table_simp_TCC5-1 nil 3676132476
   ("" (skeep)
    (("" (lemma "sin_increasing")
      (("" (inst -1 "pi/nl" "0")
        (("" (assert)
          (("" (case "not pi / nl <= pi / 2")
            (("1" (cancel-by 1 "pi") (("1" (cross-mult 2) nil nil))
              nil)
             ("2" (replaces -1)
              (("2" (rewrite "sin_0") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_increasing formula-decl nil trig_ineq "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (sin_range application-judgement "real_abs_le1" sincos "trig/")
    (sin_0 formula-decl nil sincos_def "trig/")
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (nl_table_simp 0
  (nl_table_simp-1 nil 3676131867
   ("" (skeep)
    (("" (lemma "cos_2a_sin")
      (("" (inst-cp -1 "pi/(4*NZ)")
        (("" (case "not 2 * (pi / (4 * NZ)) = pi/(2*NZ)")
          (("1" (expand "NZ") (("1" (assert) nil nil)) nil)
           ("2" (replaces -1)
            (("2" (replaces -2)
              (("2" (simplify 1)
                (("2" (inst -1 "pi/nl")
                  (("2" (replaces -1)
                    (("2" (simplify 1)
                      (("2"
                        (case "not 2 * (sin(pi / (4 * NZ)) * sin(pi / (4 * NZ))) /
            (2 * (sin(pi / nl) * sin(pi / nl))) =  (sin(pi / (4 * NZ)) * sin(pi / (4 * NZ))) /
            ( (sin(pi / nl) * sin(pi / nl)))")
                        (("1" (cross-mult) nil nil)
                         ("2" (replaces -1)
                          (("2" (rewrite "sqrt_div")
                            (("1" (lemma "sqrt_sq")
                              (("1"
                                (expand "sq")
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (lemma "sin_increasing")
                                      (("1"
                                        (inst -1 "pi/nl" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "not pi/nl<=pi/2")
                                            (("1"
                                              (cancel-by 1 "pi")
                                              (("1"
                                                (cross-mult 2)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (replaces -1)
                                              (("2"
                                                (rewrite "sin_0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "sin_increasing")
                                    (("2"
                                      (inst -1 " pi/(4*NZ)" "0")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "NZ")
                                          (("2"
                                            (rewrite "sin_0")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "sin(pi/nl)>0")
                              (("1"
                                (mult-ineq -1 -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (lemma "sin_increasing")
                                (("2"
                                  (inst -1 "pi/nl" "0")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (ground)
                                      (("1" (rewrite "sin_0") nil nil)
                                       ("2"
                                        (cancel-by 1 "pi")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (case "sin(pi/nl)>0")
                          (("1" (mult-ineq -1 -1)
                            (("1" (assert) nil nil)) nil)
                           ("2" (lemma "sin_increasing")
                            (("2" (inst -1 "pi/nl" "0")
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("1" (rewrite "sin_0") nil nil)
                                   ("2" (cancel-by 1 "pi") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_2a_sin formula-decl nil trig_basic "trig/")
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos "trig/")
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (sqrt_sq formula-decl nil sqrt "reals/")
    (sin_increasing formula-decl nil trig_ineq "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_0 formula-decl nil sincos_def "trig/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sqrt_div formula-decl nil sqrt "reals/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sin const-decl "real" sincos_def "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (NZ const-decl "int" basic_defs nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

