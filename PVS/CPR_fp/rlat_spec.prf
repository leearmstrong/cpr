(rlat_spec
 (rlat_idem 0
  (rlat_idem-1 nil 3687604590
   ("" (skeep)
    (("" (expand "RLAT")
      (("" (skeep :preds? t)
        (("" (hide -1)
          (("" (expand "rlat")
            (("" (assert)
              (("" (copy -2)
                (("" (label "lat_def" -1)
                  (("" (hide -1)
                    (("" (cancel-by -2 "dlat(i)")
                      (("" (case "not (m/2^nb>=0 and m/2^nb<=1)")
                        (("1" (ground) (("1" (cross-mult 1) nil nil))
                          nil)
                         ("2" (copy -2)
                          (("2" (both-sides-f -1 "floor")
                            (("2" (lemma "floor_plus_int")
                              (("2"
                                (inst -1 "k" "m/2^nb")
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (case "m=2^nb")
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (rewrite "div_simp")
                                          (("1"
                                            (eval-expr "floor(1)")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "YZ")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "mod_frac")
                                                    (("1"
                                                      (expand
                                                       "fractional")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (simplify
                                                             2)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               2)
                                                              (("1"
                                                                (simplify
                                                                 2)
                                                                (("1"
                                                                  (eval-expr
                                                                   "floor(1/2)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "YZ")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "mod_frac")
                                            (("2"
                                              (expand "fractional")
                                              (("2"
                                                (lemma "floor_0")
                                                (("2"
                                                  (inst -1 "m/2^nb")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NB type-eq-decl nil basic_defs nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (YZ const-decl "int" cpr_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rlat const-decl "Latitude" cpr_defs nil))
   shostak))
 (rlate_global_TCC1 0
  (rlate_global_TCC1-1 nil 3687604397
   ("" (lemma "encode_lat_bounds")
    (("" (skeep)
      (("" (skeep)
        (("" (hide -3)
          (("" (inst?) (("" (ground) (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (encode_lat_bounds formula-decl nil encoding nil))
   nil))
 (rlate_global_TCC2 0
  (rlate_global_TCC2-1 nil 3687604397
   ("" (lemma "encode_lat_bounds")
    (("" (skeep)
      (("" (skeep)
        (("" (hide -2)
          (("" (inst?) (("" (ground) (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (encode_lat_bounds formula-decl nil encoding nil))
   nil))
 (rlate_global 0
  (rlate_global-1 nil 3687611145
   ("" (skeep)
    (("" (ground)
      (("" (expand "rlat0")
        (("" (assert)
          (("" (lemma "encode_lat_bounds")
            (("" (inst?)
              (("" (ground)
                ((""
                  (case "not exists (N:int): N = j(nb)
                      (encode(nb, 0)(late, lone)`elat,
                       encode(nb, 1)(lato, lono)`elat)")
                  (("1"
                    (inst 1 "j(nb)
                      (encode(nb, 0)(late, lone)`elat,
                       encode(nb, 1)(lato, lono)`elat)")
                    nil nil)
                   ("2" (skeep)
                    (("2" (replaces -1 :dir rl)
                      (("2"
                        (case "not exists ((M:nat| M<2^nb)): M = encode(nb, 0)(late, lone)`elat")
                        (("1" (inst 1 "encode(nb, 0)(late, lone)`elat")
                          nil nil)
                         ("2" (skeep)
                          (("2" (replaces -1 :dir rl)
                            (("2"
                              (case "exists (NN:int): NN = mod(N, 60)")
                              (("1"
                                (skeep)
                                (("1"
                                  (replaces -1 :dir rl)
                                  (("1"
                                    (expand "mod")
                                    (("1"
                                      (case "not 360 = dlat(0)*60")
                                      (("1"
                                        (expand "dlat")
                                        (("1"
                                          (expand "NZ")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "RLAT")
                                          (("2"
                                            (inst
                                             1
                                             "NN- 60*floor((180 + dlat(0) * (M / 2 ^ nb) + dlat(0) * NN) /
                  (60 * dlat(0)))"
                                             "M")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst 1 "mod(N, 60)") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (j const-decl "int" global_decoding nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (EncodingFun type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (TRUE const-decl "bool" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (encode_lat_bounds formula-decl nil encoding nil)
    (rlat0 const-decl "real" global_decoding nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rlato_global 0
  (rlato_global-1 nil 3687611922
   ("" (skeep)
    (("" (ground)
      (("" (expand "rlat1")
        (("" (assert)
          (("" (lemma "encode_lat_bounds")
            (("" (inst -1 "nb" "1" "lato" "  lono")
              (("" (ground)
                ((""
                  (case "not exists (N:int): N = j(nb)
                             (encode(nb, 0)(late, lone)`elat,
                              encode(nb, 1)(lato, lono)`elat)")
                  (("1"
                    (inst 1 "j(nb)
                          (encode(nb, 0)(late, lone)`elat,
                           encode(nb, 1)(lato, lono)`elat)")
                    nil nil)
                   ("2" (skeep)
                    (("2" (replaces -1 :dir rl)
                      (("2"
                        (case "not exists ((M:nat| M<2^nb)): M = encode(nb, 1)(lato, lono)`elat")
                        (("1" (inst 1 "encode(nb, 1)(lato, lono)`elat")
                          nil nil)
                         ("2" (skeep)
                          (("2" (replaces -1 :dir rl)
                            (("2"
                              (case "exists (NN:int): NN = mod(N, 59)")
                              (("1"
                                (skeep)
                                (("1"
                                  (replaces -1 :dir rl)
                                  (("1"
                                    (expand "mod")
                                    (("1"
                                      (case "not 360 = dlat(1)*59")
                                      (("1"
                                        (expand "dlat")
                                        (("1"
                                          (expand "NZ")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replaces -1)
                                        (("2"
                                          (expand "RLAT")
                                          (("2"
                                            (inst
                                             1
                                             "NN- 59*floor((180 + dlat(1) * (M / 2 ^ nb) + dlat(1) * NN) /
                            (59 * dlat(1)))"
                                             "M")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst 1 "mod(N, 59)") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (j const-decl "int" global_decoding nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (EncodingFun type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (TRUE const-decl "bool" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (encode_lat_bounds formula-decl nil encoding nil)
    (rlat1 const-decl "real" global_decoding nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (rlat_pre 0
  (rlat_pre-1 nil 3687619404
   ("" (skeep)
    (("" (expand "rlat")
      (("" (assert)
        (("" (expand "RLAT")
          (("" (inst 1 "floor(lat/dlat(i))" "YZ(nb,i)(lat)")
            (("" (assert)
              (("" (ground)
                (("1" (rewrite "YZ_lb") nil nil)
                 ("2" (rewrite "YZ_ub") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rlat const-decl "Latitude" cpr_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (YZ_ub formula-decl nil cpr_defs nil)
    (YZ_lb formula-decl nil cpr_defs nil)
    (nb skolem-const-decl "NB" rlat_spec nil)
    (i skolem-const-decl "CPRFormat" rlat_spec nil)
    (lat skolem-const-decl "Latitude" rlat_spec nil)
    (YZ const-decl "int" cpr_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (closest_rlat 0
  (closest_rlat-1 nil 3687619916
   ("" (skeep)
    (("" (case "NOT 2^nb>1")
      (("1" (hide-all-but 1)
        (("1" (typepred "nb")
          (("1" (ground)
            (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
             ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil)
             ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "RLAT")
        (("2" (case "not forall (a,b:int):a<b IFF a<=b-1")
          (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
           ("2" (label "int_ineq" -1)
            (("2" (hide -1)
              (("2" (skeep)
                (("2" (skeep)
                  (("2"
                    (case "NOT exists (ke:int, (me: nat | me<=2^nb-1)):ke * dlat(i) + dlat(i) * (me / 2 ^ nb) = lat_reale")
                    (("1" (case "m = 2^nb")
                      (("1" (inst 1 "k+1" "0")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil)
                       ("2" (inst 2 "k" "m")
                        (("1" (assert) nil nil)
                         ("2" (typepred (m))
                          (("2" (reveal "int_ineq")
                            (("2" (inst -1 "m" "2^nb")
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "NOT exists (ko:int, (mo: nat | mo<=2^nb-1)):ko * dlat(i) + dlat(i) * (mo / 2 ^ nb) = lat_realo")
                      (("1" (case "m!1 = 2^nb")
                        (("1" (inst 1 "k!1+1" "0")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "k!1" "m!1")
                          (("1" (assert) nil nil)
                           ("2" (typepred (m!1))
                            (("2" (reveal "int_ineq")
                              (("2"
                                (inst -1 "m!1" "2^nb")
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (skeep)
                          (("2" (label "2nb_1" -3)
                            (("2" (hide -3)
                              (("2"
                                (hide (-3 -4))
                                (("2"
                                  (case
                                   "NOT abs(lat_reale-lat_realo)<dlat(i)/2^nb")
                                  (("1"
                                    (lemma "triangle")
                                    (("1"
                                      (inst
                                       -1
                                       "lat_reale-lat"
                                       "lat-lat_realo")
                                      (("1"
                                        (simplify -1)
                                        (("1"
                                          (lemma "abs_neg")
                                          (("1"
                                            (inst -1 "lat - lat_reale")
                                            (("1"
                                              (simplify -1)
                                              (("1"
                                                (case
                                                 "not -(lat-lat_reale) = lat_reale-lat")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (case
                                                       "NOT abs(lat - lat_realo) + abs(lat - lat_reale) < dlat(i) / 2 ^ (nb + 1)+dlat(i) / 2 ^ (nb + 1)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "div_distributes")
                                                        (("2"
                                                          (case
                                                           "NOT 2 * dlat(i) / 2 ^ (1 + nb) = dlat(i)/2^nb")
                                                          (("1"
                                                            (cross-mult
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (expand
                                                                 "expt"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "not lat_reale-lat_realo = dlat(i)*(ke-ko+ (me-mo)/2^nb)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (lemma "abs_mult")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (case
                                             "not abs(dlat(i)) = dlat(i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replaces -1)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (cancel-by
                                                   -1
                                                   "dlat(i)")
                                                  (("2"
                                                    (case
                                                     "NOT (-2^nb+1<=me-mo AND me-mo<=2^nb-1)")
                                                    (("1"
                                                      (typepred (me))
                                                      (("1"
                                                        (typepred (mo))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "NOT ke = ko")
                                                        (("1"
                                                          (case
                                                           "ke-ko>=1")
                                                          (("1"
                                                            (swap-rel
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "not -1 +1/2^nb<=(me-mo)/2^nb")
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT 1/2^nb <= ke-ko+(me - mo) / 2 ^ nb")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "abs"
                                                                   -7)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "ke-ko<= -1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT (me-mo)/2^nb <= 1-1/2^nb")
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "NOT ke-ko + (me-mo)/2^nb<=-1/2^nb")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "abs"
                                                                     -7)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (simplify
                                                             -4)
                                                            (("2"
                                                              (rewrite
                                                               "abs_div")
                                                              (("2"
                                                                (reveal
                                                                 "2nb_1")
                                                                (("2"
                                                                  (expand
                                                                   "abs"
                                                                   -5
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       -4)
                                                                      (("2"
                                                                        (cancel-by
                                                                         -4
                                                                         "2^nb")
                                                                        (("2"
                                                                          (case
                                                                           "not me=mo")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (m!1 skolem-const-decl "{m: nat | m <= 2 ^ nb}" rlat_spec nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (abs_neg formula-decl nil abs_lems "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (triangle formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (abs_div formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nb skolem-const-decl "NB" rlat_spec nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (m skolem-const-decl "{m: nat | m <= 2 ^ nb}" rlat_spec nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

