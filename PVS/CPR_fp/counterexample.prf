(counterexample
 (local_decoding_lat_counterexample_TCC1 0
  (local_decoding_lat_counterexample_TCC1-1 nil 3673188600
   ("" (skeep)
    (("" (replaces -1)
      (("" (expand "encode")
        (("" (assert)
          (("" (expand "data_field_size")
            (("" (expand "min")
              (("" (assert)
                ((""
                  (case "NOT (FORALL (x:int, y:posnat): 0<=mod(x,y) and mod(x,y)<=y-1)")
                  (("1" (hide 2)
                    (("1" (skeep)
                      (("1" (grind)
                        (("1"
                          (case "NOT exists (nn:int): nn = x - y * floor(x / y) ")
                          (("1" (inst 1 "x-y*floor(x/y)") nil nil)
                           ("2" (skeep)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (lemma "real_parts")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (move-terms -1 r 2)
                                    (("2"
                                      (replaces -1 -2 :dir rl)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "not x / y * y = x")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (simplify -1)
                                              (("2"
                                                (typepred
                                                 "fractional(x/y)")
                                                (("2"
                                                  (case "not y<=y")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (mult-ineq -3 -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -5
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (typepred
                                                           (nn))
                                                          (("2"
                                                            (case
                                                             "NOT forall (ii, jj:int): ii<jj IMPLIES ii<=jj-1")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "nn"
                                                               "y")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind)
                          (("2" (lemma "real_parts")
                            (("2" (inst?)
                              (("2"
                                (move-terms -1 r 2)
                                (("2"
                                  (replaces -1 :dir rl)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "not x / y * y = x")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replaces -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred
                                             "fractional(x/y)")
                                            (("2"
                                              (case "not y<=y")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (mult-ineq -1 -2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (real_parts formula-decl nil floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (^ const-decl "real" exponentiation nil)
    (YZ const-decl "int" cpr_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_decoding_lat_counterexample 0
  (local_decoding_lat_counterexample-1 nil 3673188601
   ("" (skeep)
    (("" (inst 1 "lats(1, 17, i)" "lati(1, 17, i)" "0")
      (("1" (ground)
        (("1" (expand "encode")
          (("1" (assert)
            (("1" (typepred (i)) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (typepred (i)) (("2" (grind) nil nil)) nil)
       ("3" (typepred (i)) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (i skolem-const-decl "CPRFormat" counterexample nil)
    (lats const-decl "real" counterexample nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lati const-decl "real" counterexample nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NZ const-decl "int" basic_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (F2pNb const-decl "real" cpr_defs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (YZ const-decl "int" cpr_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (Rlati const-decl "real" local_decoding nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (local_decoding_lat_counterexample_AWB_TCC1 0
  (local_decoding_lat_counterexample_AWB_TCC1-1 nil 3676307754
   ("" (lemma "local_decoding_lat_counterexample_TCC1")
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            ((""
              (inst -1 "0" "lat1" "lat2" "lon"
               "encode(17, 0)(lat2, lon)")
              (("" (flatten) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EncodingFun type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local_decoding_lat_counterexample_TCC1 subtype-tcc nil
     counterexample nil))
   nil))
 (local_decoding_lat_counterexample_AWB 0
  (local_decoding_lat_counterexample_AWB-1 nil 3676307889
   ("" (inst 1 "35791394" "71582788" "0")
    (("1" (ground)
      (("1" (ground)
        (("1" (expand "dlat")
          (("1" (assert)
            (("1" (expand "NZ") (("1" (eval-formula 1) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "Rlati")
          (("2" (expand "encode")
            (("2" (assert)
              (("2" (expand "latZI_EP")
                (("2" (expand "f_EP")
                  (("2" (expand "dlat")
                    (("2" (expand "NZ")
                      (("2" (assert)
                        (("2" (expand "data_field_size")
                          (("2" (expand "min")
                            (("2" (expand "YZ")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "dlat")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "NZ")
                                      (("2"
                                        (expand "dZI")
                                        (("2"
                                          (expand "ZI_RP")
                                          (("2"
                                            (expand "f_EP")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "f_RP")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "dlat")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "NZ")
                                                        (("2"
                                                          (eval-formula
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (eval-formula 1) nil nil) ("3" (eval-formula 1) nil nil)
     ("4" (eval-formula 1) nil nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Rlati const-decl "real" local_decoding nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (YZ const-decl "int" cpr_defs nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (encode const-decl "EncodingFun" encoding nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (LonAWB type-eq-decl nil AWB nil) (LatAWB type-eq-decl nil AWB nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (ZO_TCC1 0
  (ZO_TCC1-1 nil 3673193811 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (NZ const-decl "int" basic_defs nil))
   nil))
 (global_decoding_lat_counterexample_TCC1 0
  (global_decoding_lat_counterexample_TCC1-1 nil 3673193811
   ("" (lemma "local_decoding_lat_counterexample_TCC1")
    (("" (skeep)
      (("" (skeep)
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (local_decoding_lat_counterexample_TCC1 subtype-tcc nil
     counterexample nil))
   nil))
 (global_decoding_lat_counterexample_TCC2 0
  (global_decoding_lat_counterexample_TCC2-1 nil 3673193811
   ("" (lemma "local_decoding_lat_counterexample_TCC1")
    (("" (skeep)
      (("" (skeep)
        (("" (hide -2)
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (local_decoding_lat_counterexample_TCC1 subtype-tcc nil
     counterexample nil))
   nil))
 (global_decoding_lat_counterexample 0
  (global_decoding_lat_counterexample-1 nil 3673193817
   ("" (inst 1 "lat_0(5,17)" "lat_1(5,17)" "0")
    (("1" (ground)
      (("1" (expand "encode")
        (("1" (assert)
          (("1" (expand "data_field_size")
            (("1" (expand "min")
              (("1" (expand "rlat0")
                (("1" (expand "YZ")
                  (("1" (expand "dlat")
                    (("1" (assert)
                      (("1" (expand "lat_1")
                        (("1" (expand "dlat")
                          (("1" (assert)
                            (("1" (expand "NZ")
                              (("1"
                                (expand "lat_0")
                                (("1"
                                  (expand "ZO")
                                  (("1"
                                    (expand "dlat")
                                    (("1"
                                      (expand "rlat1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "dlat")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "NZ")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "j")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "lat_1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "dlat")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "NZ")
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "lat_1")
      (("2" (expand "dlat")
        (("2" (expand "NZ")
          (("2" (assert) (("2" (eval-formula 1) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (expand "lat_0")
      (("3" (expand "lat_1")
        (("3" (expand "ZO")
          (("3" (expand "dlat")
            (("3" (expand "NZ")
              (("3" (assert) (("3" (eval-formula 1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (YZ const-decl "int" cpr_defs nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (NZ const-decl "int" basic_defs nil)
    (ZO const-decl "posreal" counterexample nil)
    (rlat1 const-decl "real" global_decoding nil)
    (j const-decl "int" global_decoding nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (rlat0 const-decl "real" global_decoding nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lat_1 const-decl "real" counterexample nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NB type-eq-decl nil basic_defs nil)
    (lat_0 const-decl "real" counterexample nil)
    (<= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (global_decoding_lat_counterexample_AWB 0
  (global_decoding_lat_counterexample_AWB-1 nil 3676805215
   ("" (inst 1 "363373617" "363980245" "0")
    (("1" (ground)
      (("1" (expand "AWB2lat")
        (("1" (assert)
          (("1" (eval-expr "2^30")
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (expand "res")
                  (("1" (eval-expr "2^32")
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (expand "ZO")
                          (("1" (expand "dlat")
                            (("1" (assert)
                              (("1"
                                (expand "NZ")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "abs" 1 1)
                                    (("1"
                                      (expand "encode")
                                      (("1"
                                        (expand "data_field_size")
                                        (("1"
                                          (expand "min")
                                          (("1"
                                            (expand "rlat0")
                                            (("1"
                                              (expand "rlat1")
                                              (("1"
                                                (expand "YZ")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "j")
                                                    (("1"
                                                      (expand "dlat")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "NZ")
                                                          (("1"
                                                            (eval-formula
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert) nil nil)
     ("3" (assert) (("3" (eval-formula 1) nil nil)) nil)
     ("4" (eval-formula 1) nil nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (res const-decl "real" AWB nil)
    (ZO const-decl "posreal" counterexample nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (rlat1 const-decl "real" global_decoding nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (j const-decl "int" global_decoding nil)
    (YZ const-decl "int" cpr_defs nil)
    (rlat0 const-decl "real" global_decoding nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NZ const-decl "int" basic_defs nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (AWB2lat const-decl "Latitude" AWB nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (LonAWB type-eq-decl nil AWB nil) (LatAWB type-eq-decl nil AWB nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (encoding_counterexample_TCC1 0
  (encoding_counterexample_TCC1-1 nil 3673960256
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (typepred (n))
                (("" (eval-expr "2 ^ 17")
                  (("" (eval-expr "2 ^ 18")
                    (("" (eval-expr "2 ^ 128")
                      (("" (replaces -1)
                        (("" (replaces -1)
                          (("" (replaces -1) (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (subrange type-eq-decl nil integers nil))
   nil))
 (encoding_counterexample_TCC2 0
  (encoding_counterexample_TCC2-1 nil 3673960649
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (typepred (n))
                  (("" (assert)
                    (("" (eval-expr "2 ^ 128")
                      (("" (eval-expr "2 ^ 18")
                        (("" (eval-expr "2 ^ 17")
                          (("" (replaces -1)
                            (("" (replaces -1)
                              ((""
                                (replaces -1)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   nil))
 (encoding_counterexample 0
  (encoding_counterexample-1 nil 3673960256
   ("" (assert)
    (("" (expand "encode")
      (("" (expand "YZ")
        (("" (expand "dlat")
          (("" (expand "NZ")
            (("" (expand "data_field_size")
              (("" (expand "min")
                (("" (assert) (("" (eval-formula 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((encode const-decl "EncodingFun" encoding nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (YZ const-decl "int" cpr_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (encoding_counterexample2_TCC1 0
  (encoding_counterexample2_TCC1-1 nil 3673968031
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (eval-expr "2 ^ 17")
                (("" (eval-expr "2 ^ 18")
                  (("" (eval-expr "2 ^ 128")
                    (("" (replaces -1)
                      (("" (replaces -1)
                        (("" (replaces -1)
                          (("" (assert)
                            (("" (expand "dlat")
                              ((""
                                (assert)
                                ((""
                                  (expand "NZ")
                                  ((""
                                    (assert)
                                    ((""
                                      (typepred (n))
                                      ((""
                                        (eval-expr "2 ^ 17")
                                        ((""
                                          (replaces -1)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (encoding_counterexample2_TCC2 0
  (encoding_counterexample2_TCC2-1 nil 3673968031
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (typepred (n))
                  (("" (eval-expr "2 ^ 17")
                    (("" (eval-expr "2 ^ 128")
                      (("" (eval-expr "2 ^ 18")
                        (("" (expand "dlat")
                          (("" (expand "cpr_div")
                            (("" (expand "NZ") (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (encoding_counterexample2 0
  (encoding_counterexample2-1 nil 3673968031
   ("" (assert)
    (("" (expand "encode")
      (("" (expand "YZ")
        (("" (expand "dlat")
          (("" (expand "NZ")
            (("" (expand "data_field_size")
              (("" (expand "min")
                (("" (assert) (("" (eval-formula 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((encode const-decl "EncodingFun" encoding nil)
    (dlat const-decl "posreal" cpr_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NZ const-decl "int" basic_defs nil)
    (YZ const-decl "int" cpr_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (lat_counterexample_reasonableness_TCC1 0
  (lat_counterexample_reasonableness_TCC1-1 nil 3684664651
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (lemma "XZ_ub")
              (("" (replaces -4)
                (("" (hide-all-but (-1 1))
                  (("" (expand "encode")
                    (("" (assert)
                      (("" (expand "data_field_size")
                        (("" (expand "min")
                          (("" (hide -1)
                            (("" (lemma "YZ_ub")
                              ((""
                                (lemma "YZ_lb")
                                ((""
                                  (inst?)
                                  ((""
                                    (inst?)
                                    ((""
                                      (assert)
                                      ((""
                                        (expand "mod")
                                        ((""
                                          (assert)
                                          ((""
                                            (split-ineq -2)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (eval-formula 1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "floor_0")
                                              (("2"
                                                (inst
                                                 -1
                                                 "YZ(17, 0)(lat2)/ 2 ^ 17")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "FORALL (m,n:nat): m<=n IMPLIES (m=n OR m<=n-1)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((XZ_ub formula-decl nil local_correctness nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (YZ_ub formula-decl nil cpr_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (YZ const-decl "int" cpr_defs nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (YZ_lb formula-decl nil cpr_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (lat_counterexample_reasonableness_TCC2 0
  (lat_counterexample_reasonableness_TCC2-1 nil 3684664651
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (replaces -4)
              (("" (hide -)
                (("" (expand "encode")
                  (("" (expand "data_field_size")
                    (("" (expand "min")
                      (("" (assert)
                        (("" (expand "mod")
                          (("" (lemma "YZ_ub")
                            (("" (inst?)
                              ((""
                                (lemma "YZ_lb")
                                ((""
                                  (inst?)
                                  ((""
                                    (split-ineq -2)
                                    (("1"
                                      (replaces -1)
                                      (("1" (eval-formula 1) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "floor_0")
                                      (("2"
                                        (inst
                                         -1
                                         "YZ(17, 1)(lat3)/ 2 ^ 17")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "FORALL (m,n:nat): m<=n IMPLIES (m=n OR m<=n-1)")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (cross-mult 1)
                                                nil
                                                nil)
                                               ("3"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (encode const-decl "EncodingFun" encoding nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (YZ const-decl "int" cpr_defs nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (YZ_lb formula-decl nil cpr_defs nil)
    (YZ_ub formula-decl nil cpr_defs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (data_field_size const-decl "nat" basic_defs nil))
   nil))
 (lat_counterexample_reasonableness_TCC3 0
  (lat_counterexample_reasonableness_TCC3-1 nil 3701608168
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (typepred "lat_tcc") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (lat_counterexample_reasonableness 0
  (lat_counterexample_reasonableness-5 nil 3685181604
   ("" (name "eps" " 0.812*(dlat(1)-dlat(0))")
    ((""
      (inst 1 "lat_0(5,17)" "lat_1(5,17)" "lat_0(5,17)+eps"
       "eps+lat_1(5,17)" "0"
       "rlat1(17)(encode(17, 0)(lat_0(5,17), 0)`elat, encode(17, 1)(lat_1(5,17), 0)`elat)")
      (("1" (ground)
        (("1" (expand "encode")
          (("1" (expand "data_field_size")
            (("1" (expand "min")
              (("1" (expand "rlat1")
                (("1" (expand "Rlati")
                  (("1" (expand "F2pNb")
                    (("1" (expand "YZ")
                      (("1" (expand "f_EP")
                        (("1" (expand "F2pNb")
                          (("1" (assert)
                            (("1" (expand "latZI_EP")
                              (("1"
                                (expand "dZI")
                                (("1"
                                  (expand "lat_0")
                                  (("1"
                                    (expand "lat_1")
                                    (("1"
                                      (expand "ZO")
                                      (("1"
                                        (expand "dlat")
                                        (("1"
                                          (expand "NZ")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "f_RP")
                                              (("1"
                                                (expand "f_EP")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "j")
                                                    (("1"
                                                      (expand "eps")
                                                      (("1"
                                                        (expand "dlat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "NZ")
                                                            (("1"
                                                              (expand
                                                               "mod")
                                                              (("1"
                                                                (expand
                                                                 "ZI_RP")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("5"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "rlat1")
        (("2" (expand "dlat")
          (("2" (expand "NZ")
            (("2" (expand "encode")
              (("2" (assert)
                (("2" (expand "data_field_size")
                  (("2" (expand "min")
                    (("2" (expand "j")
                      (("2" (assert)
                        (("2" (expand "YZ")
                          (("2" (assert)
                            (("2" (expand "lat_1")
                              (("2"
                                (expand "lat_0")
                                (("2"
                                  (expand "dlat")
                                  (("2"
                                    (expand "NZ")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "lat_1")
                                        (("2"
                                          (expand "dlat")
                                          (("2"
                                            (expand "NZ")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "ZO")
                                                (("2"
                                                  (expand "dlat")
                                                  (("2"
                                                    (expand "NZ")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (eval-formula
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "encode")
        (("3" (expand "lat_1")
          (("3" (expand "dlat")
            (("3" (expand "data_field_size")
              (("3" (expand "min")
                (("3" (expand "NZ")
                  (("3" (expand "YZ")
                    (("3" (expand "F2pNb")
                      (("3" (assert)
                        (("3" (expand "dlat")
                          (("3" (expand "NZ")
                            (("3" (assert)
                              (("3" (eval-formula 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (expand "encode")
        (("4" (expand "YZ")
          (("4" (expand "data_field_size")
            (("4" (expand "min")
              (("4" (expand "lat_0")
                (("4" (expand "lat_1")
                  (("4" (expand "dlat")
                    (("4" (expand "NZ")
                      (("4" (assert)
                        (("4" (expand "ZO")
                          (("4" (expand "dlat")
                            (("4" (expand "NZ")
                              (("4"
                                (assert)
                                (("4" (eval-formula 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (expand "lat_1")
        (("5" (expand "dlat")
          (("5" (expand "NZ")
            (("5" (assert)
              (("5" (replaces -1)
                (("5" (replaces -1 :dir rl)
                  (("5" (eval-formula 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (expand "lat_0")
        (("6" (expand "lat_1")
          (("6" (expand "ZO")
            (("6" (expand "dlat")
              (("6" (expand "NZ")
                (("6" (assert)
                  (("6" (replaces -1 :dir rl)
                    (("6" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (expand "lat_1")
        (("7" (expand "dlat")
          (("7" (expand "NZ")
            (("7" (assert)
              (("7" (replaces -1 :dir rl)
                (("7" (eval-formula 1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (expand "lat_0")
        (("8" (expand "lat_1")
          (("8" (expand "ZO")
            (("8" (expand "dlat")
              (("8" (expand "NZ")
                (("8" (assert)
                  (("8" (replaces -1 :dir rl)
                    (("8" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NB type-eq-decl nil basic_defs nil)
    (lat_0 const-decl "real" counterexample nil)
    (<= const-decl "bool" reals nil)
    (lat_1 const-decl "real" counterexample nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eps skolem-const-decl "real" counterexample nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (DataField nonempty-type-eq-decl nil basic_defs nil)
    (EncodingRes type-eq-decl nil basic_defs nil)
    (EncodingFun type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (^ const-decl "real" exponentiation nil)
    (rlat1 const-decl "real" global_decoding nil)
    (BinIndex type-eq-decl nil basic_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Rlati const-decl "real" local_decoding nil)
    (YZ const-decl "int" cpr_defs nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (ZO const-decl "posreal" counterexample nil)
    (NZ const-decl "int" basic_defs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (j const-decl "int" global_decoding nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_defs nil))
   nil)
  (lat_counterexample_reasonableness-4 nil 3685181361
   ("" (name "eps" " 7*(dlat(1)-dlat(0))/8")
    ((""
      (inst 1 "lat_0(5,17)" "lat_1(5,17)" "lat_0(5,17)+eps"
       "eps+lat_1(5,17)" "0")
      (("1" (ground)
        (("1" (expand "encode")
          (("1" (expand "data_field_size")
            (("1" (expand "min")
              (("1" (expand "rlat1")
                (("1" (expand "Rlati")
                  (("1" (expand "F2pNb")
                    (("1" (expand "YZ")
                      (("1" (expand "f_EP")
                        (("1" (expand "F2pNb")
                          (("1" (assert)
                            (("1" (expand "latZI_EP")
                              (("1"
                                (expand "dZI")
                                (("1"
                                  (expand "lat_0")
                                  (("1"
                                    (expand "lat_1")
                                    (("1"
                                      (expand "ZO")
                                      (("1"
                                        (expand "dlat")
                                        (("1"
                                          (expand "NZ")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "f_RP")
                                              (("1"
                                                (expand "f_EP")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "j")
                                                    (("1"
                                                      (expand "eps")
                                                      (("1"
                                                        (expand "dlat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "NZ")
                                                            (("1"
                                                              (expand
                                                               "mod")
                                                              (("1"
                                                                (expand
                                                                 "ZI_RP")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("2"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("3"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("4"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("5"
                                                                      (expand
                                                                       "dlat")
                                                                      (("5"
                                                                        (expand
                                                                         "NZ")
                                                                        (("5"
                                                                          (expand
                                                                           "cpr_div")
                                                                          (("5"
                                                                            (expand
                                                                             "cpr_mul")
                                                                            (("5"
                                                                              (expand
                                                                               "cpr_sub")
                                                                              (("5"
                                                                                (eval-formula
                                                                                 1)
                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("2" (expand "lat_1")
        (("2" (expand "dlat")
          (("2" (expand "NZ")
            (("2" (assert)
              (("2" (replaces -1)
                (("2" (replaces -1 :dir rl)
                  (("2" (eval-formula 1) nil)))))))))))))
       ("3" (expand "lat_0")
        (("3" (expand "lat_1")
          (("3" (expand "ZO")
            (("3" (expand "dlat")
              (("3" (expand "NZ")
                (("3" (assert)
                  (("3" (replaces -1 :dir rl)
                    (("3" (eval-formula 1) nil)))))))))))))))
       ("4" (expand "lat_1")
        (("4" (expand "dlat")
          (("4" (expand "NZ")
            (("4" (assert)
              (("4" (replaces -1 :dir rl)
                (("4" (eval-formula 1) nil)))))))))))
       ("5" (expand "lat_0")
        (("5" (expand "lat_1")
          (("5" (expand "ZO")
            (("5" (expand "dlat")
              (("5" (expand "NZ")
                (("5" (assert)
                  (("5" (replaces -1 :dir rl)
                    (("5" (eval-formula 1) nil))))))))))))))))))
    nil)
   nil nil)
  (lat_counterexample_reasonableness-3 nil 3685181181
   ("" (name "eps" " (dlat(1)-dlat(0))/4")
    ((""
      (inst 1 "lat_0(5,17)" "lat_1(5,17)" "lat_0(5,17)+eps"
       "eps+lat_1(5,17)" "0")
      (("1" (ground)
        (("1" (expand "encode")
          (("1" (expand "data_field_size")
            (("1" (expand "min")
              (("1" (expand "rlat1")
                (("1" (expand "Rlati")
                  (("1" (expand "F2pNb")
                    (("1" (expand "YZ")
                      (("1" (expand "f_EP")
                        (("1" (expand "F2pNb")
                          (("1" (assert)
                            (("1" (expand "latZI_EP")
                              (("1"
                                (expand "dZI")
                                (("1"
                                  (expand "lat_0")
                                  (("1"
                                    (expand "lat_1")
                                    (("1"
                                      (expand "ZO")
                                      (("1"
                                        (expand "dlat")
                                        (("1"
                                          (expand "NZ")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "f_RP")
                                              (("1"
                                                (expand "f_EP")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "j")
                                                    (("1"
                                                      (expand "eps")
                                                      (("1"
                                                        (expand "dlat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "NZ")
                                                            (("1"
                                                              (expand
                                                               "mod")
                                                              (("1"
                                                                (expand
                                                                 "ZI_RP")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("5"
                                                                      (expand
                                                                       "dlat")
                                                                      (("5"
                                                                        (expand
                                                                         "NZ")
                                                                        (("5"
                                                                          (expand
                                                                           "cpr_div")
                                                                          (("5"
                                                                            (expand
                                                                             "cpr_mul")
                                                                            (("5"
                                                                              (expand
                                                                               "cpr_sub")
                                                                              (("5"
                                                                                (eval-formula
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "lat_1")
        (("2" (expand "dlat")
          (("2" (expand "NZ")
            (("2" (assert)
              (("2" (replaces -1)
                (("2" (replaces -1 :dir rl)
                  (("2" (eval-formula 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "lat_0")
        (("3" (expand "lat_1")
          (("3" (expand "ZO")
            (("3" (expand "dlat")
              (("3" (expand "NZ")
                (("3" (assert)
                  (("3" (replaces -1 :dir rl)
                    (("3" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (expand "lat_1")
        (("4" (expand "dlat")
          (("4" (expand "NZ")
            (("4" (assert)
              (("4" (replaces -1 :dir rl)
                (("4" (eval-formula 1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (expand "lat_0")
        (("5" (expand "lat_1")
          (("5" (expand "ZO")
            (("5" (expand "dlat")
              (("5" (expand "NZ")
                (("5" (assert)
                  (("5" (replaces -1 :dir rl)
                    (("5" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dlat const-decl "posreal" cpr_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (rlat1 const-decl "real" global_decoding nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (cpr_exp const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (j const-decl "int" global_decoding nil)
    (ZI_RP const-decl "int" local_decoding nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (NZ const-decl "int" basic_defs nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (YZ const-decl "int" cpr_defs nil)
    (Rlati const-decl "real" local_decoding nil)
    (encode const-decl "EncodingFun" encoding nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (NB type-eq-decl nil basic_defs nil))
   nil)
  (lat_counterexample_reasonableness-2 nil 3685180915
   ("" (name "eps" " 3*(dlat(1)-dlat(0))/4")
    ((""
      (inst 1 "lat_0(5,17)" "lat_1(5,17)" "lat_0(5,17)+eps"
       "eps+lat_1(5,17)" "0")
      (("1" (ground)
        (("1" (expand "encode")
          (("1" (expand "data_field_size")
            (("1" (expand "min")
              (("1" (expand "rlat1")
                (("1" (expand "Rlati")
                  (("1" (expand "F2pNb")
                    (("1" (expand "YZ")
                      (("1" (expand "f_EP")
                        (("1" (expand "F2pNb")
                          (("1" (assert)
                            (("1" (expand "latZI_EP")
                              (("1"
                                (expand "dZI")
                                (("1"
                                  (expand "lat_0")
                                  (("1"
                                    (expand "lat_1")
                                    (("1"
                                      (expand "ZO")
                                      (("1"
                                        (expand "dlat")
                                        (("1"
                                          (expand "NZ")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "f_RP")
                                              (("1"
                                                (expand "f_EP")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "j")
                                                    (("1"
                                                      (expand "eps")
                                                      (("1"
                                                        (expand "dlat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "NZ")
                                                            (("1"
                                                              (expand
                                                               "mod")
                                                              (("1"
                                                                (expand
                                                                 "ZI_RP")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("2"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("3"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("4"
                                                                      (eval-formula
                                                                       1)
                                                                      nil)
                                                                     ("5"
                                                                      (expand
                                                                       "dlat")
                                                                      (("5"
                                                                        (expand
                                                                         "NZ")
                                                                        (("5"
                                                                          (expand
                                                                           "cpr_div")
                                                                          (("5"
                                                                            (expand
                                                                             "cpr_mul")
                                                                            (("5"
                                                                              (expand
                                                                               "cpr_sub")
                                                                              (("5"
                                                                                (eval-formula
                                                                                 1)
                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("2" (expand "lat_1")
        (("2" (expand "dlat")
          (("2" (expand "NZ")
            (("2" (assert)
              (("2" (replaces -1)
                (("2" (replaces -1 :dir rl)
                  (("2" (eval-formula 1) nil)))))))))))))
       ("3" (expand "lat_0")
        (("3" (expand "lat_1")
          (("3" (expand "ZO")
            (("3" (expand "dlat")
              (("3" (expand "NZ")
                (("3" (assert)
                  (("3" (replaces -1 :dir rl)
                    (("3" (eval-formula 1) nil)))))))))))))))
       ("4" (expand "lat_1")
        (("4" (expand "dlat")
          (("4" (expand "NZ")
            (("4" (assert)
              (("4" (replaces -1 :dir rl)
                (("4" (eval-formula 1) nil)))))))))))
       ("5" (expand "lat_0")
        (("5" (expand "lat_1")
          (("5" (expand "ZO")
            (("5" (expand "dlat")
              (("5" (expand "NZ")
                (("5" (assert)
                  (("5" (replaces -1 :dir rl)
                    (("5" (eval-formula 1) nil))))))))))))))))))
    nil)
   nil nil)
  (lat_counterexample_reasonableness-1 nil 3684674730
   ("" (name "eps" " (dlat(1)-dlat(0))/4")
    ((""
      (inst 1 "lat_0(5,17)" "lat_1(5,17)" "lat_0(5,17)+eps"
       "eps+lat_1(5,17)" "0")
      (("1" (ground)
        (("1" (expand "encode")
          (("1" (expand "data_field_size")
            (("1" (expand "min")
              (("1" (expand "rlat1")
                (("1" (expand "Rlati")
                  (("1" (expand "F2pNb")
                    (("1" (expand "YZ")
                      (("1" (expand "f_EP")
                        (("1" (expand "F2pNb")
                          (("1" (assert)
                            (("1" (expand "latZI_EP")
                              (("1"
                                (expand "dZI")
                                (("1"
                                  (expand "lat_0")
                                  (("1"
                                    (expand "lat_1")
                                    (("1"
                                      (expand "ZO")
                                      (("1"
                                        (expand "dlat")
                                        (("1"
                                          (expand "NZ")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "f_RP")
                                              (("1"
                                                (expand "f_EP")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "j")
                                                    (("1"
                                                      (expand "eps")
                                                      (("1"
                                                        (expand "dlat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "NZ")
                                                            (("1"
                                                              (expand
                                                               "mod")
                                                              (("1"
                                                                (expand
                                                                 "ZI_RP")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (eval-formula
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("5"
                                                                      (expand
                                                                       "dlat")
                                                                      (("5"
                                                                        (expand
                                                                         "NZ")
                                                                        (("5"
                                                                          (expand
                                                                           "cpr_div")
                                                                          (("5"
                                                                            (expand
                                                                             "cpr_mul")
                                                                            (("5"
                                                                              (expand
                                                                               "cpr_sub")
                                                                              (("5"
                                                                                (eval-formula
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "lat_1")
        (("2" (expand "dlat")
          (("2" (expand "NZ")
            (("2" (assert)
              (("2" (replaces -1)
                (("2" (replaces -1 :dir rl)
                  (("2" (eval-formula 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "lat_0")
        (("3" (expand "lat_1")
          (("3" (expand "ZO")
            (("3" (expand "dlat")
              (("3" (expand "NZ")
                (("3" (assert)
                  (("3" (replaces -1 :dir rl)
                    (("3" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (expand "lat_1")
        (("4" (expand "dlat")
          (("4" (expand "NZ")
            (("4" (assert)
              (("4" (replaces -1 :dir rl)
                (("4" (eval-formula 1) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (expand "lat_0")
        (("5" (expand "lat_1")
          (("5" (expand "ZO")
            (("5" (expand "dlat")
              (("5" (expand "NZ")
                (("5" (assert)
                  (("5" (replaces -1 :dir rl)
                    (("5" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NB type-eq-decl nil basic_defs nil)
    (Longitude type-eq-decl nil basic_defs nil)
    (Latitude type-eq-decl nil basic_defs nil)
    (encode const-decl "EncodingFun" encoding nil)
    (Rlati const-decl "real" local_decoding nil)
    (YZ const-decl "int" cpr_defs nil)
    (latZI_EP const-decl "int" local_decoding nil)
    (NZ const-decl "int" basic_defs nil)
    (f_RP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (ZI_RP const-decl "int" local_decoding nil)
    (j const-decl "int" global_decoding nil)
    (dZI const-decl "{dzi: int | abs(dzi) <= 1}" local_decoding nil)
    (cpr_sub const-decl "real" cpr_funs nil)
    (cpr_floor const-decl "real" cpr_funs nil)
    (cpr_add const-decl "real" cpr_funs nil)
    (F1d2 const-decl "real" cpr_defs nil)
    (cpr_mul const-decl "real" cpr_funs nil)
    (cpr_div const-decl "real" cpr_funs nil)
    (cpr_mod const-decl "{k: real | abs(k) < abs(j)}" cpr_funs nil)
    (cpr_exp const-decl "real" cpr_funs nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (f_EP const-decl "{x: real | 0 <= x AND x < 1}" local_decoding nil)
    (F2pNb const-decl "real" cpr_defs nil)
    (rlat1 const-decl "real" global_decoding nil)
    (data_field_size const-decl "nat" basic_defs nil)
    (CPRFormat nonempty-type-eq-decl nil basic_defs nil)
    (dlat const-decl "posreal" cpr_defs nil))
   shostak)))

