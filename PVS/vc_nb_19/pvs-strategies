;;
;; 1. Proofs of equivalence between acsl declarations and PVS functions (CPR@cpr_int)
;;

(defstep prove-logic-original-eq ()
  (then
   (auto-rewrite "closest_mult_div_shift_j"
		 "mod_u32_j"
		 "add_u32_j"
		 "lsr_u32_j"
		 "mul_u32_j"
		 "sub_u32_j"
		 "div_u32_j"
		 "mod__eq"
		 "mod_lt_nat"
		 "unsinged_int__65536_j"
		 "unsinged_int__131072_j"
		 "local_zone__uint32__j")
   (skeep :preds? t)
   (safe-match - "nb=%1" step (label "nb_def" $1n))
   (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
   (invoke (expand "%1" -1) (! -1 1 0))
   (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil) (! 1 2))
   (invoke (expand "%1" -1) (! -1 1 0))
   (expand "closest_div_mult")
   (use "Q_nb_def")
   (replace -1 :dir rl)
   (replace "nb_def")
   (assert)
   (repeat (safe-match -2 "2^%1" step (then (eval-expr "2^%1") (replace -1 :hide? t))))
   (repeat (safe-match -3 "L_shr_u32(%,%)" step (rewrite "shr_u32__eq")))
   (repeat (safe-match -3 "L_add_u32(%,%)" step (rewrite "add_u32__eq")))
   (repeat (safe-match -3 "L_mul_u32(%,%)" step (rewrite "mul_u32__eq")))
   (repeat (safe-match -3 "lsr(%,%)" step (rewrite "lsr_u32__eq")))
   (repeat (safe-match -3 "L_sub_u32(%,%)" step (rewrite "sub_u32__eq")))
   (repeat (safe-match -3 "L_mod_u32(%,%)" step (rewrite "mod_u32__eq")))
   (repeat (safe-match -3 "L_div_u32(%,%)" step (rewrite "div_u32__eq")))
   (repeat (safe-match -3 "minus(%,%)" step (rewrite "minus_1_ui")))
   (repeat (safe-match -3 "L_local_zone(%,%,%)" step (rewrite "local_zone__eq")))
   (replace -2 :dir rl :hide? t)
   (replace -2 :dir rl :hide? t)
   (assert)
   (lift-if +)
   (spread (split +)
	   ((then (flatten) (lift-if +)
		  (spread (split +) ((propax) (then (flatten) (assert)))))
	    (then (flatten) (lift-if +)
		  (spread (split +) ((then (flatten) (assert)) (propax)))))))
  "Prove equivalence between acsl declarations and PVS functions (CPR@cpr_int)"
  "Proving...")

(handler-case (/ 3 0)
  (error (c)
    (format t "We caught a condition.~&")
    (values 0 c)))

(defstep safe-match (&rest spec-items)
  (let ((step (handler-case (apply #'match-syntax-step spec-items)
		(error (c) '(skip)))))
    step)

  "[Manip] Try matching syntax patterns against formulas in the sequent.
Each pattern can be of the form <patt> or ([fnums] <patt> [occur]), where
<patt> can be either a symbol or a string \"patt\".  Successful matches
can bind subexpressions to pattern variables (identifiers having a leading
'%').  Use these variables to instantiate template expressions and affect
the sequent.  Actions are specified using a symbol, where the choices
include 'rep' (replace first matched instance with template), 'case' (use
case splitting on expressions), a binary relation symbol (split on case
<instance> <op> <template>), 'step' (invoke template as a proof step or
strategy), and a symbol <rule> (invoke <rule> on templates).  Proof steps
for all cases can be provided. See the Manip user's guide for a full
description of all features."
  "~%Matching syntax in formulas and using instantiated templates")

(defstep prove-local_decoding__eq ()
  (then
   (auto-rewrite "closest_mult_div_shift_j"
		 "mod_u32_j"
		 "add_u32_j"
		 "lsr_u32_j"
		 "mul_u32_j"
		 "sub_u32_j"
		 "div_u32_j"
		 "mod__eq"
		 "mod_lt_nat"
		 "unsinged_int__65536_j"
		 "unsinged_int__131072_j"
		 "local_zone__uint32__j"
		 "real_expt_int_rew")
   (skeep :preds? t)
   (safe-match - "nb=%1" step (label "nb_def" $1n))
   (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
   (invoke (expand "%1" -1) (! -1 1 0))
   (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil) (! 1 2))
   (invoke (expand "%1" -1) (! -1 1 0))
   (expand "closest_div_mult")
   (use "Q_nb_def")
   (replace -1 :dir rl)
   (replace "nb_def")
   (assert)
   (repeat (safe-match - "2^%1" step (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
   (repeat (safe-match - "exponentiation.^(2,%1)" step (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
   (rewrite "local_zone__eq")
   (safe-match - "local_zone(%1, %2, %3)" step (let((fname (freshname "cpr")))
					    (name-replace fname "local_zone(%1, %2, %3)")))
   (branch
    (acsl-to-cpr -3)
    ((then	(repeat(safe-match "times(4,%{name_})" step (rewrite "times_4_ui")))
		(repeat(safe-match "minus(%,1)" step (rewrite "minus_1_ui")))
		(replace -2 :dir rl :hide? t)
		(replace -2 :dir rl :hide? t)
		(assert)
		
		
		(lift-if +)
		(spread (split +)
			((then (flatten) (lift-if +)
			       (branch (split +) ((then (flatten) (assert)))))
			 (then (flatten) (lift-if +)
			       (branch (split +) ((then (flatten) (assert))))))))
     (then (repeat(safe-match "times(4,%{name_})" step (rewrite "times_4_ui")))
	   (assert)
	   (eval-formula)
	   (hide-all-but 1)
	   (grind)))))
  "Prove equivalence between local_decoding acsl declaration and its corresponding PVS function (CPR@cpr_int)."
  "Proving equivalence...")

(defstep prove-global_zone_eq ()
  (then
   (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
		 "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
		 "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
		 "unsinged_int__131072_j" "local_zone__uint32__j" "real_expt_int_rew")
   (skeep :preds? t)
   (safe-match - "nb=%1" step (label "nb_def" $1n))
   (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
   (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil) (! 1 2))
   (invoke (expand "%1" -1) (! -1 1 0))
   (use "Q_nb_def")
   (replace -1 :dir rl)
   (replace "nb_def")
   (assert)
   (repeat (safe-match - "2^%1" step (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
   (repeat (safe-match - "exponentiation.^(2,%1)" step (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
   (repeat
    (safe-match - "min(%1,%2)" step
	   (then (eval-expr "min(%1,%2)") (replace -1 :hide? t))))
   (lift-if -2)
   (spread
    (split -2)
    ((then
      (lemma "Q_global_zone__def_0")
      (safe-match - "L_global_zone(nz, %2, %3, %4)" step
	     (inst -1 "%2" "%3" "%4"))
      (assert)
      (flatten)
      (assert))
     (then
      (flatten)
      (lemma "Q_global_zone__def_1")
      (safe-match - "L_global_zone(nz, %2, %3, %4)" step
	     (inst -1 "nz" "%2" "%3" "%4"))
      (assert)
      (branch
       (split -1)
       ((then
	 (branch (acsl-to-cpr -1)
		 ((then
		   (repeat (safe-match -1 "minus(%,1)" step (rewrite "minus_1_ui")))
		   (repeat (safe-match -1 "minus(%,i)" step (rewrite "minus_i_ui")))
		   (replace -2 :dir rl :hide? t) (replace -3 :dir rl :hide? t)
		   (assert)))))
	(assert)))))))
  "Prove equivalence between global_zone acsl declaration and its corresponding PVS function (CPR@cpr_int)."
  "Proving equivalence...")

(defstep prove-global_decoding__eq ()
  (then
   (auto-rewrite "closest_mult_div_shift_j" "mod_u32_j" "add_u32_j"
		 "lsr_u32_j" "mul_u32_j" "sub_u32_j" "div_u32_j"
		 "mod__eq" "mod_lt_nat" "unsinged_int__65536_j"
		 "unsinged_int__131072_j" "local_zone__uint32__j" "real_expt_int_rew")
   (skeep :preds? t)
   (safe-match - "nb=%1" step (label "nb_def" $1n))
   (invoke (name-replace "fun1" "%1" :hide? nil) (! 1 1))
   (invoke (expand "%1" -1) (! -1 1 0))
   (invoke (name-replace "fun2" "CPR@cpr_int.%1" :hide? nil) (! 1 2))
   (invoke (expand "%1" -1) (! -1 1 0))
   (expand "closest_div_mult")
   (use "Q_nb_def")
   (replace -1 :dir rl)
   (replace "nb_def")
   (assert)
   (branch
    (split -12)
    ((then
      (assert)
      (rewrite "global_zone__eq")
      (let ((newname (freshname "cpr")))
	(name-replace newname "global_zone (nz, mes0, mes1, i)"))
			 (repeat
			  (safe-match - "2^%1" step
				 (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
			 (repeat
			  (safe-match - "exponentiation.^(2,%1)" step
				 (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
      (branch (acsl-to-cpr -4)
	      ((then
	        (repeat(safe-match (-4 "minus(%,1)") step (rewrite "minus_1_ui")))
		(repeat(safe-match (-4 "minus(%,i)") step (rewrite "minus_i_ui")))
		(repeat (safe-match
		 (-4 "times(4,%)")
		 step (branch
		       (rewrite "times_4_ui")
		       ((skip)
			(then
			 (assert)
			 (repeat
			  (safe-match - "2^%1" step
				 (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
			 (repeat
			  (safe-match - "exponentiation.^(2,%1)" step
				 (then (eval-expr "exponentiation.^(2,%1)") (replace -1 :hide? t))))
			 (expand "max" 1)
			 (lift-if 1)
			 (branch
			  (split 1)
			  ((then (flatten) (assert)))))))))
		(assert)
		(spread
		 (case "max(1, nz - i) = max(nz - i, 1)")
		 ((then (lift-if)
			(spread (split)
				((then (flatten) (lift-if)
				       (branch (split) ((then (flatten) (assert)))))
				 (then (flatten) (lift-if)
				       (branch (split) ((then (flatten) (assert))))))))
		  (then (hide-all-but 1)(grind)))))
	       (then
		(safe-match 1 "minus(%,i)" step (rewrite "minus_i_ui"))
		(branch (safe-match (1 "times(4,%)") step (rewrite "times_4_ui"))
			((then (assert))
			 (then
			  (expand "max")
			  (lift-if 1)
			  (split 1)
			  (("1" (flatten) (assert)) ("2" (flatten) (assert))))))
		(eval-formula)
		(hide-all-but 1)
		(grind))))))))
  "Prove equivalence between global_decoding acsl declaration and its corresponding PVS function (CPR@cpr_int)."
  "Proving equivalence...")

;;
;; 2. Proofs for the verification conditions
;;

(defstep prove-vc ()
  (let ((old--suppress-manip-messages *suppress-manip-messages*)
	(dummy (format t "Proving verification condition...~%"))
	(dummy (setq *suppress-manip-messages* t))
	(theory-id     (id(theory-name(context *ps*))))
	(obligation-id (id(declaration(context *ps*))))
	(step          (list (intern(format nil "~a_~a" theory-id obligation-id)))))
    (then
     step
     (let ((dummy (setq *suppress-manip-messages* old--suppress-manip-messages)))
       (skip))))
  "Prove a verification condition (from Frama-C/WP-PVS) accordingly to the name of the theory."
  "Done")

(defhelper global_decode_post_goal ()
  (then (beta) (skeep)
  (spread (split -17)
   ((then (flatten) (replace -2 :hide? t) (expand "L_global_decode")
     (spread (split -17)
      ((then (flatten)
        (safe-match 1 " %% = IF %1 THEN %% ELSE %% ENDIF" step
               (branch (case "%1")
                ((skip)
                 (then (hide 2) (acsl-to-c 1) (assert) (expand "max")
                  (lift-if 1)
                  (branch (split 1) ((then (flatten) (assert))))))))
        (assert)
        (branch (split -)
         ((then (flatten) (replace -1 :dir rl)
           (replace -2 :dir rl :hide? t)
           (safe-match "L_global_zone(%1, %2, %3, %4)" step
                  (let ((name (freshname "cpr")))
                    (name-replace name
                     "L_global_zone(%1, %2, %3, %4)")))
           (acsl-to-c 1) (assert))
          (then (flatten) (assert) (replace -1 :hide? t)
           (branch (case "i_5=1")
            ((then (replace -1 :hide? t)
              (safe-match "L_global_zone(%1, %2, %3, %4)" step
                     (let ((name (freshname "cpr")))
                       (name-replace name
                        "L_global_zone(%1, %2, %3, %4)")))
              (acsl-to-c 2) (assert))
             (assert)))))))
       (then (flatten)
        (safe-match 2 " %% = IF %1 THEN %% ELSE %% ENDIF" step
               (branch (case "%1")
                ((skip)
                 (then (hide 3) (acsl-to-c 1) (assert) (expand "max")
                  (lift-if 1)
                  (branch (split 1) ((then (flatten) (assert))))))))
        (assert)
        (spread (split -)
         ((then (flatten) (replace -1 :dir rl)
           (replace -2 :dir rl :hide? t)
           (safe-match "L_global_zone(%1, %2, %3, %4)" step
                  (let ((name (freshname "cpr")))
                    (name-replace name
                     "L_global_zone(%1, %2, %3, %4)")))
           (acsl-to-c 2) (assert))
          (then (flatten) (assert) (replace -1 :hide? t)
           (spread (case "i_5=1")
            ((then (replace -1 :hide? t)
              (safe-match "L_global_zone(%1, %2, %3, %4)" step
                     (let ((name (freshname "cpr")))
                       (name-replace name
                        "L_global_zone(%1, %2, %3, %4)")))
              (acsl-to-c 3) (assert))
             (assert))))))))))
    (then (flatten) (assert) (replace -1 :hide? t)
     (expand "L_global_decode")
     (spread (split -16)
      ((then (flatten)
        (spread (split -)
         ((then (flatten) (replace -1 :dir rl)
           (replace -2 :hide? t :dir rl)
           (safe-match "L_sub_u32(%1, 0)" step
                  (branch (case "L_sub_u32(%1, 0)=%1")
                   ((replace -1 :hide? t)
                    (then (rewrite "sub_u32_def" 1)
                     (rewrite "to_uint32_id" 1) (assert)))))
           (safe-match "max(1, %1{name_})" step
                  (spread (case "max(1, %1) = %1")
                   ((replace -1 :hide? t)
                    (then (expand "max" 1) (lift-if 1)
                     (branch (split 1) ((then (flatten) (assert))))))))
           (safe-match "L_global_zone(%1, %2, %3, %4)" step
                  (let ((name (freshname "cpr")))
                    (name-replace name
                     "L_global_zone(%1, %2, %3, %4)")))
           (assert)
           (safe-match "%1{name_} = to_uint32(%2{name_})" step
                  (then (rewrite "to_uint32_id" $1n) (replace $1n)))
           (safe-match 2 " %% = IF %1 THEN %% ELSE %% ENDIF" step
                  (branch (case "NOT %1")
                   ((skip)
                    (then (hide 2) (acsl-to-c -1) (assert)
                     (expand "max") (lift-if -1)
                     (branch (split -1) ((then (flatten) (assert))))))))
           (assert)
           (branch (acsl-to-c 3)
            ((assert)
             (then (eval-formula)
              (then (repeat (rewrite "to_uint32_id")) (assert))))))
          (then (flatten) (replace -1 :hide? t)
           (spread (case "i_5=1")
            ((then (replace -1 :hide? t)
              (safe-match "max(1, L_sub_u32(%1{name_}, 1))" step
                     (spread
                      (case "max(1, L_sub_u32(%1, 1)) = L_sub_u32(%1, 1)")
                      ((replace -1 :hide? t)
                       (then (rewrite "sub_u32_def" 1) (expand "max" 1)
                        (lift-if 1)
                        (branch (split 1)
                         ((then (flatten) (assert))))))))
              (assert)
              (safe-match "L_global_zone(%1, %2, %3, %4)" step
                     (let ((name (freshname "cpr")))
                       (name-replace name
                        "L_global_zone(%1, %2, %3, %4)")))
              (branch
               (safe-match 3 " %% = IF %1 THEN %% ELSE %% ENDIF" step
                      (branch (case "NOT %1")
                       ((assert) (then (acsl-to-c -1)))))
               ((branch (acsl-to-c 4)
                 ((assert)
                  (then (eval-formula)
                   (then (repeat (rewrite "to_uint32_id")) (assert)))))
                (safe-match "^%1{name_} = %2$" step
                       (replace $1n :hide? t)))))
             (assert)))))))
       (then (flatten) (replace -1 :dir rl)
        (spread (split -)
         ((then (flatten) (replace -1 :dir rl)
           (replace -2 :hide? t :dir rl)
           (safe-match "L_sub_u32(%1, 0)" step
                  (branch (case "L_sub_u32(%1, 0)=%1")
                   ((replace -1 :hide? t)
                    (then (rewrite "sub_u32_def" 1)
                     (rewrite "to_uint32_id" 1) (assert)))))
           (safe-match "max(1, %1{name_})" step
                  (spread (case "max(1, %1) = %1")
                   ((replace -1 :hide? t)
                    (then (expand "max" 1) (lift-if 1)
                     (branch (split 1) ((then (flatten) (assert))))))))
           (safe-match "L_global_zone(%1, %2, %3, %4)" step
                  (let ((name (freshname "cpr")))
                    (name-replace name
                     "L_global_zone(%1, %2, %3, %4)")))
           (assert)
           (safe-match 3 " %% = IF %1 THEN %% ELSE %% ENDIF" step
                  (branch (case "NOT %1")
                   ((skip)
                    (then (hide 2) (acsl-to-c -1) (assert)
                     (expand "max") (lift-if -1)
                     (branch (split -1)
                      ((then (flatten) (rewrite "to_uint32_id" -1)
                        (assert))))))))
           (assert) (rewrite "to_uint32_id" 2))
          (then (flatten) (replace -1 :dir rl)
           (spread (case "i_5=1")
            ((then (replace -1 :hide? t)
              (safe-match "0 < to_uint32(%1{name_} - 1)" step
                     (branch (case "%1 = 1")
                      ((then (replace -1 :hide? t) (skip))
                       (then
                        (let ((newfnum (+ $1n 1)))
                          (rewrite "to_uint32_id" newfnum))
                        (assert)))))
              (safe-match "max(1, L_sub_u32(1, 1))" step
                     (then (eval-expr "max(1, L_sub_u32(1, 1))")
                      (replace -1 :hide? t)))
              (safe-match "L_mul_u32(4, 1)" step
                     (then (eval-expr "L_mul_u32(4, 1)")
                      (replace -1 :hide? t)))
              (assert)
              (safe-match "to_uint32(%1{number})" step
                     (then (eval-expr "to_uint32(%1)")
                      (replace -1 :hide? t)))
              (safe-match "L_global_zone(%1, %2, %3, %4)" step
                     (let ((name (freshname "cpr")))
                       (name-replace name
                        "L_global_zone(%1, %2, %3, %4)")))
              (spread (acsl-to-c 4)
               ((assert) (eval-formula) (eval-formula) (eval-formula)
                (eval-formula))))
             (assert)))))))))))))
 "Proves the global_decode_post.goal lemma."
 "Proving goal...")

(defhelper encoding_post_goal ()
 (then (skeep*) (beta) (flatten) (expand "L_encoding") (use "Q_nb_def")
  (assert) (replace -1 :dir rl) (assert)
  (grind :exclude ("^" "mod" "expt" "L_mul_u32" "L_add_u32" "L_shr_u32")
   :rewrites
   ("add_u32_def"
    "mul_u32_def"
    "shr_u32_def"
    "sub_u32_def"
    "mod_lt_nat")))
 "Proves the encoding_post.goal lemma."
 "Proving goal...")

(defhelper global_decode_post_goal_TCC1 ()
 (then (skeep* :preds? t)
  (deftactic replace_by_def (name)
   (let ((match-pattern (format nil "~a = %1" name)))
     (safe-match match-pattern step (replace $1n :hide? t))))
  (safe-match 1 "1 = %1{name_}" step (replace_by_def "%1"))
  (spread (split -18)
   ((then (assert) (replace -1 :hide? t) (replace -17 :hide? t)
     (rewrite "to_uint32_id" -) (rewrite "to_uint32_id" -) (assert))
    (then (assert) (replace -18 :dir rl :hide? t) (assert)
     (rewrite "to_uint32_id" -) (assert)))))
 "Proves the global_decode_post.goal_TCC1 obligation."
 "Proving goal...")

(defhelper local_decode_post_goal_TCC1 ()
 (subtype-tcc)
 "Proves the local_decode_post.goal_TCC1 obligation."
 "Proving goal...")

(defhelper rlat_int_post_goal_TCC1 ()
 (subtype-tcc)
 "Proves the rlat_int_post.goal_TCC1 obligation."
 "Proving goal...")

(defhelper global_zone_post_goal_TCC1 ()
 (subtype-tcc)
 "Proves the global_zone_post.goal_TCC1 obligation."
 "Proving goal...")

(defhelper nl_awb_post_goal ()
 (then (skeep) (beta) (flatten)
  (spread (split -5)
   ((then (flatten) (replace -2 + :hide? r) (expand "L_nl_awb")
     (assert))
    (then (flatten) (expand "L_nl_awb") (assert) (expand "to_uint32")
     (expand "L_inv_u32")
     (spread (case "i_1 = 0 OR i_1 = max_uint32")
      ((grind)
       (then (flatten) (rewrite "mod_neg") (lift-if -1)
        (spread (split -1)
         ((then (flatten)
           (spread
            (case "forall(m:int): 0 <= m AND m <=1 IMPLIES (m=0 OR m=1)")
            ((then (inst -1 "i_1 / max_uint32")
              (spread (split -1) ((assert) (assert) (assert) (assert))))
             (then (hide-all-but 1) (grind)))))
          (then (flatten) (assert) (expand "to_uint32")
           (rewrite "mod_lt_nat" -1) (rewrite "mod_lt_nat" 5)))))))))))  
  "Proves the nl_awb_post.goal lemma." "Proving goal...")

(defhelper nl_awb_nn_post_goal ()
  (grind)
  "Proves the nl_awb_nn_post.goal lemma."
  "Proving goal...")

(defhelper nl_awb_call_nl_awb_nn_pre_goal ()
  (grind)
  "Proves the nl_awb_call_nl_awb_nn_pre.goal lemma."
  "Proving goal...")

(defhelper nl_awb_call_nl_awb_nn_pre_2_goal ()
  (then
   (skeep) (expand "to_uint32") (expand "max_uint32")
   (rewrite "mod_neg") (lift-if 1)
   (spread
    (split 1)
    ((then (flatten) (grind))
     (then
      (flatten)
      (spread
       (rewrite "mod_lt_nat")
       ((then (both-sides "+" "2147483648" -2) (assert)) (grind)))))))
  "Proves the nl_awb_call_nl_awb_nn_pre_2.goal lemma."
  "Proving goal...")

(defhelper local_zone_post_goal ()
  (then
   (skeep*) (beta) (flatten)
   (grind :exclude ("^" "mod" "expt" "L_mul_u32" "L_add_u32" "L_shr_u32")
	  :rewrites
	  ("add_u32_def"
	   "mul_u32_def"
	   "shr_u32_def"
	   "sub_u32_def"
	   "mod_lt_nat")))
  "Proves the nl_awb_call_nl_awb_nn_pre_2.goal lemma."
  "Proving goal...")

(defhelper local_decode_post_goal ()
  (then
   (skeep*) (beta) (flatten) (expand "L_local_decode") (assert)
   (spread
    (split -)
    ((then
      (flatten) (assert) (replace -1 :hide? t :dir rl)
      (safe-match 1 "L_local_zone(%1, %2, %3)" step
	     (let ((name (freshname "cpr")))
	       (name-replace name "L_local_zone(%1, %2, %3)")))
      (branch (acsl-to-c 1) ((assert))))
     (then
      (flatten) (assert)
      (safe-match "L_local_zone(%1, %2, %3)" step
	     (let ((name (freshname "cpr")))
	       (name-replace name "L_local_zone(%1, %2, %3)")))
      (branch
       (acsl-to-c 2)
       ((then
	 (assert) (eval-formula) (rewrite "to_uint32_id") (assert))))))))
  "Proves the local_decode_post.goal lemma."
  "Proving goal...")

(defhelper rlat_int_post_goal ()
  (then
   (skeep) (beta) (flatten) (expand "L_rlat_int") (lift-if 1)
   (spread
    (case "NOT 0 = to_uint32(60 - i_1)")
    ((then
      (assert) (hide 1)
      (spread
       (split 1)
       ((then
	 (flatten) (assert) (replace -7 :dir rl)
	 (spread
	  (split -8)
	  ((then (flatten) (eval-formula -1))
	   (then
	    (flatten)
	    (spread
	     (case "to_uint32(60) = 60")
	     ((then
	       (replace -1 :hide? t)
	       (safe-match "L_closest_mult_div_shift(%1, %2)" step
		      (let ((name (freshname "cpr")))
			(name-replace name "L_closest_mult_div_shift(%1, %2)")))
	       (spread (acsl-to-c 2)
		       ((eval-formula) (eval-formula) (eval-formula) (eval-formula))))
	      (eval-formula)))))))
	(then
	 (flatten) (assert) (replace -8 :dir rl :hide? t)
	 (replace -6 :dir rl)
	 (spread
	  (case "to_uint32(59) = 59")
	  ((then
	    (assert)
	    (safe-match "L_closest_mult_div_shift(%1, %2)" step
		   (let ((name (freshname "cpr")))
		     (name-replace name "L_closest_mult_div_shift(%1, %2)")))
	    (spread
	     (acsl-to-c 2)
	     ((assert) (eval-formula) (assert) (assert))))
	   (eval-formula)))))))
     (grind :exclude
	    ("L_closest_mult_div_shift"
	     "lsr"
	     "div"
	     "^"
	     "mod"
	     "expt"
	     "L_mul_u32"
	     "L_add_u32"
	     "L_shr_u32"
	     "L_div_u32")
	    :rewrites
	    ("add_u32_def"
	     "mul_u32_def"
	     "shr_u32_def"
	     "sub_u32_def"
	     "mod_lt_nat"
	     "floor_int"
	     "mod_int"
	     "div_u32_def")))))
  "Proves the rlat_int_post.goal lemma."
  "Proving goal...")

(defhelper global_zone_post_goal ()
  (then
   (beta) (skeep)
   (spread
    (split -)
    ((then
      (flatten) (replace -2 + :hide? t) (use "Q_global_zone__def_1")
      (beta)
      (spread
       (split -1)
       ((then
	 (replace -1 :hide? t)
	 (spread
	  (rewrite "mod_u32_prop")
	  ((grind :exclude
		  ("^" "mod" "expt" "L_mul_u32" "L_add_u32" "L_shr_u32")
		  :rewrites
		  ("add_u32_def"
		   "mul_u32_def"
		   "shr_u32_def"
		   "sub_u32_def"
		   "mod_lt_nat"
		   "Q_global_zone__def_0"
		   "Q_global_zone__def_1"))
	   (grind) (then (rewrite "lsr_u32_def" 1) (assert)))))
	(propax) (propax) (propax) (propax))))
     (then (flatten)
	   (spread (case "i=1")
		   ((then (replace -1 :hide? t) (lemma "Q_global_zone__def_0")
			  (inst? -1 :where +)
			  (spread (split -1) ((assert) (propax) (propax))))
		    (assert)))))))
  "Proves the global_zone_post.goal lemma."
  "Proving goal...")

(defhelper north_lat_post_goal ()
  (then
   (beta) (skeep) (beta) (flatten)
   (spread
    (split -11)
    ((then (flatten) (expand "P_north_lat") (assert) (flatten)
	   (rewrite "sub_u32_def"))
     (then (flatten)
	   (spread (split -1)
		   ((then (flatten) (assert) (expand "P_north_lat") (flatten)
			  (rewrite "sub_u32_def"))
		    (then (flatten) (assert) (expand "P_north_lat")
			  (rewrite "sub_u32_def") (assert))))))))
  "Proves the north_lat_post.goal lemma."
  "Proving goal...")

(defhelper closest_mult_div_shift_post_goal ()
  (grind :exclude
	 ("lsr" "div" "^" "mod" "expt" "L_mul_u32" "L_add_u32" "L_shr_u32")
	 :rewrites
	 ("add_u32_def"
	  "mul_u32_def"
	  "shr_u32_def"
	  "sub_u32_def"
	  "mod_lt_nat"
	  "floor_int"
	  "mod_int"))
  "Proves the closest_mult_div_shift_post.goal lemma."
  "Proving goal...")

;;
;; 3. Utilities
;;

;; Many of the proofs in this formalization are based on the equivalence between
;; given functions: the original PVS definitions and their counterparts given by
;; the translation produced by Frama-C/WP of the annotated C code. This translation,
;; which result is expressed in PVS as well, define its own declarations for the
;; ACSL definitions and the C code.
;;
;; In order to deal with this kind of proofs, the TRANSLATE-FUNS helpers provide
;; a mechanism for translating expressions built using a set of functions (ACSL,
;; for example) into an expression formed by the application of the corresponding
;; declarations (in the original specification). These strategies use databases 
;; that store, for every function of interest, the name of the function, the (name
;; of the) lemma stating its correspondence, and the (form of the) translated
;; expression.
;;
;; For example, the expression L_sub_u32(0, 1) can be translated to CPR@uint32.minus(0,1)
;; thanks to the lemma "acsl_logic_defs_eq.sub_u32__eq".
;;
;; The intended entry points are:
;; - ACSL-TO-CPR
;; - ACSL-TO-C
;;
;; CAVEATS:
;; - these strategies assumes that the functions are binary and that the variables
;; representing such arguments in the equivalence lemmas are named "a" and "b".

(defhelper acsl-to-cpr (fnum)
  (let ((*suppress-manip-messages* t))
    (translate-funs$ fnum acsl-cpr-info))
  "Translate ACSL expressions to CPR@uint32.unsigned_int expressions."
  "Translating ACSL expressions to CPR expressions.")

(defhelper acsl-to-c (fnum)
  (let ((*suppress-manip-messages* t))
    (translate-funs$ fnum acsl-c-info :hiding-lhs? t))
  "Translate ACSL expressions to C expressions."
  "Translating ACSL expressions to C expressions.")

;; Specialized databases.
(defconstant acsl-cpr-info
  '( ("L_sub_u32"  "sub_u32__eq" "minus(~a,~a)")
     ("L_mul_u32"  "mul_u32__eq" "times(~a,~a)")
     ("L_shr_u32"  "shr_u32__eq" "div_shift(~a,~a)")
     ("lsr"        "lsr_u32__eq" "div_shift(~a,~a)")
     ("L_mod_u32"  "mod_u32__eq" "mod_uint(~a,~a)")
     ("L_div_u32"  "div_u32__eq" "uint32.div(~a,~a)")
     ("L_add_u32"  "add_u32__eq" "plus(~a,~a)")))

(defconstant acsl-c-info
  '( ("L_add_u32" "add_u32_def" "to_uint32(~a + ~a)")
     ("L_sub_u32" "sub_u32_def" "to_uint32(~a - ~a)")
     ("L_mul_u32" "mul_u32_def" "to_uint32(~a * ~a)")
     ("L_div_u32" "div_u32_def" "to_uint32(div(~a,~a))")
     ("L_mod_u32" "mod_u32_def" "to_uint32(mod(~a,~a))")
     ("L_lsr_u32" "lsr"         "to_uint32(lsr(~a,~a))")
     ("L_shr_u32" "shr_u32_def" "lsr(~a,~a)") ))

;; Lookup database
(defun get-cpr-info (acsl-name fun-lemmas-db)
  (loop for data in fun-lemmas-db
	when (string= (car data) acsl-name)
	return data ))

;; Projections for the stored information
(defmacro get-lemma-name (cpr-info) `(cadr ,cpr-info))
(defmacro get-cpr-fun-template (cpr-info) `(caddr ,cpr-info))

(defvar new-names nil)

(defhelper encapsulate-app (fnum acsl-fun arg1 arg2 arg3 arg4)
  (let ((newname (freshname "arg"))
	(subexpr (format nil "~a(~a,~a,~a,~a)" acsl-fun arg1 arg2 arg3 arg4)))
    (then (name-replace newname subexpr)
	  (let ((d(setq new-names (cons newname new-names))))
	    (skip))))
  ""
  "")

(defhelper translate-fun (fnum acsl-fun arg1 arg2 fun-lemmas-db)
  (let ((cpr-info (get-cpr-info acsl-fun fun-lemmas-db)))
    (if (and cpr-info (listp cpr-info))
	(let ((lemma-name (get-lemma-name cpr-info)))
	  (then
	   (rewrite lemma-name fnum ("a" arg1 "b" arg2))
	   (let ((newname (freshname "arg"))
		 (cpr-fun-template (get-cpr-fun-template cpr-info))
		 (subexpr (format nil cpr-fun-template arg1 arg2)))
	     (then (name-replace newname subexpr)
		   (let ((d(setq new-names (cons newname new-names))))
		     (skip))))))
      (let ((newname (freshname "arg"))
	    (subexpr (format nil "~a(~a,~a)" acsl-fun arg1 arg2)))
	(then (name-replace newname subexpr)
	      (let ((d(setq new-names (cons newname new-names))))
		(skip))))))
  "Translate the application of the function ACSL-FUN to the arguments ARG1 and ARG2 in FNUM as stated by FUN-LEMMAS-DB."
  "Translating expressions in ~a.")

(defhelper translate-funs (fnum fun-lemmas-db &optional hiding-lhs?)
  (let ((d(setq new-names nil)))
    (then
     (if hiding-lhs?
	 (safe-match fnum "%1=%2"
		    step (let ((newname (freshname "arg"))
			       (d(setq new-names (cons newname new-names))))
			   (name-replace newname "%1")))
       (skip))
     (repeat (safe-match fnum "%1{number}"
		    step (let ((newname (freshname "arg"))
			       (d(setq new-names (cons newname new-names))))
			   (name-replace newname "%1"))))
     (repeat
      (safe-match
       fnum "%3{name_}(%1{name_},%2{name_},%4{name_},%5{name_})"
       step (encapsulate-app fnum "%3" "%1" "%2" "%4" "%5")))
     (repeat
      (safe-match
       fnum "%3{name_}(%1{name_},%2{name_})"
       step (let ((fun-lemmas-db
		   ;;!DEV This symbol-value is here because match does not seem to work well
		   ;; with s-forms like (let ((name '(("string" "string") ...
		   (symbol-value fun-lemmas-db)))
	      (translate-fun fnum "%3" "%1" "%2" fun-lemmas-db))))
       (apply-for-each$ name new-names (expand name :assert? none))))
  "Translate every apparition of a function name in FNUM as stated by FUN-LEMMAS-DB."
  "Translating expressions in ~a.")

(defhelper apply-for-each (name exprs steps)
  (let((exprs (if (symbolp exprs) (symbol-value exprs) exprs)))
    (if (and exprs (listp exprs))
      (let ((run-me `(let ((,name ,(car exprs)))
		       ,steps))
	    (clos-tail (cdr exprs)))
	(then run-me (apply-for-each$ name clos-tail steps)))
      (skip)))
  "Apply the provided STEPS once for each expression in EXPRS binding them to NAME."
  "Applying steps...")

