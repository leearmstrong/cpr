(interface
 (add_u32_def 0
  (add_u32_def-1 nil 3770197411 ("" (grind) nil nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (to_uint32 const-decl "(is_uint32)" cint "framac_wp/")
    (L_add_u32 const-decl "int" A_uint32_operations nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (sub_u32_def 0
  (sub_u32_def-1 nil 3770197442 ("" (grind) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (to_uint32 const-decl "(is_uint32)" cint "framac_wp/")
    (L_sub_u32 const-decl "int" A_uint32_operations nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
   shostak))
 (mul_u32_def 0
  (mul_u32_def-1 nil 3770197442 ("" (grind) nil nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (L_mul_u32 const-decl "int" A_uint32_operations nil)
    (to_uint32 const-decl "(is_uint32)" cint "framac_wp/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil))
   shostak))
 (div_u32_def_TCC1 0
  (div_u32_def_TCC1-1 nil 3770231285 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (is_uint32 const-decl "bool" cint "framac_wp/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (div_u32_def 0
  (div_u32_def-1 nil 3770231697
   ("" (skeep :preds? t)
    (("" (expand "L_div_u32")
      (("" (assert)
        (("" (expand "to_uint32")
          (("" (case "div(a,b)=0")
            (("1" (replace -1 :hide? t) (("1" (grind) nil nil)) nil)
             ("2" (lemma "mod_lt_nat")
              (("2" (inst? -1 :where +)
                (("1" (split -1)
                  (("1" (replace -1 :hide? t)
                    (("1" (rewrite "div_nat")
                      (("1" (lemma "floor_int")
                        (("1" (inst? -1 :where +) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "is_uint32")
                    (("2" (flatten)
                      (("2" (case "div(a,b) = div_nat.div(a,b)")
                        (("1" (replace -1 :hide? t)
                          (("1" (typepred "div_nat.div(a, b)")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (rewrite "div_nat")
                          (("2" (expand "div") (("2" (propax) nil nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil) ("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "is_uint32")
                  (("2" (flatten)
                    (("2" (lemma "div_ge_0")
                      (("2" (inst?)
                        (("2" (flatten)
                          (("2" (hide -2)
                            (("2" (expand "sgn")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (eval-formula) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((L_div_u32 const-decl "int" A_uint32_operations nil)
    (to_uint32 const-decl "(is_uint32)" cint "framac_wp/")
    (mod_lt_nat formula-decl nil mod nil)
    (div_ge_0 formula-decl nil div "ints/")
    (sgn const-decl "int" real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_nat formula-decl nil div "ints/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (floor_int formula-decl nil floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div const-decl "upto(n)" div_nat "ints/")
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (b skolem-const-decl "(is_uint32)" interface nil)
    (a skolem-const-decl "(is_uint32)" interface nil)
    (>= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nil application-judgement "below(m)" mod nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (div const-decl "integer" div "ints/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_uint32 const-decl "bool" cint "framac_wp/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (mod_u32_def 0
  (mod_u32_def-1 nil 3771407367
   ("" (skeep :preds? t)
    (("" (expand "L_mod_u32")
      (("" (assert)
        (("" (expand "to_uint32")
          (("" (expand "is_uint32")
            (("" (flatten)
              (("" (lemma "mod_pos")
                (("" (inst -1 "a" "b")
                  (("1" (flatten)
                    (("1" (use "mod_lt_nat") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((L_mod_u32 const-decl "int" A_uint32_operations nil)
    (to_uint32 const-decl "(is_uint32)" cint "framac_wp/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (b skolem-const-decl "(is_uint32)" interface nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mod_lt_nat formula-decl nil mod nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (a skolem-const-decl "(is_uint32)" interface nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (mod_pos formula-decl nil mod nil)
    (is_uint32 const-decl "bool" cint "framac_wp/"))
   shostak))
 (lsr_u32_def 0
  (lsr_u32_def-1 nil 3771407380
   ("" (skeep)
    (("" (expand "lsr")
      (("" (expand "to_uint32")
        (("" (use "floor_def")
          (("" (typepred "a")
            (("" (expand "is_uint32")
              (("" (flatten)
                (("" (case "a / exponentiation.^(2,n) <4294967296")
                  (("1" (use "mod_lt_nat")
                    (("1" (assert) nil nil)
                     ("2" (case "0<a / exponentiation.^(2,n)")
                      (("1" (assert) nil nil)
                       ("2" (rewrite "pos_div_lt")
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "div_mult_pos_lt1")
                    (("2" (lemma "lt_times_lt_pos1")
                      (("2"
                        (inst -1 "a" "1" "4294967296"
                         "exponentiation.^(2,n)")
                        (("1" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (lemma "both_sides_expt_gt1_le")
                            (("2" (inst -1 "2" "0" "n")
                              (("2"
                                (assert)
                                (("2"
                                  (eval-expr "exponentiation.^(2,0)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (lsr const-decl "int" cmath "framac_wp/")
    (floor_def formula-decl nil floor_ceil nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (is_uint32 const-decl "bool" cint "framac_wp/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (pos_div_lt formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nil application-judgement "below(m)" mod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (a skolem-const-decl "(is_uint32)" interface nil)
    (n skolem-const-decl "nat" interface nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod_lt_nat formula-decl nil mod nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (to_uint32 const-decl "(is_uint32)" cint "framac_wp/"))
   shostak))
 (mod_u32_prop 0
  (mod_u32_prop-1 nil 3770231313
   ("" (skeep :preds? t)
    (("" (expand "to_uint32")
      (("" (lemma "mod_lt_nat")
        (("" (inst -1 "max_uint32" "mod(a,b)")
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (typepred "mod(a,b)")
              (("2" (expand "is_uint32")
                (("2" (flatten) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (lemma "mod_pos")
            (("2" (inst? -1 :where 1)
              (("1" (flatten) nil nil)
               ("2" (expand "is_uint32")
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (eval-formula) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((to_uint32 const-decl "(is_uint32)" cint "framac_wp/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b skolem-const-decl "(is_uint32)" interface nil)
    (a skolem-const-decl "(is_uint32)" interface nil)
    (is_uint32 const-decl "bool" cint "framac_wp/")
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mod_pos formula-decl nil mod nil)
    (mod_lt_nat formula-decl nil mod nil))
   shostak))
 (shr_u32_def 0
  (shr_u32_def-3 "" 3772559920
   ("" (skeep :preds? t)
    (("" (expand "L_shr_u32")
      (("" (expand "lsr")
        (("" (expand "is_uint32")
          (("" (flatten)
            (("" (expand "pow")
              (("" (rewrite "real_expt_int_rew") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (shr_u32_def-2 nil 3772559810
   ("" (skeep :preds? t)
    (("" (expand "L_shr_u32")
      (("" (expand "lsr")
        (("" (expand "to_uint32")
          (("" (expand "is_uint32")
            (("" (flatten)
              (("" (rewrite "mod_lt_nat")
                (("1" (typepred "floor(a/exponentiation.^(2,n))")
                  (("1" (case "a / exponentiation.^(2,n) < 4294967296")
                    (("1" (assert) nil)
                     ("2" (case "n <= exponentiation.^(2,n)")
                      (("1"
                        (name-replace "bla" "exponentiation.^(2,n)")
                        (("1" (grind-reals) nil)))
                       ("2"
                        (case "forall(n:nat): n <= exponentiation.^(2,n)")
                        (("1" (inst?) nil)
                         ("2" (hide-all-but 1)
                          (("2" (induct-and-simplify "n")
                            (("2" (case "1 <= j!1")
                              (("1" (grind-reals) nil)
                               ("2"
                                (case "j!1 = 0")
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1" (assert) nil)))
                                 ("2" (assert) nil)))))))))))))))))
                 ("2" (expand ">=")
                  (("2" (use "floor_def")
                    (("2" (flatten)
                      (("2" (case "0 <= a / exponentiation.^(2,n)")
                        (("1" (assert) nil)
                         ("2" (rewrite "pos_div_le")
                          nil))))))))))))))))))))))
    nil)
   ((L_shr_u32 const-decl "int" A_uint32_operations nil)
    (is_uint32 const-decl "bool" cint "framac_wp/")
    (pow const-decl "real" cmath "framac_wp/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_expt_int_rew formula-decl nil real_expt "power/")
    (lsr const-decl "int" cmath "framac_wp/")
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)
  (shr_u32_def-1 nil 3770197442
   ("" (skeep :preds? t)
    (("" (expand "L_shr_u32")
      (("" (expand "lsr")
        (("" (expand "to_uint32")
          (("" (expand "is_uint32")
            (("" (flatten)
              (("" (rewrite "mod_lt_nat")
                (("1" (typepred "floor(a/2^n)")
                  (("1" (case "a / 2 ^ n < 4294967296")
                    (("1" (assert) nil nil)
                     ("2" (case "n <= 2 ^ n")
                      (("1" (name-replace "bla" "2^n")
                        (("1" (grind-reals) nil nil)) nil)
                       ("2" (case "forall(n:nat): n <= 2^n")
                        (("1" (inst?) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (induct-and-simplify "n")
                            (("2" (case "1 <= j!1")
                              (("1" (grind-reals) nil nil)
                               ("2"
                                (case "j!1 = 0")
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand ">=")
                  (("2" (use "floor_def")
                    (("2" (flatten)
                      (("2" (case "0 <= a / 2 ^ n")
                        (("1" (assert) nil nil)
                         ("2" (rewrite "pos_div_le") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (L_shr_u32 const-decl "int" A_uint32_operations nil)
    (lsr const-decl "int" cmath "framac_wp/"))
   shostak)))

