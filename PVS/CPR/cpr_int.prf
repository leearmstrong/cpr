(cpr_int
 (awb_uint_j 0
  (awb_uint_j-1 nil 3778512800
   ("" (skeep :preds? t)
    (("" (assert)
      (("" (eval-expr "2^32")
        (("" (eval-expr "2^30") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (encoding_TCC1 0
  (encoding_TCC1-1 nil 3735487269
   ("" (skeep)
    (("" (typepred "b")
      (("" (split -2)
        (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
         ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil)
         ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil)
         ("4" (replaces -1) (("4" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   nil))
 (encoding_TCC2 0
  (encoding_TCC2-1 nil 3735487269 ("" (subtype-tcc) nil nil)
   ((posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (times const-decl "unsigned_int" uint32 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (^ const-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil))
 (encoding_TCC3 0
  (encoding_TCC3-1 nil 3735487269
   ("" (skeep)
    (("" (skeep) (("" (skeep) (("" (eval-formula 1) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (rlat_int_TCC1 0
  (rlat_int_TCC1-1 nil 3735487269
   ("" (skeep)
    (("" (case "i=0")
      (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
       ("2" (case "NOT i=1")
        (("1" (assert) nil nil)
         ("2" (replaces -1)
          (("2" (eval-formula 1) (("2" (eval-formula 2) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (rlat_int_TCC2 0
  (rlat_int_TCC2-1 nil 3735487269
   ("" (skeep)
    (("" (typepred "b")
      (("" (split -2)
        (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
         ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil)
         ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil)
         ("4" (replaces -1) (("4" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   nil))
 (rlat_int_TCC3 0
  (rlat_int_TCC3-1 nil 3735487269
   ("" (skeep)
    (("" (case "NOT (i=0 OR i=1)")
      (("1" (assert)
        (("1" (typepred "i")
          (("1" (assert) (("1" (ground) nil nil)) nil)) nil))
        nil)
       ("2" (split -1)
        (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
         ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (rlat_int_TCC4 0
  (rlat_int_TCC4-1 nil 3735487269
   ("" (skeep)
    (("" (typepred "b")
      (("" (hide (-1 -3))
        (("" (split -1)
          (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
           ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil)
           ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil)
           ("4" (replaces -1) (("4" (eval-formula 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (rlat_eq_TCC1 0
  (rlat_eq_TCC1-1 nil 3736089513
   ("" (skeep)
    (("" (typepred "AWB2lat(awb_lat)")
      (("" (lemma "rec_pos_incr")
        ((""
          (case "NOT forall (latt: Latitude): Rlat(i, latt) = recovered_position(360, 60-i,nb)(latt)")
          (("1" (hide -)
            (("1" (hide 2)
              (("1" (skeep)
                (("1" (expand "Rlat")
                  (("1" (expand "recovered_position")
                    (("1" (expand "YZ_pre")
                      (("1" (expand "dl")
                        (("1" (expand "dlat")
                          (("1" (expand "MOD") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst-cp -2 "nb" "60-i" "-90" "AWB2lat(awb_lat)" "360")
            (("2" (assert)
              (("2" (inst-cp -1 "AWB2lat(awb_lat)")
                (("2" (replace -2 :dir rl)
                  (("2" (inst-cp -1 "-90")
                    (("2" (replace -2 :dir rl)
                      (("2"
                        (inst -4 "nb" "60-i" "AWB2lat(awb_lat)" " 90 "
                         "360")
                        (("2" (inst -1 "90")
                          (("2" (replace -1 :dir rl)
                            (("2" (replace -3 :dir rl)
                              (("2"
                                (assert)
                                (("2"
                                  (hide-all-but (-4 -5 1))
                                  (("2"
                                    (name
                                     "rlawb"
                                     "  Rlat(i, AWB2lat(awb_lat))")
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "Rlat")
                                        (("2"
                                          (expand "YZ_pre")
                                          (("2"
                                            (expand "dlat")
                                            (("2"
                                              (expand "MOD")
                                              (("2"
                                                (case "i=0")
                                                (("1"
                                                  (typepred "nb")
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (eval-expr
                                                           (! -2 r))
                                                          (("1"
                                                            (eval-expr
                                                             (! -4 l))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (replaces -2)
                                                        (("2"
                                                          (eval-expr
                                                           (! -2 r))
                                                          (("2"
                                                            (eval-expr
                                                             (! -4 l))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replaces -1)
                                                      (("3"
                                                        (replaces -2)
                                                        (("3"
                                                          (eval-expr
                                                           (! -2 r))
                                                          (("3"
                                                            (eval-expr
                                                             (! -4 l))
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (replaces -1)
                                                      (("4"
                                                        (replaces -2)
                                                        (("4"
                                                          (eval-expr
                                                           (! -2 r))
                                                          (("4"
                                                            (eval-expr
                                                             (! -4 l))
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "NOT i=1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred "nb")
                                                    (("2"
                                                      (split -2)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -2)
                                                          (("1"
                                                            (eval-expr
                                                             (! -2 r))
                                                            (("1"
                                                              (eval-expr
                                                               (!
                                                                -4
                                                                l))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (eval-expr
                                                             (! -2 r))
                                                            (("2"
                                                              (eval-expr
                                                               (!
                                                                -4
                                                                l))
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (replaces -2)
                                                          (("3"
                                                            (eval-expr
                                                             (! -2 r))
                                                            (("3"
                                                              (eval-expr
                                                               (!
                                                                -4
                                                                l))
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (replaces -1)
                                                        (("4"
                                                          (replaces -2)
                                                          (("4"
                                                            (eval-expr
                                                             (! -2 r))
                                                            (("4"
                                                              (eval-expr
                                                               (!
                                                                -4
                                                                l))
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AWB2lat const-decl "Latitude" awb32 nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Rlat const-decl "real" cpr_real nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (YZ_pre const-decl "nat" cpr_real nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (dlat const-decl "posreal" cpr_real nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (rec_pos_incr formula-decl nil abstract_cpr nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (rlat_eq 0
  (rlat_eq-1 nil 3736089615
   ("" (skeep)
    (("" (expand "rlat_int")
      (("" (typepred "closest_mult_div_shift(awb_lat, 60-i, 32-nb)")
        (("1" (lemma "closest_div_mult_def")
          (("1"
            (inst -1 "closest_mult_div_shift(awb_lat, 60 - i, 32 - nb)"
             "60-i" "32-nb")
            (("1" (replaces -1)
              (("1" (replaces -2)
                (("1"
                  (name "RL" "(2 ^ (32 - nb)) *
                             floor(1/2 + (60 * awb_lat - awb_lat * i) / 2 ^ (32 - nb))
                             / (60 - i)")
                  (("1" (replace -1 1)
                    (("1"
                      (case "NOT (60 * awb_lat - awb_lat * i) / 2 ^ (32 - nb) = 2^nb*(awb_lat*resolution)/dlat(i)")
                      (("1" (lemma "expt_plus")
                        (("1" (inst -1 "32" "-nb" "2")
                          (("1" (rewrite " expt_div" 1 :dir rl)
                            (("1" (expand "dlat")
                              (("1"
                                (expand "resolution")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (expand "lat2AWB")
                          (("2" (lemma "alt_rec_pos")
                            (("2"
                              (inst -1 "nb" "60-i" "AWB2lat(awb_lat)"
                               "360")
                              (("2"
                                (ground)
                                (("2"
                                  (case "NOT dlat(i) = dl(60-i, 360)")
                                  (("1"
                                    (expand "dlat")
                                    (("1"
                                      (expand "dl")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (case
                                       "NOT Rlat(i, AWB2lat(awb_lat)) = recovered_position(360, 60 - i, nb)(AWB2lat(awb_lat))")
                                      (("1"
                                        (expand "Rlat")
                                        (("1"
                                          (expand "recovered_position")
                                          (("1"
                                            (expand "YZ_pre")
                                            (("1"
                                              (expand "MOD")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (replaces -2)
                                          (("2"
                                            (replaces -2)
                                            (("2"
                                              (case
                                               "NOT (2 ^ (32 - nb)) *
                        floor(1/2 + 2 ^ nb * (awb_lat * resolution) / dlat(i))
                        / (60 - i) = dlat(i)/resolution * floor(1/2 + 2 ^ nb * (awb_lat * resolution) / dlat(i))/2^nb")
                                              (("1"
                                                (rewrite
                                                 "expt_div"
                                                 1
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (expand "dlat")
                                                  (("1"
                                                    (expand
                                                     "resolution")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1 -4)
                                                (("2"
                                                  (case
                                                   "NOT 2 ^ nb *
                               ((AWB2lat(awb_lat) + dlat(i) / 2 ^ (1 + nb))
                                 / dlat(i)) = 2^nb*AWB2lat(awb_lat)/dlat(i) + 1/2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "expt_plus")
                                                      (("1"
                                                        (rewrite
                                                         "div_distributes"
                                                         1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (expand
                                                       "AWB2lat")
                                                      (("2"
                                                        (lemma
                                                         "mod_mult")
                                                        (("2"
                                                          (case
                                                           "NOT reals@reals_mod.mod(dlat(i) *
                       (floor(2 ^ nb *
                               IF awb_lat <= 2 ^ (30)
                                 THEN awb_lat * resolution
                               ELSE awb_lat * resolution - 360
                               ENDIF
                               / dlat(i)
                               + 1/2)
                         / 2 ^ nb),
                      360) = reals@reals_mod.mod(dlat(i) *
                       (floor(2 ^ nb *
                                awb_lat * resolution
                               / dlat(i)
                               + 1/2)
                         / 2 ^ nb),360)")
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "NOT (2 ^ nb * (awb_lat * resolution - 360)) / dlat(i) = 2^nb*awb_lat*resolution/dlat(i) - 2^nb*(60-i)")
                                                                    (("1"
                                                                      (expand
                                                                       "dlat")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "floor_plus_int")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "-2^nb*(60-i)"
                                                                           "2 ^ nb * awb_lat * resolution / dlat(i) +1/2")
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "div_distributes"
                                                                               2
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT dlat(i) * ((60 * -2 ^ nb - -2 ^ nb * i) / 2 ^ nb) = -360")
                                                                                  (("1"
                                                                                    (hide
                                                                                     3)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "dlat")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "mod_multiple")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "dlat(i) *
            (floor(1/2 + 2 ^ nb * awb_lat * resolution / dlat(i)) / 2 ^ nb)"
                                                                                           " 360"
                                                                                           " -1")
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (case
                                                               "NOT dlat(i) *
                        (floor(2 ^ nb * awb_lat * resolution / dlat(i) +
                                1 / 2)
                          / 2 ^ nb) = resolution*RL")
                                                              (("1"
                                                                (replaces
                                                                 -5
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "mod"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "NOT - 360 * (floor(resolution * RL / 360) * (2 ^ 32 / 360))
                 + (2 ^ 32 / 360) * RL * resolution = -floor(resolution*RL/360)*2^32 + RL")
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "resolution")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (move-terms
                                                                         -1
                                                                         l
                                                                         1)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "floor_plus_int")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "-floor(resolution * RL / 360) * 2 ^ 32"
                                                                                 "1/2 + RL")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "mod_multiple")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       " floor(1/2 + RL)"
                                                                                       "2^32"
                                                                                       "-floor(resolution * RL / 360)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "resolution")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide-all-but 1)
                (("2" (typepred "nb")
                  (("2" (case "i=0")
                    (("1" (split -3)
                      (("1" (replaces -1)
                        (("1" (replaces -1)
                          (("1" (eval-formula 1) nil nil)) nil))
                        nil)
                       ("2" (replaces -1)
                        (("2" (replaces -1)
                          (("2" (eval-formula 1) nil nil)) nil))
                        nil)
                       ("3" (replaces -1)
                        (("3" (replaces -1)
                          (("3" (eval-formula 1) nil nil)) nil))
                        nil)
                       ("4" (replaces -1)
                        (("4" (replaces -1)
                          (("4" (eval-formula 1) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (case "NOT i=1")
                      (("1" (assert) nil nil)
                       ("2" (split -3)
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1" (eval-formula 2) nil nil)) nil))
                          nil)
                         ("2" (replaces -1)
                          (("2" (replaces -1)
                            (("2" (eval-formula 2) nil nil)) nil))
                          nil)
                         ("3" (replaces -1)
                          (("3" (replaces -1)
                            (("3" (eval-formula 2) nil nil)) nil))
                          nil)
                         ("4" (replaces -1)
                          (("4" (replaces -1)
                            (("4" (eval-formula 2) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (typepred "nb") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (typepred "nb") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rlat_int const-decl "unsigned_int" cpr_int nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (resolution const-decl "real" awb32 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dlat const-decl "posreal" cpr_real nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_div formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (Rlat const-decl "real" cpr_real nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (YZ_pre const-decl "nat" cpr_real nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_distributes formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (floor_plus_int formula-decl nil floor_ceil nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (mod_mult formula-decl nil mod nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (alt_rec_pos formula-decl nil abstract_cpr nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    nil
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (closest_mult_div_shift const-decl
     "{ans: unsigned_int | ans = floor((a * x) / 2 ^ z + 1 / 2)}"
     uint32 nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (nl_enc_TCC1 0
  (nl_enc_TCC1-1 nil 3736689643
   ("" (skeep)
    (("" (typepred "rlat_int(i, awb_lat, nb)") (("" (assert) nil nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rlat_int const-decl "unsigned_int" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (nl_enc 0
  (nl_enc-1 nil 3736694671
   ("" (skeep)
    (("" (lemma "rlat_eq")
      (("" (inst?)
        (("" (replace -1 :dir rl)
          (("" (lemma "nl_awb_equiv")
            (("" (inst -1 "nb" "Rlat(i,AWB2lat(awb_lat))")
              (("1" (flatten)
                (("1" (expand "lat2AWB")
                  (("1"
                    (case "NOT reals@reals_mod.mod(floor(1/2 +
                         (2 ^ 32 / 360) *
                          reals@reals_mod.mod(Rlat(i, AWB2lat(awb_lat)), 360)),
                  2 ^ 32) = floor(1/2 +
                         (2 ^ 32 / 360) *
                          reals@reals_mod.mod(Rlat(i, AWB2lat(awb_lat)), 360))")
                    (("1"
                      (name "mrlat"
                            "reals@reals_mod.mod(Rlat(i, AWB2lat(awb_lat)), 360)")
                      (("1" (replace -1 1)
                        (("1" (hide 2)
                          (("1" (case "1/2+(2^32/360)*mrlat< 2^32")
                            (("1"
                              (case "NOT floor(1 / 2 + (2 ^ 32 / 360) * mrlat) < 2^32")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "mod" 1)
                                (("2"
                                  (lemma "floor_0")
                                  (("2"
                                    (inst
                                     -1
                                     "floor(1/2 + (2 ^ 32 / 360) * mrlat) / 2 ^ 32")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (split -1)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (cross-mult 1)
                                              (("2"
                                                (lemma
                                                 "reals@reals_mod.mod_pos")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "NOT reals@reals_mod.mod(Rlat(i, AWB2lat(awb_lat)), 360)>=0")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (mult-by
                                                           -1
                                                           "2^32")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (cross-mult -1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "NOT RLAT(360,nb,i)(Rlat(i, AWB2lat(awb_lat)))")
                              (("1"
                                (expand "RLAT")
                                (("1"
                                  (expand "Rlat")
                                  (("1"
                                    (inst
                                     1
                                     "floor(AWB2lat(awb_lat) / dlat(i))"
                                     "YZ_pre(i, AWB2lat(awb_lat))")
                                    (("1"
                                      (expand "dl")
                                      (("1"
                                        (expand "dlat")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "YZ_pre")
                                      (("2"
                                        (case
                                         "2 ^ nb * MOD(AWB2lat(awb_lat), dlat(i)) / dlat(i) = 2 ^ nb * (MOD(AWB2lat(awb_lat), dlat(i)) / dlat(i))")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -)
                                            (("1"
                                              (expand "MOD")
                                              (("1"
                                                (rewrite "mod_frac")
                                                (("1"
                                                  (typepred
                                                   "fractional(AWB2lat(awb_lat) / dlat(i))")
                                                  (("1"
                                                    (mult-by -2 "2^nb")
                                                    (("1"
                                                      (case
                                                       "NOT 1/2+ fractional(AWB2lat(awb_lat) / dlat(i)) * 2 ^ nb <= 1/2+ 2 ^ nb")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "Not floor(1 / 2 + fractional(AWB2lat(awb_lat) / dlat(i)) * 2 ^ nb) <=
       floor(1 / 2 + 2 ^ nb )")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "floor_plus_int")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "2^nb"
                                                             " 1/2")
                                                            (("2"
                                                              (eval-expr
                                                               "floor(1/2)")
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "RLAT")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case
                                     "mrlat<= 360-360/((60-i)*2^nb)")
                                    (("1"
                                      (mult-by -1 "(2 ^ 32 / 360)")
                                      (("1"
                                        (case
                                         "NOT (360 - 360 / ((60 - i) * 2 ^ nb)) * (2 ^ 32 / 360) < 2^32 - 1/2")
                                        (("1"
                                          (hide-all-but 1)
                                          (("1"
                                            (case "i=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (typepred "nb")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (eval-formula 1)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (eval-formula 1)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (replaces -1)
                                                    (("3"
                                                      (eval-formula 1)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (replaces -1)
                                                    (("4"
                                                      (eval-formula 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "NOT i=1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (typepred "nb")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (eval-formula
                                                           1)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (eval-formula
                                                           1)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (eval-formula
                                                           1)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (replaces -1)
                                                        (("4"
                                                          (eval-formula
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "dl" -1)
                                      (("2"
                                        (case
                                         "NOT (360 / (60 - i)) * (m / 2 ^ nb) + k * (360 / (60 - i)) = (360*(k*2^nb+m))/((60-i)*2^nb)")
                                        (("1"
                                          (cancel-by 1 "360/(60-i)")
                                          nil
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (lemma
                                             "reals@reals_mod.mod_pos")
                                            (("2"
                                              (inst
                                               -1
                                               "Rlat(i, AWB2lat(awb_lat))"
                                               "360")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "mod" -2)
                                                  (("2"
                                                    (move-terms -2 l 2)
                                                    (("2"
                                                      (replace -3 -2)
                                                      (("2"
                                                        (case
                                                         "NOT (360 * (k * 2 ^ nb + m)) < ((60 - i) * 2 ^ nb)*
(360 +
        360 * floor((360 * (k * 2 ^ nb + m)) / ((60 - i) * 2 ^ nb) / 360))")
                                                        (("1"
                                                          (cross-mult
                                                           -2)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "i"
                                                                   "nb")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (div-by
                                                           -1
                                                           "360")
                                                          (("2"
                                                            (case
                                                             "NOT (forall (a,b : int): a<b IMPLIES a<=b-1)")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "NOT ((60 - i) * 2 ^ nb) *
        (360 +
          360 *
           floor((360 * (k * 2 ^ nb + m)) / ((60 - i) * 2 ^ nb) / 360))
        / 360 = ((60 - i) * 2 ^ nb) *
        (1 +
          
           floor((360 * (k * 2 ^ nb + m)) / ((60 - i) * 2 ^ nb) / 360))
        ")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "(k * 2 ^ nb + m)"
                                                                   "((60 - i) * 2 ^ nb) *
        (1 + floor((360 * (k * 2 ^ nb + m)) / ((60 - i) * 2 ^ nb) / 360))")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (mult-by
                                                                         -1
                                                                         "360")
                                                                        (("1"
                                                                          (div-by
                                                                           -1
                                                                           "((60 - i) * 2 ^ nb)")
                                                                          (("1"
                                                                            (replace
                                                                             -5
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (case
                                                                               "NOT  (((60 - i) * 2 ^ nb) * (1 + floor(Rlat(i, AWB2lat(awb_lat)) / 360))
         - 1)
        * 360
        / ((60 - i) * 2 ^ nb) =  360*(1 + floor(Rlat(i, AWB2lat(awb_lat)) / 360))
         - 360/((60-i)*2^nb)
        ")
                                                                              (("1"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (simplify
                                                                                   -1)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     -1
                                                                                     r
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "mod"
                                                                                       -6)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "i"
                                                                               "nb")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but -1)
                                      (("3"
                                        (typepred "i" "nb")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "Rlat")
                  (("2" (expand "RLAT")
                    (("2"
                      (inst 1 "floor(AWB2lat(awb_lat) / dlat(i))"
                       "YZ_pre(i, AWB2lat(awb_lat))")
                      (("1"
                        (inst 2 "floor(AWB2lat(awb_lat) / dlat(i))"
                         "YZ_pre(i, AWB2lat(awb_lat))")
                        (("1" (expand "dl")
                          (("1" (expand "dlat")
                            (("1" (case "i=0")
                              (("1" (assert) nil nil)
                               ("2"
                                (case "NOT i=1")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "YZ_pre")
                            (("2" (expand "dlat" 2)
                              (("2"
                                (expand "dl" 2)
                                (("2"
                                  (expand "MOD" 1)
                                  (("2"
                                    (case
                                     "NOT 2 ^ nb * reals@reals_mod.mod(AWB2lat(awb_lat), dlat(i)) /
              dlat(i) = 2 ^ nb * (reals@reals_mod.mod(AWB2lat(awb_lat), dlat(i)) /
              dlat(i))")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (rewrite "mod_frac" 1)
                                        (("2"
                                          (typepred
                                           "fractional( AWB2lat(awb_lat) / dlat(i))")
                                          (("2"
                                            (hide (2 3))
                                            (("2"
                                              (mult-by -2 " 2^nb")
                                              (("2"
                                                (case
                                                 "floor(1/2 +2^nb) = 2^nb")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT 1/2 +fractional(AWB2lat(awb_lat) / dlat(i)) * 2 ^ nb <= 2 ^ nb + 1/2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "NOT  floor(1/2 + fractional(AWB2lat(awb_lat) / dlat(i)) * 2 ^ nb) <= floor(2 ^ nb + 1/2)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT FORALL (a,b:real): a<=b IMPLIES floor(a)<=floor(b)")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "floor_plus_int")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "2^nb"
                                                       "1/2")
                                                      (("2"
                                                        (eval-expr
                                                         "floor(1/2)
")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "YZ_pre")
                        (("2" (hide (2 3))
                          (("2" (expand "MOD")
                            (("2"
                              (case "NOT 2 ^ nb * reals@reals_mod.mod(AWB2lat(awb_lat), dlat(i)) /
              dlat(i) = 2 ^ nb * (reals@reals_mod.mod(AWB2lat(awb_lat), dlat(i)) /
              dlat(i))")
                              (("1" (assert) nil nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (rewrite "mod_frac")
                                  (("2"
                                    (typepred
                                     "fractional( AWB2lat(awb_lat) / dlat(i))")
                                    (("2"
                                      (mult-by -2 " 2^nb")
                                      (("2"
                                        (case
                                         "NOT 1/2 +fractional(AWB2lat(awb_lat) / dlat(i)) * 2 ^ nb <= 2 ^ nb + 1/2")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case
                                           "NOT floor(1 / 2 + fractional(AWB2lat(awb_lat) / dlat(i)) * 2 ^ nb) <=
       floor(2 ^ nb + 1 / 2)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "floor_plus_int")
                                            (("2"
                                              (inst
                                               -1
                                               "2^nb"
                                               "1/2
")
                                              (("2"
                                                (eval-expr
                                                 "floor(1/2)
")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (assert)
                  (("3" (typepred "nb") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rlat_eq formula-decl nil cpr_int nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil) nil
    (AWB2lat const-decl "Latitude" awb32 nil) nil
    (Rlat const-decl "real" cpr_real nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (dlat const-decl "posreal" cpr_real nil)
    (YZ_pre const-decl "nat" cpr_real nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (div_mult_pos_neg_lt1 formula-decl nil extra_real_props nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nzrat nonempty-type-eq-decl nil rationals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nl_awb_equiv formula-decl nil nl nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (enc_eq_lat_TCC1 0
  (enc_eq_lat_TCC1-1 nil 3735487269
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (enc_eq_lat 0
  (enc_eq_lat-1 nil 3737291545
   ("" (skeep)
    (("" (name "enc" "encoding(60 - i, awb_lat, nb)")
      (("" (replace -1)
        (("" (expand "encoding")
          ((""
            (name "enc_nomod" "div_shift(plus(times(60 - i, awb_lat),
                                                          2 ^ (31 - nb)),
                                                     32 - nb)")
            (("1" (replace -1 -2)
              (("1" (expand "YZ_surf")
                (("1" (expand "YZ")
                  (("1"
                    (case "NOT MOD(YZ_pre(i, AWB2lat(awb_lat)), 2 ^ 17) = MOD(MOD(YZ_pre(i, AWB2lat(awb_lat)),2^19), 2 ^ 17)")
                    (("1" (hide-all-but 1)
                      (("1" (expand "MOD")
                        (("1" (expand "mod" 1 3)
                          (("1" (lemma "mod_multiple")
                            (("1"
                              (inst -1 "YZ_pre(i, AWB2lat(awb_lat))"
                               "2^17"
                               "-floor(YZ_pre(i, AWB2lat(awb_lat)) / 2 ^ 19)*2^2")
                              (("1"
                                (case
                                 "NOT -floor(YZ_pre(i, AWB2lat(awb_lat)) / 2 ^ 19) * 2 ^ 2 * 2 ^ 17 = -floor(YZ_pre(i, AWB2lat(awb_lat)) / 2 ^ 19) * 2 ^ 19")
                                (("1"
                                  (eval-expr "2^2")
                                  (("1"
                                    (eval-expr "2^17")
                                    (("1"
                                      (eval-expr "2^19")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (replace -2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 1)
                      (("2" (hide -1)
                        (("2" (label "enc" -2)
                          (("2" (hide -2)
                            (("2"
                              (name "enc_mod"
                                    "MOD(YZ_pre(i, AWB2lat(awb_lat)), 2 ^ nb)")
                              (("2"
                                (label "enc_real" 1)
                                (("2"
                                  (hide 1)
                                  (("2"
                                    (name "i60" "60-i")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (expand "times")
                                        (("2"
                                          (expand "plus")
                                          (("2"
                                            (rewrite "mod_mod")
                                            (("2"
                                              (expand "div_shift")
                                              (("2"
                                                (expand "mod" -3)
                                                (("2"
                                                  (case
                                                   "NOT (2 ^ (31 - nb) -
                                                 2 ^ 32 * floor((2 ^ (31 - nb) + i60 * awb_lat) / 2 ^ 32)
                                                 + i60 * awb_lat)
                                                / 2 ^ (32 - nb) = 1/2 - 2^nb*floor((2 ^ (31 - nb) + i60 * awb_lat) / 2 ^ 32) + 2^nb*i60*awb_lat/2^32")
                                                  (("1"
                                                    (rewrite
                                                     "expt_div"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "expt_div"
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (eval-expr
                                                         "2^32")
                                                        (("1"
                                                          (eval-expr
                                                           "2^31")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (case
                                                       "not i60*awb_lat = (2^32*resolution*awb_lat)/dl(i60,360)")
                                                      (("1"
                                                        (expand
                                                         "resolution")
                                                        (("1"
                                                          (expand "dl")
                                                          (("1"
                                                            (expand
                                                             "i60")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -3)
                                                          (("2"
                                                            (case
                                                             "NOT (2 ^ (31 - nb) +
                                                                     (2 ^ 32 * resolution * awb_lat) / dl(i60, 360))
                                                                    / 2 ^ 32 = 1/2^(nb+1) + (resolution * awb_lat) / dl(i60, 360)")
                                                            (("1"
                                                              (rewrite
                                                               "expt_div"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "expt_plus")
                                                                (("1"
                                                                  (eval-expr
                                                                   "2^32")
                                                                  (("1"
                                                                    (eval-expr
                                                                     "2^31")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "NOT 2 ^ nb * i60 * awb_lat / 2 ^ 32 = 2^nb*(resolution * awb_lat) / dl(i60, 360)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1
                                                                   -4)
                                                                  (("2"
                                                                    (replaces
                                                                     -1
                                                                     -3)
                                                                    (("2"
                                                                      (lemma
                                                                       "floor_plus_int")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "-
                                         2 ^ nb *
                                          floor(1 / 2 ^ (nb + 1) +
                                                 (resolution * awb_lat) / dl(i60, 360))"
                                                                         " 1/2+  2 ^ nb * (resolution * awb_lat) / dl(i60, 360)")
                                                                        (("1"
                                                                          (replaces
                                                                           -1
                                                                           -4)
                                                                          (("1"
                                                                            (lemma
                                                                             "alt_alt_is_enc")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "nb"
                                                                               "i60"
                                                                               "AWB2lat( awb_lat)"
                                                                               "360")
                                                                              (("1"
                                                                                (case
                                                                                 "NOT floor(2 ^ nb * (AWB2lat(awb_lat) / dl(i60, 360)) + 1 / 2) -
        2 ^ nb * floor(AWB2lat(awb_lat) / dl(i60, 360) + 1 / 2 ^ (1 + nb)) = floor(2 ^ nb * ((resolution*awb_lat) / dl(i60, 360)) + 1 / 2) -
        2 ^ nb * floor((resolution*awb_lat) / dl(i60, 360) + 1 / 2 ^ (1 + nb))")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "AWB2lat")
                                                                                    (("1"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT (awb_lat * resolution - 360) / dl(i60, 360) = (awb_lat * resolution)/dl(i60,360) - i60")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "dl")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "floor_plus_int")
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "-2^nb*i60"
                                                                                                     " 1/2 + 2 ^ nb * ((awb_lat * resolution) / dl(i60, 360))")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -2
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         " -i60"
                                                                                                         " 1 / 2 ^ (1 + nb) + (awb_lat * resolution) / dl(i60, 360)")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "i60")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "i60")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1
                                                                                     -4
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       "enc")
                                                                                      (("2"
                                                                                        (reveal
                                                                                         "enc_real")
                                                                                        (("2"
                                                                                          (lift-if
                                                                                           1)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -2
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     " mod_uint(enc_nomod, 2 ^ 17) ")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -5
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "NOT enc_mod(360, i60, nb, nb)(AWB2lat(awb_lat)) -
       2 ^ 17 * floor(enc_mod(360, i60, nb, nb)(AWB2lat(awb_lat)) / 2 ^ 17) = MOD(enc_mod(360, i60, nb, nb)(AWB2lat(awb_lat)),2^17)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "MOD")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "mod")
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "NOT enc_mod(360, i60, nb, nb)(AWB2lat(awb_lat)) = MOD(YZ_pre(i, AWB2lat(awb_lat)), 2 ^ 19)")
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-2
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "enc_mod")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "enc_raw")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "YZ_pre")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "dlat")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "i60")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "dl")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "MOD")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -3
                                                                                                     2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "enc_mod")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "enc_raw")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "YZ_pre")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "dl")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "i60")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "dlat")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "MOD")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "i60")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "i60")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "i60")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "i60")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (assert)
                (("2" (typepred "nb") (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (assert)
                (("3" (lemma "int_exp")
                  (("3" (inst -1 "31-nb" "2")
                    (("1" (assert)
                      (("1" (lemma "both_sides_expt_gt1_gt")
                        (("1" (inst -1 "2" "32" "31-nb")
                          (("1" (flatten)
                            (("1" (hide -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "nb") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (assert)
              (("4" (typepred "awb_lat")
                (("4" (assert)
                  (("4" (eval-expr "2^30")
                    (("4" (eval-expr "2^32") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (assert)
              (("5" (eval-expr "2^32") (("5" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (encoding const-decl "unsigned_int" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_exp judgement-tcc nil exponentiation nil)
    (both_sides_expt_gt1_gt formula-decl nil exponentiation nil)
    (YZ const-decl "below(2 ^ nb)" cpr_real nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_div formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (resolution const-decl "real" awb32 nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    nil
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (floor_plus_int formula-decl nil floor_ceil nil) nil
    (enc_mod const-decl "int" abstract_cpr nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (dlat const-decl "posreal" cpr_real nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (alt_alt_is_enc formula-decl nil abstract_cpr nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (mod_mod formula-decl nil uint32 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (AWB2lat const-decl "Latitude" awb32 nil)
    (YZ_pre const-decl "nat" cpr_real nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (YZ_surf const-decl "below(2 ^ 17)" cpr_real nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (times const-decl "unsigned_int" uint32 nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (div_shift const-decl "unsigned_int" uint32 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (encoding_lat_j 0
  (encoding_lat_j-1 nil 3778513271
   ("" (skeep)
    (("" (use "enc_eq_lat")
      (("" (replace -1 :hide? t)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "min")
                (("1" (lift-if 1) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (expand "min")
              (("2" (flatten)
                (("2" (lift-if 2)
                  (("2" (ground)
                    (("2" (typepred "nb") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enc_eq_lat formula-decl nil cpr_int nil)
    (subrange type-eq-decl nil integers nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (enc_eq_lon_TCC1 0
  (enc_eq_lon_TCC1-1 nil 3735487269
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "nl_awb(rlat_int(i, awb_lat, nb))")
        (("" (expand "max")
          (("" (eval-expr "2^32")
            (("" (lift-if -4)
              (("" (split -4)
                (("1" (assert)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (nl_awb const-decl "subrange(1, 59)" nl nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (rlat_int const-decl "unsigned_int" cpr_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (enc_eq_lon 0
  (enc_eq_lon-1 nil 3739029082
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (expand "XZ_surf")
          (("" (expand "XZ")
            (("" (lemma "nl_enc")
              (("" (inst -1 "i" "awb_lat")
                (("" (replace -1 :dir rl)
                  (("" (expand "encoding")
                    ((""
                      (name "ds"
                            "div_shift(plus(times (nz, awb_lon),2^(31-nb)),32-nb)")
                      (("1" (replace -1)
                        (("1" (expand "times")
                          (("1" (expand "plus")
                            (("1" (lemma "mod_mod")
                              (("1"
                                (inst
                                 -1
                                 " 2^(31-nb)"
                                 "nz*awb_lon"
                                 " 2^32")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "div_shift")
                                    (("1"
                                      (expand "mod" -1)
                                      (("1"
                                        (case
                                         "NOT (2^(31-nb) - 2^32*floor((2^(31-nb)+nz*awb_lon)/2^32)+nz*awb_lon)/2^(32-nb) = 1/2 + 2^nb*(nz/360)*((360/2^32)*awb_lon) - 2^nb*floor((2^(31-nb)+nz*awb_lon)/2^32)")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (eval-expr "2^32")
                                            (("1"
                                              (eval-expr "2^31")
                                              (("1"
                                                (rewrite
                                                 "expt_div"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (rewrite
                                                   "expt_div"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (cross-mult 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (case
                                             "NOT (2^(31-nb) + nz*awb_lon)/2^32 = 1/2^(1+nb) + (nz/360)*((360/2^32)*awb_lon)")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (rewrite
                                                 "expt_div"
                                                 1
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (rewrite "expt_plus")
                                                  (("1"
                                                    (eval-expr "2^31")
                                                    (("1"
                                                      (eval-expr
                                                       "2^32")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replaces -1)
                                              (("2"
                                                (case
                                                 "NOT ((360/2^32)*awb_lon) = AWB2lon(awb_lon)")
                                                (("1"
                                                  (expand "AWB2lon")
                                                  (("1"
                                                    (expand
                                                     "resolution")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (typepred
                                                     "mod_uint(ds, 2^17)")
                                                    (("1"
                                                      (case
                                                       "NOT ds - 2^17*floor(ds/2^17) = MOD(ds, 2^17)")
                                                      (("1"
                                                        (expand "MOD")
                                                        (("1"
                                                          (expand
                                                           "mod")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (lemma
                                                               "alt_alt_is_enc")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "nb"
                                                                 "nz"
                                                                 "AWB2lon(awb_lon)"
                                                                 "360")
                                                                (("1"
                                                                  (expand
                                                                   "dl")
                                                                  (("1"
                                                                    (case
                                                                     "NOT enc_mod(360, nz, nb, nb)(AWB2lon(awb_lon)) = ds")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (case
                                                                             "not AWB2lon(awb_lon)/(360/nz) = (nz/360)*AWB2lon(awb_lon)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "floor_plus_int")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "-2^nb*floor(1/2^(1+nb) + (nz/360)*AWB2lon(awb_lon))"
                                                                                     "1/2 + AWB2lon(awb_lon)*2^nb*(nz/360)")
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-2
                                                                        -4))
                                                                      (("2"
                                                                        (expand
                                                                         "XZ_pre")
                                                                        (("2"
                                                                          (expand
                                                                           "enc_mod")
                                                                          (("2"
                                                                            (expand
                                                                             "enc_raw")
                                                                            (("2"
                                                                              (case
                                                                               "NOT dl(nz,360) = dlon(i,lat)")
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "dl")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "dlon")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           1)
                                                                                          (("1"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "max")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "mod"
                                                                                           1
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "mod_multiple")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "floor(1/2 +
                                       2 ^ nb *reals@reals_mod. mod(AWB2lon(awb_lon), dlon(i, lat)) /
                                        dlon(i, lat))"
                                                                                               "2^17"
                                                                                               " -2 ^ 2 *
                                  floor(floor(1/2 +
                                               2 ^ nb * reals@reals_mod.mod(AWB2lon(awb_lon), dlon(i, lat)) /
                                                dlon(i, lat))
                                         / 2 ^ nb)")
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 "2^19")
                                                                                                (("1"
                                                                                                  (eval-expr
                                                                                                   "2^17")
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     "2^2")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "MOD")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "MOD")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (eval-formula 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "nb")
                          (("2" (split -2)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil)
                             ("4" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (typepred "nb")
                        (("3" (split -2)
                          (("1" (replaces -1)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (replace -1)
                            (("2" (eval-formula 1) nil nil)) nil)
                           ("3" (replace -1)
                            (("3" (eval-formula 1) nil nil)) nil)
                           ("4" (replace -1)
                            (("4" (eval-formula 1) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (eval-expr "2^32")
                        (("4" (assert)
                          (("4" (expand "max")
                            (("4" (lift-if -4)
                              (("4"
                                (split -4)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case "i=0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (case "NOT i=1")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rlat_int const-decl "unsigned_int" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nl_awb const-decl "subrange(1, 59)" nl nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (encoding const-decl "unsigned_int" cpr_int nil)
    (LonAWB type-eq-decl nil awb32 nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (XZ_surf const-decl "below(2 ^ 17)" cpr_real nil)
    (AWB2lon const-decl "{x: real | x >= 0 AND x < 360}" awb32 nil)
    (XZ const-decl "below(2 ^ nb)" cpr_real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nl_enc formula-decl nil cpr_int nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (div_shift const-decl "unsigned_int" uint32 nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (times const-decl "unsigned_int" uint32 nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_mod formula-decl nil uint32 nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (alt_alt_is_enc formula-decl nil abstract_cpr nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (dlon const-decl "posreal" cpr_real nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (enc_raw const-decl "int" abstract_cpr nil)
    (XZ_pre const-decl "nat" cpr_real nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    nil nil nil
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 nil)
    (resolution const-decl "real" awb32 nil)
    (expt_plus formula-decl nil exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (expt_div formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (encoding_lon_j_TCC1 0
  (encoding_lon_j_TCC1-1 nil 3778513270
   ("" (skeep)
    (("" (eval-expr "2^32")
      (("" (replace -1 :hide? t)
        (("" (ground)
          (("" (expand "max")
            (("" (lift-if 1) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (encoding_lon_j 0
  (encoding_lon_j-1 nil 3778513665
   ("" (skeep)
    (("" (lemma "enc_eq_lon")
      (("" (inst -1 "awb_lon" "i" "awb_lat")
        (("" (beta)
          (("" (replace -1 :hide? t)
            (("" (lift-if 1)
              (("" (expand "min")
                (("" (ground)
                  (("" (lift-if 2)
                    (("" (ground)
                      (("" (typepred "nb") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((enc_eq_lon formula-decl nil cpr_int nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (LonAWB type-eq-decl nil awb32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (local_zone_TCC1 0
  (local_zone_TCC1-1 nil 3739113144
   ("" (skeep :preds? T)
    (("" (eval-expr "2^32")
      (("" (eval-expr "2^17") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (local_zone_TCC2 0
  (local_zone_TCC2-1 nil 3739113144
   ("" (skeep :preds? T)
    (("" (eval-expr "2^17")
      (("" (eval-expr "2^32") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (local_zone_TCC3 0
  (local_zone_TCC3-1 nil 3739113144
   ("" (skeep)
    (("" (typepred "nz")
      (("" (eval-expr "2^6")
        (("" (eval-expr "2^32") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (local_zone_TCC4 0
  (local_zone_TCC4-1 nil 3739113144
   ("" (skeep :preds? T)
    (("" (skeep :preds? T)
      (("" (eval-expr "2^6")
        (("" (eval-expr "2^32") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (local_zone_TCC5 0
  (local_zone_TCC5-1 nil 3739113144
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "nb")
        (("" (split -2)
          (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
           ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil)
           ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil)
           ("4" (replaces -1) (("4" (eval-formula 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil))
   nil))
 (local_zone_TCC6 0
  (local_zone_TCC6-1 nil 3739113144
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "nb")
          (("" (eval-expr "2^32")
            (("" (split -3)
              (("1" (replaces -1)
                (("1" (eval-expr "2^(32-12)") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (replaces -1)
                (("2" (eval-expr "2^(32-14)") (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (replaces -1)
                (("3" (eval-expr "2^(32-17)") (("3" (assert) nil nil))
                  nil))
                nil)
               ("4" (replaces -1)
                (("4" (eval-expr "2^(32-19)") (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (local_zone_TCC7 0
  (local_zone_TCC7-1 nil 3739113144
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (typepred "nb")
            (("" (split -2)
              (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
               ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil)
               ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil)
               ("4" (replaces -1) (("4" (eval-formula 1) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil))
   nil))
 (local_zone_TCC8 0
  (local_zone_TCC8-1 nil 3739113144
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (typepred "nz")
                (("" (eval-expr "2^6")
                  (("" (eval-expr "2^32")
                    (("" (lift-if -6)
                      (("" (split -6)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil))
 (local_zone_TCC9 0
  (local_zone_TCC9-1 nil 3740757400
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (typepred "nb") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil))
 (local_zone_def_TCC1 0
  (local_zone_def_TCC1-1 nil 3740821546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (local_zone_def 0
  (local_zone_def-2 nil 3740843138
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        ((""
          (case " NOT EXISTS (y: { x: nat | x < 2^32 AND x < 2^19 }): y  = mmes")
          (("1" (inst 1 "mmes")
            (("1" (typepred "mes")
              (("1" (eval-expr "2^17")
                (("1" (eval-expr "2^19")
                  (("1" (eval-expr "2^32")
                    (("1" (lift-if -6)
                      (("1" (split -6)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (replaces -1 :dir rl)
              (("2"
                (case " NOT EXISTS (z: { x: posnat | x < 2^32 AND x < 256 }): z  = nzz")
                (("1" (inst 1 "nzz")
                  (("1" (typepred "nz")
                    (("1" (eval-expr "2^6")
                      (("1" (eval-expr "2^32")
                        (("1" (lift-if -5)
                          (("1" (split -5)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (replaces -1 :dir rl)
                    (("2" (expand "local_zone")
                      (("2" (replace -2 :dir rl)
                        (("2" (replace -1 :dir rl)
                          (("2"
                            (case "NOT (integer_pred(2 ^ (nb - 1)) AND
                                                   2 ^ (nb - 1) >= 0 AND 2 ^ (nb - 1) < 2 ^ 32 AND integer_pred(2^(32-nb)) AND 2^(32-nb)>0 AND 2^(32-nb)<2^32 AND 32-nb > 0 AND 32-nb<33) ")
                            (("1" (typepred "nb")
                              (("1"
                                (split -2)
                                (("1"
                                  (replaces -1)
                                  (("1" (eval-formula 1) nil nil))
                                  nil)
                                 ("2"
                                  (replaces -1)
                                  (("2" (eval-formula 1) nil nil))
                                  nil)
                                 ("3"
                                  (replaces -1)
                                  (("3" (eval-formula 1) nil nil))
                                  nil)
                                 ("4"
                                  (replaces -1)
                                  (("4" (eval-formula 1) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (label "preds" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "plus(2 ^ (nb - 1),
                                                     plus(times(z, div_shift(ref, 32 - nb)),
                                                          div_shift(times(z, mod_uint(ref, 2 ^ (32 - nb))),
                                                                    32 - nb))) = floor(2 ^ nb * ((resolution * ref) / (360 / z)) + 1/2 * 2 ^ nb)")
                                  (("1"
                                    (hide "preds")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (flip-ineq 1)
                                              (("2"
                                                (lemma "minus_reg1")
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "floor_plus_int")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "-y "
                                                         " 2 ^ nb * ((resolution * ref) / (360 / z)) + 1/2 * 2 ^ nb")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "div_shift")
                                                              (("1"
                                                                (rewrite
                                                                 "floor_div_div"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide (2 "preds"))
                                    (("2"
                                      (typepred
                                       "mod_uint(ref, 2^(32-nb))")
                                      (("1"
                                        (lemma
                                         "real_parts"
                                         ("x" "ref/2^(32-nb)"))
                                        (("1"
                                          (cross-mult -1)
                                          (("1"
                                            (move-terms -1 r 2)
                                            (("1"
                                              (replaces -1 -3 :dir rl)
                                              (("1"
                                                (rewrite
                                                 "mod_frac"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (simplify -2)
                                                  (("1"
                                                    (rewrite
                                                     "div_cancel2"
                                                     -2)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (expand
                                                         "div_shift")
                                                        (("1"
                                                          (rewrite
                                                           "times_reg1")
                                                          (("1"
                                                            (rewrite
                                                             "times_reg1")
                                                            (("1"
                                                              (rewrite
                                                               " plus_reg1")
                                                              (("1"
                                                                (rewrite
                                                                 "times_div1"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "mod_frac"
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "real_parts"
                                                                     ("x"
                                                                      "ref/2^(32-nb)"))
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "z")
                                                                      (("1"
                                                                        (rewrite
                                                                         "floor_plus_int"
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replaces
                                                                           -1
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "plus_reg1")
                                                                            (("1"
                                                                              (rewrite
                                                                               "floor_plus_int"
                                                                               1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "div_div1 "
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "resolution")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "expt_div"
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "expt_div"
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "div_div1 "
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 "preds")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "floor(ref / 2 ^ (32 - nb) * z)")
                                                                              (("2"
                                                                                (typepred
                                                                                 "ref")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "z")
                                                                                  (("2"
                                                                                    (div-by
                                                                                     -4
                                                                                     "2^(32-nb)")
                                                                                    (("2"
                                                                                      (mult-ineq
                                                                                       -3
                                                                                       -4)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "nb")
                                                                                        (("2"
                                                                                          (eval-expr
                                                                                           "2^32")
                                                                                          (("2"
                                                                                            (split
                                                                                             -3)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -3
                                                                                                  r))
                                                                                                (("1"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    1
                                                                                                    l
                                                                                                    2))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -3
                                                                                                  r))
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    1
                                                                                                    l
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -3
                                                                                                  r))
                                                                                                (("3"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    1
                                                                                                    l
                                                                                                    2))
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("4"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -3
                                                                                                  r))
                                                                                                (("4"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    1
                                                                                                    l
                                                                                                    2))
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (reveal
                                                                               "preds")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "floor_plus_int"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "times_div1"
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "mod_frac")
                                                                    (("2"
                                                                      (lemma
                                                                       "real_parts"
                                                                       ("x"
                                                                        "ref/2^(32-nb)"))
                                                                      (("2"
                                                                        (mult-by
                                                                         -1
                                                                         "z")
                                                                        (("2"
                                                                          (replaces
                                                                           -1
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             "expt_div"
                                                                             1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (rewrite
                                                                               "div_div1"
                                                                               1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "floor(((ref * 2 ^ nb) / 2 ^ 32) * z)")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "ref")
                                                                                  (("2"
                                                                                    (div-by
                                                                                     -1
                                                                                     "2^32")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "z")
                                                                                      (("2"
                                                                                        (mult-ineq
                                                                                         -3
                                                                                         -4)
                                                                                        (("2"
                                                                                          (mult-by
                                                                                           -1
                                                                                           "2^nb")
                                                                                          (("2"
                                                                                            (eval-expr
                                                                                             "2^32")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "nb")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -3
                                                                                                      r))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -3
                                                                                                      r))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -3
                                                                                                      r))
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -3
                                                                                                      r))
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (rewrite
                                                                 "times_div1"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("3"
                                                                  (rewrite
                                                                   "mod_frac")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (typepred
                                                                       "fractional(ref / 2 ^ (32 - nb))")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (typepred
                                                                           "z")
                                                                          (("3"
                                                                            (swap-rel
                                                                             -4)
                                                                            (("3"
                                                                              (mult-ineq
                                                                               -1
                                                                               -4)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "mod_pos"
                                                               ("i"
                                                                "ref"
                                                                "m"
                                                                "2^(32-nb)"))
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (typepred
                                                                   "z")
                                                                  (("2"
                                                                    (mult-ineq
                                                                     -3
                                                                     -5)
                                                                    (("2"
                                                                      (eval-expr
                                                                       "2^32")
                                                                      (("2"
                                                                        (typepred
                                                                         "nb")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (eval-expr
                                                                               (!
                                                                                -3
                                                                                r))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (eval-expr
                                                                               (!
                                                                                -3
                                                                                r))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (replaces
                                                                             -1)
                                                                            (("3"
                                                                              (eval-expr
                                                                               (!
                                                                                -3
                                                                                r))
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (replaces
                                                                             -1)
                                                                            (("4"
                                                                              (eval-expr
                                                                               (!
                                                                                -3
                                                                                r))
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "mod_pos"
                                                               ("i"
                                                                "ref"
                                                                "m"
                                                                "2^(32-nb)"))
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "mod")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (reveal
                                                                           "preds")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (case
                                                                               "NOT forall (a:int, b:posnat): integer_pred(a-b*floor(a/b))")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "z")
                                                            (("2"
                                                              (typepred
                                                               "floor(ref / 2 ^ (32 - nb))")
                                                              (("2"
                                                                (mult-ineq
                                                                 -1
                                                                 -6)
                                                                (("2"
                                                                  (rewrite
                                                                   "expt_div"
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "div_div1")
                                                                    (("2"
                                                                      (case
                                                                       "NOT ((ref * 2 ^ nb) / 2 ^ 32) * 256 < 2^nb*256")
                                                                      (("1"
                                                                        (typepred
                                                                         "ref")
                                                                        (("1"
                                                                          (div-by
                                                                           -1
                                                                           " 2^32")
                                                                          (("1"
                                                                            (mult-by
                                                                             -1
                                                                             "2^nb")
                                                                            (("1"
                                                                              (mult-by
                                                                               -1
                                                                               "256")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (eval-expr
                                                                         "2^32")
                                                                        (("2"
                                                                          (typepred
                                                                           "nb")
                                                                          (("2"
                                                                            (split
                                                                             -2)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (eval-expr
                                                                                 (!
                                                                                  -3
                                                                                  r))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (eval-expr
                                                                                 (!
                                                                                  -3
                                                                                  r))
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (replaces
                                                                               -1)
                                                                              (("3"
                                                                                (eval-expr
                                                                                 (!
                                                                                  -3
                                                                                  r))
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (replaces
                                                                               -1)
                                                                              (("4"
                                                                                (eval-expr
                                                                                 (!
                                                                                  -3
                                                                                  r))
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (reveal "preds")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil)
                                   ("4" (assert) nil nil)
                                   ("5" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (resolution const-decl "real" awb32 nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (local_zone const-decl "unsigned_int" cpr_int nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil) nil
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (times const-decl "unsigned_int" uint32 nil)
    (div_shift const-decl "unsigned_int" uint32 nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 nil)
    nil nil (floor_plus_int formula-decl nil floor_ceil nil)
    (floor_div_div formula-decl nil uint32 nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_reg1 formula-decl nil uint32 nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (times_reg1 formula-decl nil uint32 nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (nil application-judgement "below(m)" reals_mod "reals/")
    (plus_reg1 formula-decl nil uint32 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_div formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_div1 formula-decl nil real_props nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (times_div1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mod_frac formula-decl nil reals_mod "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_parts formula-decl nil floor_ceil nil) nil
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (local_zone_def-1 nil 3740821546
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        ((""
          (case " NOT EXISTS (y: { x: nat | x < 2^32 AND x < 2^19 }): y  = mmes")
          (("1" (inst 1 "mmes")
            (("1" (typepred "mes")
              (("1" (eval-expr "2^17")
                (("1" (eval-expr "2^19")
                  (("1" (eval-expr "2^32")
                    (("1" (lift-if -6)
                      (("1" (split -6)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (replaces -1 :dir rl)
              (("2"
                (case " NOT EXISTS (z: { x: posnat | x < 2^32 AND x < 256 }): z  = nzz")
                (("1" (inst 1 "nzz")
                  (("1" (typepred "nz")
                    (("1" (eval-expr "2^6")
                      (("1" (eval-expr "2^32")
                        (("1" (lift-if -5)
                          (("1" (split -5)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (replaces -1 :dir rl)
                    (("2" (expand "local_zone")
                      (("2" (replace -2 :dir rl)
                        (("2" (replace -1 :dir rl)
                          (("2"
                            (case "NOT (integer_pred(2 ^ (nb - 1)) AND
                             2 ^ (nb - 1) >= 0 AND 2 ^ (nb - 1) < 2 ^ 32 AND integer_pred(2^(32-nb)) AND 2^(32-nb)>0 AND 2^(32-nb)<2^32 AND 32-nb > 0 AND 32-nb<33) ")
                            (("1" (typepred "nb")
                              (("1"
                                (split -2)
                                (("1"
                                  (replaces -1)
                                  (("1" (eval-formula 1) nil nil))
                                  nil)
                                 ("2"
                                  (replaces -1)
                                  (("2" (eval-formula 1) nil nil))
                                  nil)
                                 ("3"
                                  (replaces -1)
                                  (("3" (eval-formula 1) nil nil))
                                  nil)
                                 ("4"
                                  (replaces -1)
                                  (("4" (eval-formula 1) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (label "preds" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "plus(2 ^ (nb - 1),
                           plus(times(z, div_shift(ref, 32 - nb)),
                                div_shift(times(z, mod_uint(ref, 2 ^ (32 - nb))),
                                          32 - nb))) = floor(2 ^ nb * ((resolution * ref) / (360 / z)) + 1/2 * 2 ^ nb)")
                                  (("1"
                                    (hide "preds")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (flip-ineq 1)
                                              (("2"
                                                (lemma "minus_reg1")
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "floor_plus_int")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "-y "
                                                         " 2 ^ nb * ((resolution * ref) / (360 / z)) + 1/2 * 2 ^ nb")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "div_shift")
                                                              (("1"
                                                                (rewrite
                                                                 "floor_div_div"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide (2 "preds"))
                                    (("2"
                                      (typepred
                                       "mod_uint(ref, 2^(32-nb))")
                                      (("1"
                                        (lemma
                                         "real_parts"
                                         ("x" "ref/2^(32-nb)"))
                                        (("1"
                                          (cross-mult -1)
                                          (("1"
                                            (move-terms -1 r 2)
                                            (("1"
                                              (replaces -1 -3 :dir rl)
                                              (("1"
                                                (rewrite
                                                 "mod_frac"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (simplify -2)
                                                  (("1"
                                                    (rewrite
                                                     "div_cancel2"
                                                     -2)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (reveal "preds")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil)
                                   ("4" (assert) nil nil)
                                   ("5" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (local_decode_TCC1 0
  (local_decode_TCC1-1 nil 3739182012
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "nb")
        (("" (split -2)
          (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
           ("2" (replaces -1) (("2" (eval-formula 1) nil nil)) nil)
           ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil)
           ("4" (replaces -1) (("4" (eval-formula 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil))
   nil))
 (local_decode_TCC2 0
  (local_decode_TCC2-1 nil 3739182012
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "nb")
          (("" (split -2)
            (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
             ("2" (assert)
              (("2" (replaces -1) (("2" (eval-formula 1) nil nil))
                nil))
              nil)
             ("3" (replaces -1) (("3" (eval-formula 1) nil nil)) nil)
             ("4" (replaces -1) (("4" (eval-formula 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   nil))
 (local_eq_lat_TCC1 0
  (local_eq_lat_TCC1-1 nil 3739182029
   ("" (skeep)
    (("" (typepred "yz")
      (("" (replace -2)
        (("" (expand "min") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lat_TCC2 0
  (local_eq_lat_TCC2-1 nil 3739182029
   ("" (skeep)
    (("" (typepred "nb")
      (("" (typepred "yz")
        (("" (expand "min")
          (("" (assert)
            (("" (lift-if -1)
              (("" (split -1)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lat_TCC3 0
  (local_eq_lat_TCC3-1 nil 3739182029
   ("" (skeep) (("" (eval-expr "2^6") (("" (assert) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lat_TCC4 0
  (local_eq_lat_TCC4-1 nil 3739182029
   ("" (skeep)
    (("" (hide -)
      (("" (typepred "yz")
        (("" (expand "min")
          (("" (lift-if -)
            (("" (split -)
              (("1" (flatten) nil nil)
               ("2" (assert)
                (("2" (flatten)
                  (("2" (typepred "nb")
                    (("2" (split -2)
                      (("1" (assert)
                        (("1" (replaces -1)
                          (("1" (eval-expr "2^12")
                            (("1" (eval-expr "2^17")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replaces -1)
                        (("2" (eval-expr "2^14")
                          (("2" (eval-expr "2^17")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lat_TCC5 0
  (local_eq_lat_TCC5-1 nil 3739182029 ("" (subtype-tcc) nil nil)
   ((subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    nil (Rlat_loc_surf const-decl "real" cpr_real nil)
    (dlat const-decl "posreal" cpr_real nil) nil
    (Rlat_loc const-decl "real" cpr_real nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (local_eq_lat 0
  (local_eq_lat-1 nil 3739189660
   ("" (skeep)
    (("" (ground)
      ((""
        (name "rl"
              "IF nb = 19 THEN Rlat_loc_surf(i, AWB2lat(ref_lat), yz)
                          ELSE Rlat_loc(i, AWB2lat(ref_lat), yz) ENDIF")
        (("1"
          (case "  abs(rl) <= 90 IMPLIES
                           local_decode(60 - i, ref_lat, yz) = lat2AWB(rl)")
          (("1" (replace -2 :dir rl)
            (("1" (lift-if -1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (flatten)
              (("2" (expand "local_decode")
                (("2"
                  (name "yzz" "IF nb = 19 THEN 4 * yz ELSE yz ENDIF")
                  (("2" (replaces -1)
                    (("2"
                      (name "nzz"
                            "IF nb = 19 THEN 240 - 4 * i ELSE 60 - i ENDIF")
                      (("2" (replaces -1)
                        (("2" (expand "Rlat_loc_surf")
                          (("2" (expand "Rlat_loc")
                            (("2" (expand "dlat_surf")
                              (("2"
                                (expand "dlat")
                                (("2"
                                  (case
                                   "NOT 90/(60-i) = 360/(240-4*i)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (name
                                       "J"
                                       "IF nb=19 THEN j_surf(i, AWB2lat(ref_lat), yz) ELSE j(i, AWB2lat(ref_lat), yz) ENDIF")
                                      (("2"
                                        (case
                                         "NOT rl = 360/nzz*( J+ yzz/2^nb )")
                                        (("1"
                                          (replace -3 1 :dir rl)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nzz")
                                                    (("1"
                                                      (expand "yzz")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (eval-expr
                                                             "2^17")
                                                            (("1"
                                                              (eval-expr
                                                               "2^19")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     -1
                                                     2
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand "nzz")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "yzz")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -4)
                                            (("2"
                                              (expand "j_surf")
                                              (("2"
                                                (expand "MOD")
                                                (("2"
                                                  (rewrite
                                                   "floor_plus_int"
                                                   -2
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite
                                                     "mod_frac")
                                                    (("2"
                                                      (lemma
                                                       "real_parts"
                                                       ("x"
                                                        "AWB2lat(ref_lat) / dlat_surf(i)"))
                                                      (("2"
                                                        (move-terms
                                                         -1
                                                         r
                                                         2)
                                                        (("2"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (simplify
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               "j")
                                                              (("2"
                                                                (rewrite
                                                                 "floor_plus_int"
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "MOD")
                                                                  (("2"
                                                                    (lemma
                                                                     "real_parts"
                                                                     ("x"
                                                                      "AWB2lat(ref_lat) / dlat(i)"))
                                                                    (("2"
                                                                      (move-terms
                                                                       -1
                                                                       r
                                                                       2)
                                                                      (("2"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (simplify
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "mod_frac"
                                                                             -2)
                                                                            (("2"
                                                                              (simplify
                                                                               -2)
                                                                              (("2"
                                                                                (case
                                                                                 "EXISTS (y: {x: nat | x< 2^nb AND x<2^32}): y = yzz")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (case
                                                                                       "J = floor(1/2 + AWB2lat(ref_lat) / (360/nzz) - y / 2 ^ nb)")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -4)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "local_zone_def")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "60-i"
                                                                                             "ref_lat"
                                                                                             "yz")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "yzz")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     " IF nb = 19 THEN 240 - 4 * i ELSE 60 - i ENDIF = nzz")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "local_zone(60-i, ref_lat, yz)<=nzz")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "times_reg1"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "plus_reg1")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "closest_div_mult_def"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "lat2AWB")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "expt_div"
                                                                                                                   1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "div_cancel2")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "times_div2"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "times_div1"
                                                                                                                         1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "EXISTS (dl: { p: posreal | p<7 AND p<2^32 AND p = 360/nzz}): dl = 360/nzz")
                                                                                                                          (("1"
                                                                                                                            (skeep)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "(2 ^ 32 * (y / 2 ^ nb) +
                                                  2 ^ 32 * local_zone(60 - i, ref_lat, yz))
                                                 / nzz = (2^32/360)*dl* (local_zone(60 - i, ref_lat, yz) + y/2^nb)")
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "AWB2lat")
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "J = floor(1/2 + ref_lat*resolution/dl - y/2^nb) + nzz*IF ref_lat<=2^30 THEN 0 ELSE -1 ENDIF")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -5)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "rl = dl * (y / 2 ^ nb) + dl* floor(1 / 2 + ref_lat * resolution / dl - y / 2 ^ nb) + 360*(IF ref_lat<=2^30 THEN 0 ELSE -1 ENDIF)")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "mod_multiple")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 " dl * floor(1/2 + ref_lat * resolution / dl - y / 2 ^ nb) +
                                        dl * (y / 2 ^ nb)"
                                                                                                                                                 "360"
                                                                                                                                                 "(IF ref_lat <= 2 ^ 30 THEN 0 ELSE -1 ENDIF)")
                                                                                                                                                (("1"
                                                                                                                                                  (simplify
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -2
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (name
                                                                                                                                                       "rlz"
                                                                                                                                                       "floor(1/2 + ref_lat * resolution / dl - y / 2 ^ nb)")
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           (-3
                                                                                                                                                            -4
                                                                                                                                                            -9))
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -2
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "mod"
                                                                                                                                                               1
                                                                                                                                                               3)
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "360 *
                                                   (floor((dl * (y / 2 ^ nb) + dl * rlz) / 360) *
                                                     (2 ^ 32 / 360)) = floor((dl * (y / 2 ^ nb) + dl * rlz) / 360)*2^32")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "floor_plus_int"
                                                                                                                                                                     ("x"
                                                                                                                                                                      "1/2 + (2 ^ 32 / 360) * (y / 2 ^ nb) * dl
                                                     + (2 ^ 32 / 360) * dl * rlz"
                                                                                                                                                                      "i"
                                                                                                                                                                      "- floor((dl * (y / 2 ^ nb) + dl * rlz) / 360) * 2 ^ 32"))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "mod_multiple"
                                                                                                                                                                         ("x"
                                                                                                                                                                          "floor(1 / 2 + (2 ^ 32 / 360) * (y / 2 ^ nb) * dl +
                                                     (2 ^ 32 / 360) * dl * rlz)"
                                                                                                                                                                          "y"
                                                                                                                                                                          "2^32"
                                                                                                                                                                          "i"
                                                                                                                                                                          " -floor((dl * (y / 2 ^ nb) + dl * rlz) / 360)"))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replaces
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (name
                                                                                                                                                                             "lz"
                                                                                                                                                                             "local_zone(60 - i, ref_lat, yz)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (case
                                                                                                                                                                                 "mod(lz, nzz) = mod(rlz, nzz)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "mod"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (move-terms
                                                                                                                                                                                     -1
                                                                                                                                                                                     l
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (name
                                                                                                                                                                                       "II"
                                                                                                                                                                                       "floor(lz/nzz)-floor(rlz/nzz)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "lz = rlz + nzz*II")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (simplify
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "NOT (2 ^ 32 / 360) * II * dl * nzz = II*2^32")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (replaces
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "floor_plus_int"
                                                                                                                                                                                                   ("x"
                                                                                                                                                                                                    " 1/2 + (2 ^ 32 / 360) * (y / 2 ^ nb) * dl +
                                                          (2 ^ 32 / 360) * dl * rlz"
                                                                                                                                                                                                    "i"
                                                                                                                                                                                                    "II*2^32"))
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                       "mod_multiple"
                                                                                                                                                                                                       ("x"
                                                                                                                                                                                                        "floor(1 / 2 + (2 ^ 32 / 360) * (y / 2 ^ nb) * dl +
                                                          (2 ^ 32 / 360) * dl * rlz)"
                                                                                                                                                                                                        "y"
                                                                                                                                                                                                        "2^32"
                                                                                                                                                                                                        "i"
                                                                                                                                                                                                        "II"))
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -3)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "mod_eq")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst?)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -5
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lift-if
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (case
                                                                                                                                                                                                           "NOT (FORALL (x: real, j:int): floor(x) < j IMPLIES x<j)")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -1
                                                                                                                                                                                                             "2 ^ nb * ((resolution * ref_lat) / dl) + 1/2 * 2 ^ nb"
                                                                                                                                                                                                             "y")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (split
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (case
                                                                                                                                                                                                                 "2 ^ nb * ((resolution * ref_lat) / dl) + 1 / 2 * 2 ^ nb -2^nb <2 ^ nb * ((resolution * ref_lat) / dl) + 1 / 2 * 2 ^ nb - y")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (move-terms
                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                   r
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (div-by
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     "2^nb")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                       "NOT  ((resolution * ref_lat) / dl) + 1 / 2  - 1 < ((resolution * ref_lat) / dl) + 1 / 2  - y/2^nb")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (div-by
                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                           "2^nb")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                             "NOT ((resolution * ref_lat) / dl) + 1 / 2 - y / 2 ^ nb <0")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                               -3)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                                   "floor_0")
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                                     "1/2 + ((resolution * ref_lat) / dl) - y / 2 ^ nb + 1")
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (split
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                             "floor_plus_int"
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                                                               "times_div1"
                                                                                                                                                                                                                                               -6
                                                                                                                                                                                                                                               :dir
                                                                                                                                                                                                                                               rl)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                                 -6
                                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (move-terms
                                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                                   l
                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                         "mod_multiple")
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                                           "0"
                                                                                                                                                                                                                                                           "nzz"
                                                                                                                                                                                                                                                           "1")
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                 "mod")
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                 "0<=((resolution * ref_lat) / dl) +1/2")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                     "ref_lat")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "resolution")
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                         -7
                                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("3"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (propax)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "nzz")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lift-if
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replace
                                                                                                                                             -6
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (simplify
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (split
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -4
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (lift-if
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "360/nzz")
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "nb = 19")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nzz")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (cross-mult
                                                                                                                                           1)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (cross-mult
                                                                                                                                         1)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (cross-mult
                                                                                                                                         1)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (cross-mult
                                                                                                                                         1)
                                                                                                                                        (("4"
                                                                                                                                          (eval-expr
                                                                                                                                           "2^32")
                                                                                                                                          (("4"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "nzz")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (cross-mult
                                                                                                                                       1)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (cross-mult
                                                                                                                                       1)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (cross-mult
                                                                                                                                       1)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (eval-expr
                                                                                                                                       "2^32")
                                                                                                                                      (("4"
                                                                                                                                        (cross-mult
                                                                                                                                         1)
                                                                                                                                        (("4"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "nb")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nzz "
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (eval-expr
                                                                                                                         "2^32")
                                                                                                                        (("1"
                                                                                                                          (eval-expr
                                                                                                                           "2^(33-12)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (eval-expr
                                                                                                                         "2^32")
                                                                                                                        (("2"
                                                                                                                          (eval-expr
                                                                                                                           "2^(33-14)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("3"
                                                                                                                        (eval-expr
                                                                                                                         "2^32")
                                                                                                                        (("3"
                                                                                                                          (eval-expr
                                                                                                                           "2^(33-17)")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("4"
                                                                                                                        (eval-expr
                                                                                                                         "2^32")
                                                                                                                        (("4"
                                                                                                                          (eval-expr
                                                                                                                           "2^(33-19)")
                                                                                                                          (("4"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (mult-by
                                                                                                               -1
                                                                                                               "2^nb")
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "y")
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "NOT local_zone(60 - i, ref_lat, yz) * 2 ^ nb +y < (nzz+1)*2^nb")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (eval-expr
                                                                                                                     "2^32")
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "nb")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nzz"
                                                                                                                         -4)
                                                                                                                        (("2"
                                                                                                                          (lift-if
                                                                                                                           -4)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (eval-expr
                                                                                                                                   "2^19")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -3)
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (eval-expr
                                                                                                                                     (!
                                                                                                                                      -1
                                                                                                                                      l
                                                                                                                                      1
                                                                                                                                      2))
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (eval-expr
                                                                                                                                     (!
                                                                                                                                      -1
                                                                                                                                      l
                                                                                                                                      1
                                                                                                                                      2))
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    (("3"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("3"
                                                                                                                                        (eval-expr
                                                                                                                                         (!
                                                                                                                                          -1
                                                                                                                                          l
                                                                                                                                          1
                                                                                                                                          2))
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("4"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (mult-by
                                                                                                             -1
                                                                                                             "2^nb")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nzz "
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (lift-if
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (eval-expr
                                                                                                                         "2^19")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (eval-expr
                                                                                                                             "2^32")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "nb")
                                                                                                                      (("2"
                                                                                                                        (eval-expr
                                                                                                                         "2^32")
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (eval-expr
                                                                                                                               (!
                                                                                                                                -3
                                                                                                                                r
                                                                                                                                2))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (eval-expr
                                                                                                                               (!
                                                                                                                                -3
                                                                                                                                r
                                                                                                                                2))
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("3"
                                                                                                                              (eval-expr
                                                                                                                               (!
                                                                                                                                -3
                                                                                                                                r
                                                                                                                                2))
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (lift-if
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nzz")
                                                                                                                  (("1"
                                                                                                                    (lift-if
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "resolution"
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "NOT (360 / 2 ^ 32 * ref_lat) / (360 / nzz)<nzz")
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "ref_lat")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "NOT ref_lat<2^32")
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (eval-expr
                                                                                                                                 "2^32")
                                                                                                                                (("1"
                                                                                                                                  (eval-expr
                                                                                                                                   "2^30")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (div-by
                                                                                                                                 -1
                                                                                                                                 "2^32")
                                                                                                                                (("2"
                                                                                                                                  (mult-by
                                                                                                                                   -1
                                                                                                                                   "nzz")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "nzz")
                                                                                                                                    (("2"
                                                                                                                                      (lift-if
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "NOT y/2^nb>=0")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (case
                                                                                                                             "NOT floor(1/2 + (360 / 2 ^ 32 * ref_lat) / (360 / nzz) - y / 2 ^ nb) <= floor(nzz+ 1/2)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "floor_plus_int")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "nzz"
                                                                                                                                 "1/2")
                                                                                                                                (("2"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (eval-expr
                                                                                                                                     "floor(1/2)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "nzz")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replaces
                                                                                         -3
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "yzz")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nzz")
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "dlat_surf")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (eval-expr
                                                                                                           "2^17")
                                                                                                          (("1"
                                                                                                            (eval-expr
                                                                                                             "2^19")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "dlat")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   1
                                                                                   "yzz")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "yzz")
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "yz")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "min")
                                                                                                      (("1"
                                                                                                        (eval-expr
                                                                                                         "2^17")
                                                                                                        (("1"
                                                                                                          (eval-expr
                                                                                                           "2^19")
                                                                                                          (("1"
                                                                                                            (eval-expr
                                                                                                             "2^32")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "yz")
                                                                                              (("2"
                                                                                                (case
                                                                                                 "min(nb,17) = nb")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (eval-expr
                                                                                                       "2^32")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "nb")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (eval-expr
                                                                                                               (!
                                                                                                                -3
                                                                                                                r))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (eval-expr
                                                                                                               (!
                                                                                                                -3
                                                                                                                r))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("3"
                                                                                                              (eval-expr
                                                                                                               (!
                                                                                                                -3
                                                                                                                r))
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "min")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "nb")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert) (("3" (flatten) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (typepred "yz")
              (("2" (typepred "nb")
                (("2" (split -2)
                  (("1" (expand "min") (("1" (assert) nil nil)) nil)
                   ("2" (expand "min") (("2" (assert) nil nil)) nil)
                   ("3" (expand "min") (("3" (assert) nil nil)) nil)
                   ("4" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (local_decode const-decl "unsigned_int" cpr_int nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    nil nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_parts formula-decl nil floor_ceil nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (local_zone_def formula-decl nil cpr_int nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (times_reg1 formula-decl nil uint32 nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_div formula-decl nil exponentiation nil)
    (times_div2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (resolution const-decl "real" awb32 nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mod_eq formula-decl nil reals_mod "reals/")
    (floor_0 formula-decl nil floor_ceil nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (local_zone const-decl "unsigned_int" cpr_int nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil) nil
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (dlat const-decl "posreal" cpr_real nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Rlat_loc_surf const-decl "real" cpr_real nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Rlat_loc const-decl "real" cpr_real nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (nl_local_TCC1 0
  (nl_local_TCC1-1 nil 3743871773
   ("" (skeep :preds? T)
    (("" (typepred "cpr_int.local_decode(60 - i, ref_lat, yz)")
      (("" (assert) nil nil)) nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (local_decode const-decl "unsigned_int" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (nl_local 0
  (nl_local-1 nil 3743871773
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "local_eq_lat")
          (("" (inst?)
            (("" (replace -3 :dir rl)
              (("" (ground)
                (("" (ground)
                  (("" (replace -1 1)
                    (("" (lemma "nl_awb_equiv")
                      (("" (case "NOT RLAT(360, nb, i)(rl)")
                        (("1" (expand "RLAT")
                          (("1" (hide -1)
                            (("1" (lift-if -3)
                              (("1"
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "Rlat_loc_surf")
                                    (("1"
                                      (expand "dlat_surf")
                                      (("1"
                                        (inst
                                         1
                                         "floor(j_surf(i, AWB2lat(ref_lat), yz)/4)"
                                         "yz+2^17*mod(j_surf(i, AWB2lat(ref_lat), yz),4)")
                                        (("1"
                                          (expand "dl")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (case
                                               "NOT floor(j_surf(i, AWB2lat(ref_lat), yz) / 4) * (360 / (60 - i)) = (4*floor(j_surf(i, AWB2lat(ref_lat), yz) / 4)) * (90 / (60 - i))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (case
                                                   "NOT (360 / (60 - i)) *
         ((2 ^ 17 * mod(j_surf(i, AWB2lat(ref_lat), yz), 4) + yz) / 2 ^ 19) = (mod(j_surf(i, AWB2lat(ref_lat), yz), 4) + yz/2^17)*(90/(60-i))")
                                                  (("1"
                                                    (eval-expr "2^17")
                                                    (("1"
                                                      (eval-expr
                                                       "2^19")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "NOT mod(j_surf(i, AWB2lat(ref_lat), yz), 4) = 4*fractional(j_surf(i, AWB2lat(ref_lat), yz)/4)")
                                                        (("1"
                                                          (rewrite
                                                           "mod_frac"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (lemma
                                                             "real_parts")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "j_surf(i, AWB2lat(ref_lat), yz) / 4")
                                                              (("2"
                                                                (cross-mult
                                                                 -1)
                                                                (("2"
                                                                  (replaces
                                                                   -1
                                                                   -3)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (lemma "mod_pos")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (case
                                                   "NOT mod(j_surf(i, AWB2lat(ref_lat), yz), 4) <= 3")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "mod")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (typepred "yz")
                                                      (("2"
                                                        (replace -4)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (eval-expr
                                                             (! -1 r))
                                                            (("2"
                                                              (eval-expr
                                                               "2^17")
                                                              (("2"
                                                                (eval-expr
                                                                 "2^19")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "Rlat_loc")
                                    (("2"
                                      (inst
                                       2
                                       "j(i, AWB2lat(ref_lat), yz)"
                                       "yz")
                                      (("1"
                                        (expand "dl")
                                        (("1"
                                          (expand "dlat")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "yz")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "nb")
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (eval-expr (! -2 r))
                                                  (("1"
                                                    (eval-expr (! 1 r))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (eval-expr (! -2 r))
                                                  (("2"
                                                    (eval-expr (! 1 r))
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (replaces -1)
                                                (("3"
                                                  (eval-expr (! -2 r))
                                                  (("3"
                                                    (eval-expr (! 1 r))
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "nb" "rl")
                          (("1" (flatten)
                            (("1" (expand "lat2AWB")
                              (("1"
                                (case
                                 "NOT  mod(floor(1/2 + (2 ^ 32 / 360) * mod(rl, 360)), 2 ^ 32) = floor(1/2 + (2 ^ 32 / 360) * mod(rl, 360))")
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (lemma "mod_frac")
                                    (("1"
                                      (inst
                                       -1
                                       "floor(1 / 2 + (2 ^ 32 / 360) * mod(rl, 360))"
                                       "2^32")
                                      (("1"
                                        (cross-mult -1)
                                        (("1"
                                          (expand "fractional" -1)
                                          (("1"
                                            (rewrite "div_cancel1")
                                            (("1"
                                              (replaces -1 1)
                                              (("1"
                                                (simplify 1)
                                                (("1"
                                                  (move-terms 1 l)
                                                  (("1"
                                                    (simplify 1)
                                                    (("1"
                                                      (lemma "floor_0")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "floor(1/2 + (2 ^ 32 * mod(rl, 360)) / 360) / 2 ^ 32 ")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (cross-mult
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "mod_pos")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (mult-by
                                                                               -1
                                                                               "2^32")
                                                                              (("1"
                                                                                (div-by
                                                                                 -1
                                                                                 "360")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      (("2"
                                                                        (move-terms
                                                                         1
                                                                         r)
                                                                        (("2"
                                                                          (lemma
                                                                           "floor_plus_int")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             " -2^32"
                                                                             "1 / 2 + (2 ^ 32 * mod(rl, 360)) / 360 ")
                                                                            (("2"
                                                                              (replaces
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (case
                                                                                 "1 / 2 + (2 ^ 32 * mod(rl, 360)) / 360 + -2 ^ 32<0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "mod_lt_real")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if
                                                                                           -1)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     "2^32")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (simplify
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "div_distributes"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (eval-expr
                                                                                                       "2^32")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (simplify
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "rl<=-(360/60)/2^19")
                                                                                                            (("1"
                                                                                                              (eval-expr
                                                                                                               (!
                                                                                                                -1
                                                                                                                r))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               3)
                                                                                                              (("2"
                                                                                                                (flip-ineq
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    -4
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "RLAT")
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "k>0")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "NOT m/2^nb>=0")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (mult-by
                                                                                                                             -1
                                                                                                                             "dl(60-i, 360)")
                                                                                                                            (("2"
                                                                                                                              (mult-by
                                                                                                                               -2
                                                                                                                               "dl(60-i, 360)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "k<0")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "m=2^nb")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "div_simp")
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "k+1<=0")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "k=-1")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (case
                                                                                                                                       "NOT k+1<=-1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (case
                                                                                                                                         "i=0")
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (eval-expr
                                                                                                                                             "dl(60, 360)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (eval-expr
                                                                                                                                                 "2^19")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (case
                                                                                                                                           "NOT i=1")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (eval-expr
                                                                                                                                               "2^19")
                                                                                                                                              (("2"
                                                                                                                                                (eval-expr
                                                                                                                                                 "dl(59, 360)")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "NOT m<=2^nb-1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "m")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "NOT (forall (mm,jj :int): mm<=jj IMPLIES (mm<=jj-1 OR mm = jj))")
                                                                                                                                      (("1"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "m"
                                                                                                                                         "2^nb")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (div-by
                                                                                                                                 -1
                                                                                                                                 "2^nb")
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "div_distributes_minus"
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "div_simp")
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "NOT k+m/2^nb<= -(1/2^nb)")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "dl")
                                                                                                                                        (("2"
                                                                                                                                          (mult-by
                                                                                                                                           -1
                                                                                                                                           "(360/(60-i))")
                                                                                                                                          (("1"
                                                                                                                                            (eval-expr
                                                                                                                                             "2^19")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "i=0")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "nb")
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (eval-expr
                                                                                                                                                         (!
                                                                                                                                                          1
                                                                                                                                                          r))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (eval-expr
                                                                                                                                                         (!
                                                                                                                                                          1
                                                                                                                                                          r))
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("3"
                                                                                                                                                        (eval-expr
                                                                                                                                                         (!
                                                                                                                                                          1
                                                                                                                                                          r))
                                                                                                                                                        (("3"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("4"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("4"
                                                                                                                                                        (eval-expr
                                                                                                                                                         (!
                                                                                                                                                          1
                                                                                                                                                          r))
                                                                                                                                                        (("4"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (case
                                                                                                                                                 "not i=1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "nb")
                                                                                                                                                    (("2"
                                                                                                                                                      (split
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            2
                                                                                                                                                            r))
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            2
                                                                                                                                                            r))
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("3"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            2
                                                                                                                                                            r))
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("4"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("4"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            2
                                                                                                                                                            r))
                                                                                                                                                          (("4"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (cross-mult
                                                                                                                                             1)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "NOT k=0")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     (1
                                                                                                                                      2))
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "NOT m>=0")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (div-by
                                                                                                                                         -1
                                                                                                                                         "2^nb")
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "NOT 0/2^nb = 0")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (mult-by
                                                                                                                                               -1
                                                                                                                                               "dl(60-i, 360)")
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 "NOT 0 * dl(60 - i, 360) = 0")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (case
                                                                                                                                                     "NOT  m / 2 ^ nb * dl(60 - i, 360) = rl")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "i=0")
                              (("1" (assert) nil nil)
                               ("2"
                                (case "not i=1")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (typepred "nb")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (subrange type-eq-decl nil integers nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (Rlat_loc_surf const-decl "real" cpr_real nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (Rlat_loc const-decl "real" cpr_real nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (local_decode const-decl "unsigned_int" cpr_int nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (nnreal type-eq-decl nil real_types nil)
    (nl_awb const-decl "subrange(1, 59)" nl nil)
    (local_eq_lat formula-decl nil cpr_int nil)
    (nl_awb_equiv formula-decl nil nl nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    nil (lat2AWB const-decl "LatAWB" awb32 nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_simp formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_distributes formula-decl nil real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (mod_lt_real formula-decl nil reals_mod "reals/")
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    nil (dlat const-decl "posreal" cpr_real nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (dl const-decl "posreal" abstract_cpr nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (real_parts formula-decl nil floor_ceil nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    nil nil nil nil
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (RLAT const-decl "bool" rlat_spec nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (local_eq_lon_TCC1 0
  (local_eq_lon_TCC1-1 nil 3743849831
   ("" (skeep)
    (("" (case "i=0")
      (("1" (replaces -1) (("1" (eval-formula 1) nil nil)) nil)
       ("2" (case "not i=1")
        (("1" (assert) nil nil)
         ("2" (replaces -1) (("2" (eval-formula 2) nil nil)) nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lon_TCC2 0
  (local_eq_lon_TCC2-1 nil 3743849831
   ("" (skeep)
    (("" (typepred "yz")
      (("" (eval-expr "2^17")
        (("" (typepred "nb")
          (("" (split -2)
            (("1" (replaces -1)
              (("1" (eval-expr (! -3 r)) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (replaces -1)
              (("2" (eval-expr (! -3 r)) (("2" (assert) nil nil)) nil))
              nil)
             ("3" (replaces -1)
              (("3" (eval-expr (! -3 r)) (("3" (assert) nil nil)) nil))
              nil)
             ("4" (replaces -1)
              (("4" (eval-expr (! -3 r)) (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lon_TCC3 0
  (local_eq_lon_TCC3-1 nil 3743849831
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lon_TCC4 0
  (local_eq_lon_TCC4-1 nil 3743849831
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "xz")
        (("" (eval-expr "2^17")
          (("" (typepred "nb")
            (("" (split -2)
              (("1" (replaces -1)
                (("1" (eval-expr (! -3 r)) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (replaces -1)
                (("2" (eval-expr (! -3 r)) (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (replaces -1)
                (("3" (eval-expr (! -3 r)) (("3" (assert) nil nil))
                  nil))
                nil)
               ("4" (replaces -1)
                (("4" (eval-expr (! -3 r)) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lon_TCC5 0
  (local_eq_lon_TCC5-1 nil 3743849831
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "xz")
          (("" (assert)
            (("" (case "min(nb, 17) = nb")
              (("1" (assert) nil nil)
               ("2" (expand "min")
                (("2" (assert)
                  (("2" (typepred "nb")
                    (("2" (assert)
                      (("2" (split -2)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lon_TCC6 0
  (local_eq_lon_TCC6-1 nil 3743849831
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "nl_awb(local_decode(60 - i, ref_lat, yz))")
          (("" (eval-expr "2^6")
            (("" (case "i=0")
              (("1" (expand "max" -6)
                (("1" (lift-if -6)
                  (("1" (split -6)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (case "NOT i=1")
                (("1" (assert) nil nil)
                 ("2" (expand " max" -6)
                  (("2" (lift-if -6)
                    (("2" (split -6)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (local_decode const-decl "unsigned_int" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nl_awb const-decl "subrange(1, 59)" nl nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lon_TCC7 0
  (local_eq_lon_TCC7-1 nil 3743849831
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (typepred "xz")
            (("" (typepred "nb")
              (("" (eval-expr "2^17")
                (("" (split -3)
                  (("1" (replace -1)
                    (("1" (eval-expr (! -4 r)) (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (eval-expr (! -4 r)) (("2" (assert) nil nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (eval-expr (! -4 r)) (("3" (assert) nil nil))
                      nil))
                    nil)
                   ("4" (replace -1)
                    (("4" (eval-expr (! -4 r)) (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (local_eq_lon 0
  (local_eq_lon-1 nil 3743852948
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (skoletin)
          (("" (skoletin)
            (("" (lemma "nl_local")
              (("" (inst?)
                (("" (replace -3 :dir rl)
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        ((""
                          (case "NOT exists (nzz:{p: posnat | p<240 AND p<2^32}): nzz = IF nb= 19 THEN 4*nz ELSE nz ENDIF")
                          (("1"
                            (inst 1
                             "IF nb = 19 THEN 4 * nz ELSE nz ENDIF")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "nl")
                                  (("1"
                                    (typepred i)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "max")
                                        (("1"
                                          (lift-if -9)
                                          (("1"
                                            (split -9)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (eval-expr "2^32")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (eval-expr "2^32")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (eval-expr "2^32" _)
                                (("2"
                                  (typepred "nl")
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max")
                                        (("2"
                                          (lift-if -11)
                                          (("2"
                                            (split -11)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2"
                              (case "NOT exists (dll: { p: posreal | p<=360}): dll = 360/nzz")
                              (("1"
                                (inst 1 "360/nzz")
                                (("1" (cross-mult 1) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case
                                     "exists (xzz: {u:unsigned_int | u < 2^nb}): xzz =  If nb = 19 THEN 4*xz ELSE xz ENDIF")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (name
                                         "M"
                                         "IF nb =19 THEN m_surf(i, AWB2lat(ref_lat), yz, AWB2lon(ref_lon), xz) ELSE m(i, AWB2lat(ref_lat), yz, AWB2lon(ref_lon), xz) ENDIF")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "rl = dll*(M + xzz/2^nb)")
                                            (("1"
                                              (label "rl_def" -8)
                                              (("1"
                                                (label "lat_def" -9)
                                                (("1"
                                                  (hide (-8 -9))
                                                  (("1"
                                                    (expand
                                                     "local_decode"
                                                     1)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace
                                                         -5
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "m_surf")
                                                          (("1"
                                                            (expand
                                                             "MOD")
                                                            (("1"
                                                              (rewrite
                                                               "mod_frac")
                                                              (("1"
                                                                (case
                                                                 "M = floor(1/2 + AWB2lon(ref_lon)/dll - xzz/2^nb)")
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (lemma
                                                                     "local_zone_def")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replace
                                                                         -4
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (replace
                                                                               -5
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (case
                                                                                 "local_zone(nz, ref_lon, xz)<= nzz")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "times_reg1"
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "plus_reg1")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       " closest_div_mult_def")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "lon2AWB")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "mod_eq")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "expt_div"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -6)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "NOT 2 ^ 32 / 2 ^ nb * 2 ^ nb * local_zone(nz, ref_lon, xz) = 2 ^ 32  * local_zone(nz, ref_lon, xz)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (simplify
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "div_distributes"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "div_distributes"
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (simplify
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "NOT 2 ^ 32 * (xzz / 2 ^ nb * (360 / nzz) / 360) = (2 ^ 32 / 2 ^ nb * xzz / nzz)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT (M * (360 / nzz) / 360) = M / nzz ")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (lift-if
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "M = -1")
                                                                                                                                      (("1"
                                                                                                                                        (replaces
                                                                                                                                         -1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (simplify
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "div_distributes_minus"
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "NOT (2 ^ 32 * nzz / nzz) = 2^32")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "floor_plus_int")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "2^32"
                                                                                                                                                       " 1/2 - (2 ^ 32 / nzz) +
                 (2 ^ 32 / 2 ^ nb * xzz / nzz)")
                                                                                                                                                      (("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (simplify
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "1/2 + (2 ^ 32 / 2 ^ nb * xzz / nzz) - (2 ^ 32 / nzz) = 1/2 + (2 ^ 32 / 2 ^ nb * xzz / nzz) +
                  2 ^ 32 * (-1 / nzz)")
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (simplify
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "mod")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "div_simp")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (eval-expr
                                                                                                                                                                       "floor(1)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert
                                                                                                                                                                         :flush?
                                                                                                                                                                         T)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (move-terms
                                                                                                                                         -1
                                                                                                                                         r)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "floor_plus_int")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "-xzz"
                                                                                                                                             " 2 ^ nb * ((resolution * ref_lon) / (360 / nzz)) +
             1 / 2 * 2 ^ nb")
                                                                                                                                            (("2"
                                                                                                                                              (replaces
                                                                                                                                               -1
                                                                                                                                               -2
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "floor(2 ^ nb * ((resolution * ref_lon) / (360 / nzz)) +
             1 / 2 * 2 ^ nb
             + -xzz)")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "floor_0")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "1/2 + AWB2lon(ref_lon) / (360 / nzz) - xzz / 2 ^ nb +1")
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           "floor_plus_int"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -7
                                                                                                                                                             -1
                                                                                                                                                             :dir
                                                                                                                                                             rl)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert
                                                                                                                                                               :flush?
                                                                                                                                                               T)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "AWB2lon")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "NOT -xzz + 2 ^ nb * ((resolution * ref_lon) / (360 / nzz)) + 1/2 * 2 ^ nb
       < 0")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (div-by
                                                                                                                                                                       -1
                                                                                                                                                                       "2^nb")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (split
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case
                                                                                                                                                                           " -1 <= 1/2 + resolution * ref_lon / (360 / nzz) - xzz / 2 ^ nb")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide
                                                                                                                                                                             2)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case
                                                                                                                                                                                 "NOT -1 <-xzz/2^nb")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (move-terms
                                                                                                                                                                                   1
                                                                                                                                                                                   l
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (move-terms
                                                                                                                                                                                     1
                                                                                                                                                                                     r
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (simplify
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "NOT xzz / 2 ^ nb < 1")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (cross-mult
                                                                                                                                                                                             1)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "AWB2lon")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           -3
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -3
                                                                                                                                             2
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "2 ^ 32 * (M / nzz) = (2 ^ 32 * M / nzz)")
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "mod")
                                                                                                                                                    (("1"
                                                                                                                                                      (eval-formula
                                                                                                                                                       2)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "nzz")
                                                                                        (("2"
                                                                                          (mult-by
                                                                                           -2
                                                                                           "2^(33-nb)")
                                                                                          (("2"
                                                                                            (eval-expr
                                                                                             "2^32")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "nb")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -4
                                                                                                      r
                                                                                                      2))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -4
                                                                                                      r
                                                                                                      2))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -4
                                                                                                      r
                                                                                                      2))
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (eval-expr
                                                                                                     (!
                                                                                                      -4
                                                                                                      r
                                                                                                      2))
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "2^nb")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "nzz")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "xzz")
                                                                                          (("2"
                                                                                            (mult-by
                                                                                             -4
                                                                                             "2^nb")
                                                                                            (("2"
                                                                                              (eval-expr
                                                                                               "2^32")
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "nb")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (eval-expr
                                                                                                       (!
                                                                                                        -4
                                                                                                        r))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (eval-expr
                                                                                                       (!
                                                                                                        -4
                                                                                                        r))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (eval-expr
                                                                                                       (!
                                                                                                        -4
                                                                                                        r))
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("4"
                                                                                                      (eval-expr
                                                                                                       (!
                                                                                                        -4
                                                                                                        r))
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "nzz")
                                                                                    (("2"
                                                                                      (mult-by
                                                                                       -4
                                                                                       "2^nb")
                                                                                      (("2"
                                                                                        (mult-by
                                                                                         -3
                                                                                         "2^nb")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "nb")
                                                                                          (("2"
                                                                                            (eval-expr
                                                                                             "2^32")
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    -5
                                                                                                    r))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    -5
                                                                                                    r))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    -5
                                                                                                    r))
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("4"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    -5
                                                                                                    r))
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lift-if
                                                                                   -1)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "resolution"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -5
                                                                                           -1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT (360 / 2 ^ 32 * ref_lon) / (360 / nzz) < nzz")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "ref_lon")
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (cross-mult
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (cancel-by
                                                                                                         1
                                                                                                         "nzz")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "NOT floor(1/2 + (360 / 2 ^ 32 * ref_lon) / (360 / nzz) - xzz / 2 ^ nb) <= floor(nzz +1/2)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "floor_plus_int")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "nzz"
                                                                                                   "1/2")
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (eval-expr
                                                                                                       "floor(1/2)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lift-if
                                                                   -2)
                                                                  (("2"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "floor_plus_int")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             " floor(AWB2lon(ref_lon) / dlon_loc_surf(i, AWB2lat(ref_lat), yz)) "
                                                                             "1/2 +
             fractional(AWB2lon(ref_lon) /
                         dlon_loc_surf(i, AWB2lat(ref_lat), yz))
             - xz / 2 ^ 17")
                                                                            (("1"
                                                                              (lemma
                                                                               "real_parts")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "AWB2lon(ref_lon) /
                         dlon_loc_surf(i, AWB2lat(ref_lat), yz)")
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -1
                                                                                   r
                                                                                   1)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (simplify
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT dll =  dlon_loc_surf(i, AWB2lat(ref_lat), yz)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "dlon_loc_surf")
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lift-if
                                                                                                             -10)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -10)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     "lat_def")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (reveal
                                                                                                                     "lat_def")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       "lat_def")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "max")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (eval-expr
                                                                                                 "2^17")
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   "2^19")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "m")
                                                                        (("2"
                                                                          (expand
                                                                           "MOD")
                                                                          (("2"
                                                                            (rewrite
                                                                             "mod_frac")
                                                                            (("2"
                                                                              (lemma
                                                                               "floor_plus_int")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 " floor(AWB2lon(ref_lon) / dlon_loc(i, AWB2lat(ref_lat), yz))"
                                                                                 "1/2 +
             fractional(AWB2lon(ref_lon) /
                         dlon_loc(i, AWB2lat(ref_lat), yz))
             - xz / 2 ^ nb")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "real_parts")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (move-terms
                                                                                       -1
                                                                                       r
                                                                                       1)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (simplify
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "NOT dll = dlon_loc(i, AWB2lat(ref_lat), yz)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "dlon_loc")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "max")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               -9)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -9)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       "lat_def")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (reveal
                                                                                                                     "lat_def")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             "lat_def")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "max")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "nb = 19")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand
                                                     "Rlon_loc_surf")
                                                    (("1"
                                                      (expand
                                                       "dlon_loc_surf")
                                                      (("1"
                                                        (replace
                                                         -9
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -6
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               1)
                                                              (("1"
                                                                (eval-expr
                                                                 "2^19")
                                                                (("1"
                                                                  (replace
                                                                   -6)
                                                                  (("1"
                                                                    (eval-expr
                                                                     "2^17")
                                                                    (("1"
                                                                      (lift-if
                                                                       -10)
                                                                      (("1"
                                                                        (split
                                                                         -10)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replace
                                                                             -14
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "max")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "dll = 90/(nl-i)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "max")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (replaces -3)
                                                    (("2"
                                                      (replaces -5)
                                                      (("2"
                                                        (hide 3)
                                                        (("2"
                                                          (expand
                                                           "Rlon_loc")
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "dlon_loc")
                                                              (("2"
                                                                (replace
                                                                 -5
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (replace
                                                                     -7
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (lift-if
                                                                       2)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "max")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "max")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -6)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (typepred "xzz")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (typepred "yz")
                                            (("3"
                                              (typepred "nb")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (case
                                                   "NOT min(nb, 17) = nb")
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       1
                                       "IF nb = 19 THEN 4 * xz ELSE xz ENDIF")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "xz")
                                            (("1"
                                              (eval-expr "2^32")
                                              (("1"
                                                (typepred "nb")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (eval-expr
                                                         (! -4 r))
                                                        (("1"
                                                          (eval-expr
                                                           "2^12")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (eval-expr
                                                         (! -4 r))
                                                        (("2"
                                                          (eval-expr
                                                           "2^14")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (eval-expr
                                                         (! -4 r))
                                                        (("3"
                                                          (eval-expr
                                                           "2^17")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (typepred "xz")
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (eval-expr (! -1 r))
                                              (("2"
                                                (eval-expr "2^19")
                                                (("2"
                                                  (eval-expr "2^32")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (local_decode const-decl "unsigned_int" cpr_int nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (nl_awb const-decl "subrange(1, 59)" nl nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (Rlat_loc_surf const-decl "real" cpr_real nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (Rlat_loc const-decl "real" cpr_real nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Rlon_loc_surf const-decl "real" cpr_real nil)
    (LonAWB type-eq-decl nil awb32 nil)
    (AWB2lon const-decl "{x: real | x >= 0 AND x < 360}" awb32 nil)
    (Rlon_loc const-decl "real" cpr_real nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (lon2AWB const-decl "LonAWB" awb32 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (nl_local formula-decl nil cpr_int nil) nil nil nil
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    nil nil
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (dlon_loc_surf const-decl "posreal" cpr_real nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (dlon_loc const-decl "posreal" cpr_real nil)
    (real_parts formula-decl nil floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (times_div2 formula-decl nil real_props nil)
    (times_reg1 formula-decl nil uint32 nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (mod_eq formula-decl nil reals_mod "reals/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_div formula-decl nil exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_distributes formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (div_simp formula-decl nil real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (resolution const-decl "real" awb32 nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (local_zone const-decl "unsigned_int" cpr_int nil)
    (local_zone_def formula-decl nil cpr_int nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (global_zone_TCC1 0
  (global_zone_TCC1-1 nil 3744475827 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (global_zone_TCC2 0
  (global_zone_TCC2-1 nil 3744475827
   ("" (skeep)
    (("" (typepred "nz")
      (("" (eval-expr "2^6")
        (("" (eval-expr "2^32") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (global_zone_TCC3 0
  (global_zone_TCC3-1 nil 3744475827
   ("" (skeep) (("" (eval-formula 2) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (global_zone_TCC4 0
  (global_zone_TCC4-1 nil 3744475827
   ("" (skeep)
    (("" (typepred "mes0")
      (("" (typepred "nb")
        (("" (eval-expr "2^32") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil))
   nil))
 (global_zone_TCC5 0
  (global_zone_TCC5-1 nil 3744475827
   ("" (skeep)
    (("" (typepred "nb")
      (("" (split -2)
        (("1" (replace -1) (("1" (eval-formula 2) nil nil)) nil)
         ("2" (replace -1) (("2" (eval-formula 2) nil nil)) nil)
         ("3" (replace -1) (("3" (eval-formula 2) nil nil)) nil)
         ("4" (replace -1) (("4" (eval-formula 2) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (global_zone_TCC6 0
  (global_zone_TCC6-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (eval-expr "2^32")
        (("" (typepred "mes1")
          (("" (hide -3)
            (("" (typepred "nb") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (global_zone_TCC7 0
  (global_zone_TCC7-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (eval-expr "2^32") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (global_zone_TCC8 0
  (global_zone_TCC8-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "nb")
          (("" (split -2)
            (("1" (replace -1) (("1" (eval-formula 2) nil nil)) nil)
             ("2" (assert)
              (("2" (replace -1) (("2" (eval-formula 2) nil nil)) nil))
              nil)
             ("3" (replace -1) (("3" (eval-formula 2) nil nil)) nil)
             ("4" (replace -1) (("4" (eval-formula 2) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (global_zone_TCC9 0
  (global_zone_TCC9-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep) (("" (typepred "nb") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil))
   nil))
 (global_zone_TCC10 0
  (global_zone_TCC10-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (typepred "nz")
            (("" (assert)
              (("" (eval-expr "2^6")
                (("" (eval-expr "2^32") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (global_zone_eq_TCC1 0
  (global_zone_eq_TCC1-1 nil 3744538450 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (global_zone_eq 0
  (global_zone_eq-1 nil 3744539048
   ("" (skeep)
    (("" (case "mes0<2^17")
      (("1" (label "mes0_pred" -1)
        (("1" (hide -1)
          (("1" (case "mes1<2^17")
            (("1" (label "mes1_pred" -1)
              (("1" (hide -1)
                (("1" (expand "global_zone")
                  (("1" (assert)
                    (("1"
                      (name "a" "plus
                                                  (times(minus(nz, 1), mes0),
                                                   2 ^ (min(nb,17) - 1))")
                      (("1" (replace -1)
                        (("1" (rewrite "minus_reg1")
                          (("1" (case "(nz-1)*mes0 <2^23")
                            (("1" (rewrite " times_reg1" -2)
                              (("1"
                                (case
                                 "mes0 * nz - mes0 +2^(min(nb,17)-1)< 2^23 + 2^18")
                                (("1"
                                  (rewrite "plus_reg1" -3)
                                  (("1"
                                    (case "a>=0")
                                    (("1"
                                      (rewrite "minus_reg1" 2)
                                      (("1"
                                        (case "(nz-i)*2^18 <2^24")
                                        (("1"
                                          (rewrite "times_reg1" 2)
                                          (("1"
                                            (case "nz*mes1 < 2^23")
                                            (("1"
                                              (rewrite "times_reg1")
                                              (("1"
                                                (rewrite "plus_reg1" 2)
                                                (("1"
                                                  (rewrite
                                                   "minus_reg1")
                                                  (("1"
                                                    (expand
                                                     "div_shift")
                                                    (("1"
                                                      (replace
                                                       -6
                                                       2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (case
                                                         "exists (j: int) : (2 ^ 18 * nz - 2 ^ 18 * i - nz * mes1 +
                                                      (2 ^ (min(nb, 17) - 1) - mes0 + mes0 * nz))
                                                     / 2 ^ min(nb, 17) = j * (nz-i) + (-1 * (nz * mes1) - mes0 + mes0 * nz) / 2 ^ min(nb, 17) + 1/2")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (typepred
                                                               "mod_uint(floor(j * (nz - i) +
                                                  (-1 * (nz * mes1) - mes0 + mes0 * nz) /
                                                   2 ^ min(nb, 17)
                                                  + 1 / 2),
                                           nz - i)")
                                                              (("1"
                                                                (case
                                                                 "mod(floor(j * (nz - i) +
                                                         (-1 * (nz * mes1) - mes0 + mes0 * nz) /
                                                          2 ^ min(nb, 17)
                                                         + 1 / 2),
                                                  nz - i) = floor(1/2 + (-1 * (nz * mes1) - mes0 + mes0 * nz) / 2 ^ min(nb, 17)
                                                 - i * j
                                                 + j * nz)
                                           +
                                           floor(floor(1/2 +
                                                        (-1 * (nz * mes1) - mes0 + mes0 * nz) /
                                                         2 ^ min(nb, 17)
                                                        - i * j
                                                        + j * nz)
                                                  / (nz - i))
                                            * i
                                           -
                                           floor(floor(1/2 +
                                                        (-1 * (nz * mes1) - mes0 + mes0 * nz) /
                                                         2 ^ min(nb, 17)
                                                        - i * j
                                                        + j * nz)
                                                  / (nz - i))
                                            * nz")
                                                                (("1"
                                                                  (replaces
                                                                   -3
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -)
                                                                      (("1"
                                                                        (lemma
                                                                         "floor_plus_int")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "j * (nz - i) "
                                                                           "(-1 * (nz * mes1) - mes0 + mes0 * nz) / 2 ^ min(nb, 17)
                                                 + 1 / 2")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "mod_multiple")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "floor((-1 * (nz * mes1) - mes0 + mes0 * nz) / 2 ^ min(nb, 17) +
                                                 1 / 2)"
                                                                                 "nz-i"
                                                                                 " j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "mod")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "2 ^ 18 * nz - 2 ^ 18 * i - nz * mes1 >=0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "mes0*(nz-1) >=0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "(2 ^ (min(nb, 17) - 1) + 2 ^ 18 * nz - 2 ^ 18 * i - nz * mes1 -
                                                mes0
                                                + mes0 * nz)
                                               / 2 ^ min(nb, 17)>=0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "nz-1 >=0")
                                                                              (("1"
                                                                                (mult-by
                                                                                 -1
                                                                                 "mes0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (eval-expr
                                                                           "2^18")
                                                                          (("2"
                                                                            (reveal
                                                                             "mes1_pred")
                                                                            (("2"
                                                                              (mult-by
                                                                               -1
                                                                               "nz")
                                                                              (("2"
                                                                                (eval-expr
                                                                                 "2^17")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           1
                                                           "2^(18- min(nb, 17))")
                                                          (("1"
                                                            (rewrite
                                                             "expt_div"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "expt_div"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "nb")
                                                            (("2"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (eval-formula
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (eval-formula
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (replace
                                                                 -1)
                                                                (("3"
                                                                  (eval-formula
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (replace
                                                                 -1)
                                                                (("4"
                                                                  (eval-formula
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (reveal
                                                       "mes1_pred")
                                                      (("2"
                                                        (mult-by
                                                         -1
                                                         "nz")
                                                        (("2"
                                                          (eval-expr
                                                           "2^18")
                                                          (("2"
                                                            (eval-expr
                                                             "2^17")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (eval-expr "2^18")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (eval-expr "2^32")
                                                  (("2"
                                                    (eval-expr
                                                     (! -3 r))
                                                    (("2"
                                                      (eval-expr
                                                       (! -6 r))
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (case "nz-i>=0")
                                                  (("1"
                                                    (mult-by -1 "2^18")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (eval-expr "2^23")
                                                (("2"
                                                  (eval-expr "2^32")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (typepred "nz")
                                                (("2"
                                                  (reveal "mes1_pred")
                                                  (("2"
                                                    (mult-ineq -3 -1)
                                                    (("2"
                                                      (eval-expr
                                                       (! -1 r))
                                                      (("2"
                                                        (eval-expr
                                                         "2^23")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (eval-expr "2^24")
                                            (("2"
                                              (eval-expr "2^32")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "nz")
                                          (("2"
                                            (mult-by -2 "2^18")
                                            (("2"
                                              (eval-expr "2^6")
                                              (("2"
                                                (eval-expr "2^24")
                                                (("2"
                                                  (eval-expr "2^18")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (eval-expr (! -1 r))
                                    (("2"
                                      (eval-expr "2^32")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "nb")
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (eval-formula 1)
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (eval-formula 1)
                                          nil
                                          nil))
                                        nil)
                                       ("3"
                                        (replace -1)
                                        (("3"
                                          (eval-formula 1)
                                          nil
                                          nil))
                                        nil)
                                       ("4"
                                        (replace -1)
                                        (("4"
                                          (eval-formula 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (case "nz -1 >=0")
                                    (("1"
                                      (reveal "mes0_pred")
                                      (("1"
                                        (case "mes0>=0")
                                        (("1"
                                          (mult-ineq -1 -3)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (eval-expr "2^23")
                                  (("2"
                                    (eval-expr "2^18")
                                    (("2"
                                      (typepred "nb")
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (eval-expr (! 1 l 3))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (eval-expr (! 1 l 3))
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (eval-expr (! 1 l 3))
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -1)
                                          (("4"
                                            (eval-expr (! 1 l 3))
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (eval-expr "2^23")
                                (("2"
                                  (eval-expr "2^32")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "nz")
                              (("2"
                                (reveal "mes0_pred")
                                (("2"
                                  (mult-ineq -1 -3)
                                  (("2"
                                    (eval-expr "2^17")
                                    (("2"
                                      (eval-expr "2^6")
                                      (("2"
                                        (eval-expr "2^23")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "nb")
                        (("2" (split -2)
                          (("1" (replace -1)
                            (("1" (eval-formula 1) nil nil)) nil)
                           ("2" (replace -1)
                            (("2" (eval-formula 1) nil nil)) nil)
                           ("3" (replace -1)
                            (("3" (eval-formula 1) nil nil)) nil)
                           ("4" (replace -1)
                            (("4" (eval-formula 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "mes1")
              (("2" (hide 3)
                (("2" (typepred "nb") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3)
        (("2" (typepred "mes0")
          (("2" (typepred "nb") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (global_zone const-decl "unsigned_int" cpr_int nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (times const-decl "unsigned_int" uint32 nil)
    (minus const-decl "unsigned_int" uint32 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_reg1 formula-decl nil uint32 nil)
    (times_reg1 formula-decl nil uint32 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (plus_reg1 formula-decl nil uint32 nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (subrange type-eq-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (expt_div formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (div_shift const-decl "unsigned_int" uint32 nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (global_decode_TCC1 0
  (global_decode_TCC1-1 nil 3744475827
   ("" (skeep)
    (("" (typepred "mes1")
      (("" (typepred "mes0")
        (("" (eval-expr "2^32") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (global_decode_TCC2 0
  (global_decode_TCC2-1 nil 3744475827
   ("" (skeep)
    (("" (typepred "mes0")
      (("" (typepred "mes1")
        (("" (typepred "nb")
          (("" (eval-expr "2^32") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (global_decode_TCC3 0
  (global_decode_TCC3-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "nz")
        (("" (eval-expr "2^6")
          (("" (assert)
            (("" (eval-expr "2^32")
              (("" (assert)
                (("" (expand "max")
                  (("" (lift-if 1)
                    (("" (split 1)
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (global_decode_TCC4 0
  (global_decode_TCC4-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "nz")
        (("" (eval-expr "2^6")
          (("" (eval-expr "2^32")
            (("" (assert)
              (("" (expand "max" 2)
                (("" (lift-if 2)
                  (("" (split 2)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (global_decode_TCC5 0
  (global_decode_TCC5-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (eval-expr "2^32")
          (("" (typepred "nb")
            (("" (split -2)
              (("1" (replace -1)
                (("1" (eval-expr (! 1 l)) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (eval-expr (! 1 l)) (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (replace -1)
                (("3" (eval-expr (! 1 l)) (("3" (assert) nil nil))
                  nil))
                nil)
               ("4" (replace -1)
                (("4" (eval-expr (! 1 l)) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil))
   nil))
 (global_decode_TCC6 0
  (global_decode_TCC6-1 nil 3744475827
   ("" (assert)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "nz")
              (("" (assert)
                (("" (lift-if -5)
                  (("" (split -5)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (global_decode_TCC7 0
  (global_decode_TCC7-1 nil 3744475827
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (typepred "nb")
            (("" (assert)
              (("" (eval-expr "2^32")
                (("" (assert)
                  (("" (split -3)
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil) ("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil))
   nil))
 (global_eq_lat_TCC1 0
  (global_eq_lat_TCC1-1 nil 3744562642 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (global_eq_lat_TCC2 0
  (global_eq_lat_TCC2-1 nil 3744562642 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (global_eq_lat_TCC3 0
  (global_eq_lat_TCC3-1 nil 3744562642
   ("" (skeep)
    (("" (typepred "mes0")
      (("" (typepred "nb") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil))
   nil))
 (global_eq_lat_TCC4 0
  (global_eq_lat_TCC4-1 nil 3744562642
   ("" (skeep)
    (("" (typepred "nb")
      (("" (assert) (("" (typepred "mes1") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lat_TCC5 0
  (global_eq_lat_TCC5-1 nil 3744617574
   ("" (skeep) (("" (eval-formula 1) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (global_eq_lat_TCC6 0
  (global_eq_lat_TCC6-1 nil 3744617574 ("" (subtype-tcc) nil nil)
   ((subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (^ const-decl "real" exponentiation nil) nil
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (dlat const-decl "posreal" cpr_real nil) nil
    (Rlat_glo_pre const-decl "real" cpr_real nil)
    (Rlat_glo const-decl "real" cpr_real nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (global_eq_lat 0
  (global_eq_lat-2 nil 3744638012
   ("" (skeep)
    (("" (case "mes0<2^17")
      (("1" (label "mes0_pred" -1)
        (("1" (hide -1)
          (("1" (case "mes1<2^17")
            (("1" (label "mes1_pred" -1)
              (("1" (hide -1)
                (("1"
                  (name "rl"
                        " IF nb=19 THEN Rlat_glo_pre_surf(i, mes0, mes1)
                                                   ELSE Rlat_glo(i, mes0, mes1)
                                                   ENDIF")
                  (("1" (replace -1 1)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "global_decode")
                          (("1" (rewrite "global_zone_eq")
                            (("1"
                              (case "exists (gl_zone : {j: nat | j<=60-i}):
                                                      gl_zone = mod(floor
                                                                                           (1/2
                                                                                            +
                                                                                            (59 * mes0 - 60 * mes1)
                                                                                            /
                                                                                            2 ^ min(nb, 17)),
                                                                                           60 - i)")
                              (("1"
                                (skeep)
                                (("1"
                                  (replace -1 :dir rl)
                                  (("1"
                                    (case "nb=19")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3 :dir rl)
                                        (("1"
                                          (expand
                                           "Rlat_glo_pre_surf"
                                           1)
                                          (("1"
                                            (expand "lat2AWB")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (case
                                                   "2^19*gl_zone <= 2^19*60")
                                                  (("1"
                                                    (rewrite
                                                     "times_reg1")
                                                    (("1"
                                                      (case
                                                       "2 ^ 19 * gl_zone + 
                            4 * IF i = 0 THEN mes0 ELSE mes1 ENDIF <= 2^19*61")
                                                      (("1"
                                                        (rewrite
                                                         "plus_reg1")
                                                        (("1"
                                                          (lemma
                                                           "closest_div_mult_def")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "MOD(j_surf(mes0, mes1), 60 - i) = gl_zone")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "mod"
                                                                     1
                                                                     3)
                                                                    (("1"
                                                                      (case
                                                                       "360 *
                   (floor((dlat_surf(i) * gl_zone +
                            dlat_surf(i) *
                             ((IF i = 0 THEN mes0 ELSE mes1 ENDIF) /
                               2 ^ 17))
                           / 360)
                     * (2 ^ 32 / 360)) = 2^32*
                   floor((dlat_surf(i) * gl_zone +
                            dlat_surf(i) *
                             ((IF i = 0 THEN mes0 ELSE mes1 ENDIF) /
                               2 ^ 17))
                           / 360)
                     ")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "floor_plus_int")
                                                                          (("1"
                                                                            (name
                                                                             "mes"
                                                                             "IF i = 0 THEN mes0 ELSE mes1 ENDIF")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "
                 - 2 ^ 32 *
                   floor((dlat_surf(i) * gl_zone +
                           dlat_surf(i) *
                            (mes /
                              2 ^ 17))
                          / 360)"
                                                                                 "dlat_surf(i) * (2 ^ 32 / 360) * gl_zone +
                  dlat_surf(i) * (2 ^ 32 / 360) *
                   (mes / 2 ^ 17) +1/2")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "mod_multiple")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       " floor(dlat_surf(i) * (2 ^ 32 / 360) * gl_zone +
                  dlat_surf(i) * (2 ^ 32 / 360) * (mes / 2 ^ 17)
                  + 1 / 2)"
                                                                                       "2^32"
                                                                                       "-floor((dlat_surf(i) * gl_zone + dlat_surf(i) * (mes / 2 ^ 17))
                    / 360)")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "dlat_surf")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "div_distributes"
                                                                                             1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (eval-expr
                                                                                               "2^32")
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 "2^13")
                                                                                                (("1"
                                                                                                  (eval-expr
                                                                                                   "2^17")
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     "2^19")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "240-4*i = 4*(60-i)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "i=1")
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (case
                                                                                                               "NOT i=0")
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "i")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "NOT ( forall (ii:int): 0<=ii AND ii<=1 IMPLIES (ii=0 OR ii=1))")
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "i")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (eval-expr
                                                                           "2^32")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if
                                                                               1)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -4)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "MOD")
                                                                      (("2"
                                                                        (lemma
                                                                         "mod_eq")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "min")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "j_surf")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "mod")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (eval-expr
                                                               "2^14")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (eval-expr
                                                                   "2^32")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (eval-expr
                                                           (! -1 r))
                                                          (("2"
                                                            (eval-expr
                                                             "2^32")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (typepred
                                                               "mes0")
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (eval-expr
                                                                   "2^17")
                                                                  (("1"
                                                                    (eval-expr
                                                                     "2^19")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (typepred
                                                               "mes1")
                                                              (("2"
                                                                (expand
                                                                 "min")
                                                                (("2"
                                                                  (eval-expr
                                                                   "2^17")
                                                                  (("2"
                                                                    (eval-expr
                                                                     "2^19")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (eval-expr
                                                       "2^19")
                                                      (("2"
                                                        (eval-expr
                                                         "2^32")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "gl_zone")
                                                    (("2"
                                                      (eval-expr
                                                       "2^19")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "2^nb*gl_zone < 60*2^17")
                                        (("1"
                                          (rewrite "times_reg1")
                                          (("1"
                                            (case
                                             "2 ^ nb * gl_zone + IF i = 0 THEN mes0 ELSE mes1 ENDIF < 61*2^17")
                                            (("1"
                                              (rewrite "plus_reg1")
                                              (("1"
                                                (rewrite
                                                 "closest_div_mult_def")
                                                (("1"
                                                  (expand "Rlat_glo")
                                                  (("1"
                                                    (expand "lat2AWB")
                                                    (("1"
                                                      (case
                                                       "mod(rl, 360) = mod(Rlat_glo_pre(i, mes0, mes1), 360)")
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lemma
                                                           "mod_eq")
                                                          (("1"
                                                            (expand
                                                             "mod"
                                                             2
                                                             3)
                                                            (("1"
                                                              (lemma
                                                               "mod_multiple")
                                                              (("1"
                                                                (case
                                                                 "360 *
                                                (floor(Rlat_glo_pre(i, mes0, mes1) / 360) *
                                                  (2 ^ 32 / 360)) = 2^32*floor(Rlat_glo_pre(i, mes0, mes1) / 360)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (lemma
                                                                     "floor_plus_int")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "-2^32*floor(Rlat_glo_pre(i, mes0, mes1) / 360)"
                                                                       "1/2 + Rlat_glo_pre(i, mes0, mes1) * (2 ^ 32 / 360)")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "floor(1 / 2 + Rlat_glo_pre(i, mes0, mes1) * (2 ^ 32 / 360))"
                                                                             "2^32"
                                                                             "- floor(Rlat_glo_pre(i, mes0, mes1) / 360)")
                                                                            (("1"
                                                                              (replaces
                                                                               -1
                                                                               2)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "expt_div"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "max")
                                                                                  (("1"
                                                                                    (case
                                                                                     "NOT (2 ^ nb * (2 ^ 32 / 2 ^ nb) * gl_zone +
                                                 2 ^ 32 / 2 ^ nb * IF i = 0 THEN mes0 ELSE mes1 ENDIF)
                                                / (60 - i) = ((360/(60-i))*(gl_zone +(IF i = 0 THEN mes0 ELSE mes1 ENDIF)/2^nb))* (2^32/360)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "Not (360 / (60 - i)) * (2 ^ 32 / 360) = 2^32/(60-i)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "NOT 2 ^ nb * (2 ^ 32 / 2 ^ nb) = 2^32")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "div_distributes"
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Rlat_glo_pre")
                                                                                        (("2"
                                                                                          (case
                                                                                           "MOD(j(mes0, mes1), 60 - i) = gl_zone")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "dlat")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "360 / (60 - i) * (2 ^ 32 / 360) = (360 / (60 - i)) * (2 ^ 32 / 360)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "MOD")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "j")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -5
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "min(nb, 17) = nb")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "min")
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "nb")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "mod_eq")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -4
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (simplify
                                                                     1)
                                                                    (("2"
                                                                      (lift-if
                                                                       1)
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "mod")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (lemma
                                                                             "mod_multiple")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "0"
                                                                               "360"
                                                                               "-1")
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "mod")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "nb")
                                                  (("2"
                                                    (eval-expr "2^32")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide-all-but
                                                           (-3 1))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (eval-expr (! -1 r))
                                                (("2"
                                                  (eval-expr "2^32")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (reveal "mes1_pred")
                                                  (("3"
                                                    (eval-expr
                                                     (! -1 r))
                                                    (("3"
                                                      (eval-expr
                                                       "2^32")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (reveal "mes0_pred")
                                                  (("4"
                                                    (eval-expr
                                                     (! -1 r))
                                                    (("4"
                                                      (eval-expr
                                                       "2^32")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (reveal "mes1_pred")
                                              (("2"
                                                (reveal "mes0_pred")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (eval-expr (! -1 r))
                                            (("2"
                                              (eval-expr "2^32")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "gl_zone")
                                          (("2"
                                            (mult-by -2 "2^nb")
                                            (("2"
                                              (eval-expr (! 1 r))
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (hide-all-but
                                                   (-2 -3 1 2))
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (typepred "nb")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst
                                 1
                                 " mod(floor(1 / 2 + (59 * mes0 - 60 * mes1) / 2 ^ min(nb, 17)),
                                             60 - i)")
                                (("2"
                                  (name
                                   "zone"
                                   "floor(1/2 +
                                                                        (59 * mes0 - 60 * mes1) / 2 ^ min(nb, 17))")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "mod_pos")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "mod" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (typepred "mes1")
                          (("2" (typepred "nb") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (flatten)
                      (("3" (typepred "mes0")
                        (("3" (typepred "nb") (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (flatten)
                      (("4" (typepred "mes1")
                        (("4" (typepred "nb") (("4" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (flatten)
                      (("5" (typepred "mes0")
                        (("5" (typepred "nb") (("5" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "mes1")
                (("2" (typepred "nb") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "mes0")
          (("2" (typepred "nb") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Rlat_glo const-decl "real" cpr_real nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (subrange type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (Rlat_glo_pre const-decl "real" cpr_real nil) nil
    (dlat const-decl "posreal" cpr_real nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt_div formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (mod_eq formula-decl nil reals_mod "reals/")
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_distributes formula-decl nil real_props nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    nil
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (posreal nonempty-type-eq-decl nil real_types nil) nil
    (plus_reg1 formula-decl nil uint32 nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (times_reg1 formula-decl nil uint32 nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (mod_pos formula-decl nil reals_mod "reals/") nil nil
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nzint_min application-judgement "{k: nzint | k <= i AND k <= j}"
     real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posrat_min application-judgement "{s: posrat | s <= q AND s <= r}"
     real_defs nil)
    (nonneg_rat_min application-judgement
     "{s: nonneg_rat | s <= q AND s <= r}" real_defs nil)
    (nzrat_min application-judgement "{s: nzrat | s <= q AND s <= r}"
     real_defs nil)
    (rat_min application-judgement "{s: rat | s <= q AND s <= r}"
     real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (global_zone_eq formula-decl nil cpr_int nil))
   nil)
  (global_eq_lat-1 nil 3744636241
   ("" (skeep)
    ((""
      (name "rl" " IF nb=19 THEN Rlat_glo_surf(i, mes0, mes1)
               ELSE Rlat_glo(i, mes0, mes1)
               ENDIF")
      (("1" (replace -1 1)
        (("1" (assert)
          (("1" (flatten)
            (("1" (expand "global_decode")
              (("1" (rewrite "global_zone_eq")
                (("1"
                  (case "exists (gl_zone : {j: posnat | j<=60-i}):
          gl_zone = mod(floor
                                               (1/2
                                                +
                                                (59 * mes0 - 60 * mes1)
                                                /
                                                2 ^ min(nb, 17)),
                                               60 - i)")
                  (("1" (skeep)
                    (("1" (replace -1 :dir rl)
                      (("1" (case "nb=19")
                        (("1" (assert) (("1" (postpone) nil nil)) nil)
                         ("2" (assert)
                          (("2" (case "2^nb*gl_zone < 60*2^17")
                            (("1" (rewrite "times_reg1")
                              (("1" (postpone) nil nil)
                               ("2"
                                (eval-expr (! -1 r))
                                (("2"
                                  (eval-expr "2^32")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "gl_zone")
                              (("2"
                                (mult-by -2 "2^nb")
                                (("2"
                                  (eval-expr (! 1 r))
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide-all-but (-2 -3 1 2))
                                      (("2"
                                        (typepred "i")
                                        (("2"
                                          (typepred "nb")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst 1
                     " mod(floor(1 / 2 + (59 * mes0 - 60 * mes1) / 2 ^ min(nb, 17)),
             60 - i)")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (flatten)
            (("2" (typepred "mes1")
              (("2" (typepred "nb") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (flatten)
          (("3" (typepred "mes0")
            (("3" (typepred "nb") (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (flatten)
          (("4" (typepred "mes1")
            (("4" (typepred "nb") (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (flatten)
          (("5" (typepred "mes0")
            (("5" (typepred "nb") (("5" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (north_lat?_TCC1 0
  (north_lat?_TCC1-1 nil 3745143183
   ("" (skeep) (("" (eval-formula 1) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (north_lat_eq 0
  (north_lat_eq-1 nil 3745251093
   ("" (skeep)
    (("" (expand "norlat?")
      (("" (expand "north_lat?")
        ((""
          (case " NOT ( abs((360 / 2 ^ 32) *
                  floor(1/2 + Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360))
                  - own_lat)
              <= 30 - 1/3 * (360 / 2 ^ 32) = abs(
                  floor(1/2 + Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360))
                  - (2^32/360)*own_lat)
              <= 357913941)")
          (("1" (hide 2)
            (("1" (iff 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (mult-by -1 "abs((2^32/360))")
                    (("1" (rewrite "abs_mult" :dir rl)
                      (("1" (eval-expr "2^32/360")
                        (("1" (eval-expr (! -2 r))
                          (("1" (eval-expr "360/2^32")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (mult-by 1 "abs((2^32/360))")
                    (("2" (rewrite "abs_mult" :dir rl)
                      (("2" (eval-expr "360/2^32")
                        (("2" (eval-expr (! 1 r))
                          (("2" (eval-expr "2^32/360")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replaces -1)
            (("2" (lemma "global_eq_lat")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "lat2AWB")
                    (("2"
                      (case "NOT floor(Rlat_glo_pre_surf(i, mes0, mes1)/360) = 0")
                      (("1" (hide 2)
                        (("1" (lemma "floor_0")
                          (("1" (inst?)
                            (("1" (flatten)
                              (("1"
                                (hide -1)
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "Rlat_glo_pre_surf")
                                      (("2"
                                        (cross-mult 1)
                                        (("2"
                                          (expand "MOD")
                                          (("2"
                                            (lemma "mod_pos")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "dlat_surf(i)")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (mult-by
                                                         -1
                                                         " (IF i = 0 THEN mes0 ELSE mes1 ENDIF)")
                                                        (("2"
                                                          (case
                                                           "NOT 0 * (IF i = 0 THEN mes0 ELSE mes1 ENDIF) = 0")
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (mult-by
                                                               -4
                                                               "dlat_surf(i)")
                                                              (("2"
                                                                (div-by
                                                                 -3
                                                                 "2^17")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "NOT  0 * dlat_surf(i) = 0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (case
                                                                         "NOT dlat_surf(i) * (IF i = 0 THEN mes0 ELSE mes1 ENDIF) / 2 ^ 17 = (dlat_surf(i) * (IF i = 0 THEN mes0 ELSE mes1 ENDIF)) / 2 ^ 17")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (case
                                                                             "NOT mod(j_surf(mes0, mes1), 60 - i) * dlat_surf(i) = dlat_surf(i) * reals@reals_mod.mod(j_surf(mes0, mes1), 60 - i)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (lift-if
                                                                                 1)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (cross-mult 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "mod" -2 2)
                        (("2" (replace -1)
                          (("2" (expand "mod" -2)
                            (("2" (lemma "floor_0")
                              (("2"
                                (inst
                                 -1
                                 "floor(1/2 +
                      Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360))
                / 2 ^ 32")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (simplify -1)
                                            (("1"
                                              (case
                                               "lat2AWB(own_lat) = own")
                                              (("1"
                                                (expand "lat2AWB")
                                                (("1"
                                                  (expand "mod" -1 2)
                                                  (("1"
                                                    (lemma
                                                     "floor_plus_int")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "- 360 * (floor(own_lat / 360) * (2 ^ 32 / 360))"
                                                       "1/2 + (2^32/360)*own_lat")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (lemma
                                                           "mod_multiple")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "floor(1 / 2 + (2 ^ 32 / 360) * own_lat) "
                                                             "2^32"
                                                             "-floor(own_lat / 360)")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "floor_plus_int")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "(2 ^ 32 / 360) * own_lat"
                                                                   " 1/2")
                                                                  (("1"
                                                                    (eval-expr
                                                                     "floor(1/2)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "mod")
                                                                            (("1"
                                                                              (case
                                                                               "(2 ^ 32 / 360) * own_lat / 2 ^ 32 = own_lat/360")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "own_lat")
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT minus(global_decode(60, mes0, mes1, i), own) = global_decode(60, mes0, mes1, i) -  own + IF global_decode(60, mes0, mes1, i) - own >=0 THEN 0 ELSE 2^32 ENDIF")
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "minus_reg1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "minus_under1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT own = (2 ^ 32 / 360) * own_lat + IF own_lat >=0 THEN 0 ELSE 2^32 ENDIF")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "floor_0")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (cross-mult
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (cross-mult
                                                                                                                 1)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (flip-ineq
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "floor_0")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "1+ own_lat/360")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "floor_plus_int")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "1"
                                                                                                                     " own_lat/360")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (move-terms
                                                                                                                         -1
                                                                                                                         l
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (move-terms
                                                                                                                   1
                                                                                                                   r
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (cross-mult
                                                                                                                     1)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (iff
                                                                                             1)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -7
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (move-terms
                                                                                                             -3
                                                                                                             r
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (move-terms
                                                                                                                         -4
                                                                                                                         l
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (move-terms
                                                                                                                           -4
                                                                                                                           r
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (simplify
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (eval-expr
                                                                                                                               "2^32")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (eval-expr
                                                                                                                       "2^32")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (move-terms
                                                                                                             -2
                                                                                                             r
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (eval-expr
                                                                                                                       "2^32")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (move-terms
                                                                                                 -1
                                                                                                 r
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -7
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lift-if
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lift-if
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (eval-expr
                                                                                                                         "2^32")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (eval-expr
                                                                                                                           "2^32")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (lift-if
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (eval-expr
                                                                                                                         "2^32")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (eval-expr
                                                                                                         "2^32")
                                                                                                        (("2"
                                                                                                          (lift-if
                                                                                                           -3)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (lift-if
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (flip-ineq
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (move-terms
                                                                                                                             -2
                                                                                                                             r
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -5
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (simplify
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "abs")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (lift-if
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (eval-expr
                                                                                 "2^32")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (hide
                                                                       2
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "AWB2lat")
                                                                        (("2"
                                                                          (lift-if
                                                                           1)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "resolution")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "resolution")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (eval-expr
                                                                                     "2^32")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "360 / 4294967296 * (4294967296 / 360) * own = own")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (eval-expr
                                                         "2^32")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             " NOT forall (ii:int): integer_pred(-360*ii*(2^32/360))")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -1
                                                               "floor(own_lat / 360)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "lat_awb_inverse")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "floor_0")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (mult-by -1 "2^32")
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (cross-mult 1)
                                        (("3"
                                          (case
                                           "Rlat_glo_pre_surf(i, mes0, mes1) < 180")
                                          (("1"
                                            (mult-by -1 "2^32")
                                            (("1"
                                              (div-by -1 "360")
                                              (("1"
                                                (eval-expr "2^32")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-4 1))
                                            (("2"
                                              (expand
                                               "Rlat_glo_pre_surf")
                                              (("2"
                                                (expand "MOD")
                                                (("2"
                                                  (lemma "mod_pos")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (case
                                                       "((IF i = 0 THEN mes0 ELSE mes1 ENDIF) / 2 ^ 17)< 1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "dlat_surf")
                                                          (("1"
                                                            (lift-if
                                                             -1)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "mes0")
                                                                (("1"
                                                                  (replace
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (cross-mult
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "mes1")
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (north_lat? const-decl "bool" cpr_int nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (lat_awb_inverse formula-decl nil awb32 nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (resolution const-decl "real" awb32 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_under1 formula-decl nil uint32 nil)
    (minus_reg1 formula-decl nil uint32 nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (minus const-decl "unsigned_int" uint32 nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (own_lat skolem-const-decl "Latitude" cpr_int nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (j_surf const-decl "int" cpr_real nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (global_eq_lat formula-decl nil cpr_int nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (subrange type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (norlat? const-decl "bool" cpr_real nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (global_eq_lat_surf_TCC1 0
  (global_eq_lat_surf_TCC1-1 nil 3745255710
   ("" (skeep)
    (("" (typepred "mes0")
      (("" (typepred "nb") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lat_surf_TCC2 0
  (global_eq_lat_surf_TCC2-1 nil 3745255710
   ("" (skeep)
    (("" (typepred "mes1")
      (("" (typepred "nb") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lat_surf_TCC3 0
  (global_eq_lat_surf_TCC3-1 nil 3745255710 ("" (subtype-tcc) nil nil)
   ((LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (resolution const-decl "real" awb32 nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (^ const-decl "real" exponentiation nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dlat_surf const-decl "posreal" cpr_real nil) nil
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (norlat? const-decl "bool" cpr_real nil)
    (Rlat_glo_surf const-decl "real" cpr_real nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (global_eq_lat_surf 0
  (global_eq_lat_surf-2 nil 3778831578
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (lemma "north_lat_eq")
          (("" (inst? :subst ("own_lat" "own_lat"))
            (("" (assert)
              (("" (replace -1 :dir rl)
                (("" (lift-if 1)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (expand "Rlat_glo_surf")
                        (("1" (assert)
                          (("1" (lemma "global_eq_lat")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "Rlat_glo_surf")
                        (("2" (assert)
                          (("2" (lemma "global_eq_lat")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "lat2AWB")
                                  (("2"
                                    (expand "mod" 2 2)
                                    (("2"
                                      (expand "mod" -1 2)
                                      (("2"
                                        (case
                                         "NOT 1/2 + Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360) -
                                             360 *
                                              (floor((Rlat_glo_pre_surf(i, mes0, mes1) - 90) / 360) *
                                                (2 ^ 32 / 360))
                                             - 90 * (2 ^ 32 / 360) = 1/2 + Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360) -
                                             2^32 *
                                              floor((Rlat_glo_pre_surf(i, mes0, mes1) - 90) / 360)
                                             - 2^30")
                                        (("1"
                                          (eval-expr "2^30")
                                          (("1"
                                            (eval-expr "2^32")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (case
                                             "NOT (Rlat_glo_pre_surf(i, mes0, mes1)>=0 AND Rlat_glo_pre_surf(i, mes0, mes1)<90-90/2^31) ")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (expand
                                                 "Rlat_glo_pre_surf")
                                                (("1"
                                                  (expand "MOD")
                                                  (("1"
                                                    (lemma "mod_pos")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "dlat_surf")
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (typepred
                                                                   "mes0")
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "mod(j_surf(mes0, mes1), 60)<=59")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "mes0<=2^17-1")
                                                                                (("1"
                                                                                  (div-by
                                                                                   -1
                                                                                   "2^17")
                                                                                  (("1"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("1"
                                                                                      (eval-expr
                                                                                       "90/2^31")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT (FORALL(a,b,c,d: real):a<=b and c<=d IMPLIES a+c<=b+d)")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "mod(j_surf(mes0, mes1), 60)"
                                                                                             " 59"
                                                                                             "mes0 / 2 ^ 17 "
                                                                                             " (2 ^ 17 - 1) / 2 ^ 17")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "forall (ii,jj:int): ii<jj IMPLIES ii<=jj-1")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "forall (ii,jj:int): ii<jj IMPLIES ii<=jj-1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "mod(j_surf(mes0, mes1), 60)"
                                                                                 "60")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "forall (ii,jj:int): ii<jj IMPLIES ii<=jj-1")
                                                                  (("1"
                                                                    (typepred
                                                                     "mes1")
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (case
                                                                         "NOT i=1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -2
                                                                               "mes1"
                                                                               "2^17")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "mod(j_surf(mes0, mes1), 59)"
                                                                                   "59")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (eval-expr
                                                                                       "2^17")
                                                                                      (("2"
                                                                                        (eval-expr
                                                                                         "90/2^31")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "mes1")
                                                        (("2"
                                                          (expand
                                                           "min")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred
                                                         "mes0")
                                                        (("3"
                                                          (expand
                                                           "min")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "Rlat_glo_pre_surf(i, mes0, mes1)<90")
                                                    (("1"
                                                      (label "xs" -3)
                                                      (("1"
                                                        (hide xs)
                                                        (("1"
                                                          (hide -5)
                                                          (("1"
                                                            (lemma
                                                             "floor_0")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "(Rlat_glo_pre_surf(i, mes0, mes1) - 90) / 360 + 1")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "floor_plus_int")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (move-terms
                                                                             -1
                                                                             l
                                                                             2)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "floor_plus_int")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "2^32 - 2^30"
                                                                                     "1/2 +
                                        Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360)")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "Rlat_glo_pre_surf(i, mes0, mes1) / 360")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (simplify)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     "xs")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "rgps"
                                                                                                       "Rlat_glo_pre_surf(i, mes0, mes1)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         " floor(1/2 + rgps * (2 ^ 32 / 360)) + 2 ^ 32 - 2 ^ 30 = floor(1/2 + rgps * (2 ^ 32 / 360)) + 3*2 ^ 30")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "mod")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "floor_0")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "floor(1/2 + rgps * (2 ^ 32 / 360)) / 2 ^ 32")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "floor_0")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "(floor(1/2 + rgps * (2 ^ 32 / 360)) + 3 * 2 ^ 30) / 2 ^ 32")
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (cross-mult
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (eval-expr
                                                                                                                                       "2^31")
                                                                                                                                      (("2"
                                                                                                                                        (eval-expr
                                                                                                                                         "2^32")
                                                                                                                                        (("2"
                                                                                                                                          (eval-expr
                                                                                                                                           "2^30")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (cross-mult
                                                                                                                                     1)
                                                                                                                                    (("3"
                                                                                                                                      (eval-expr
                                                                                                                                       "2^30")
                                                                                                                                      (("3"
                                                                                                                                        (eval-expr
                                                                                                                                         "2^31")
                                                                                                                                        (("3"
                                                                                                                                          (eval-expr
                                                                                                                                           "2^32")
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (cross-mult
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (eval-expr
                                                                                                                           "2^32")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (cross-mult
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (eval-expr
                                                                                                                           "2^32")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (eval-expr
                                                                                                           "2^30")
                                                                                                          (("2"
                                                                                                            (eval-expr
                                                                                                             "2^32")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (move-terms
                                                                       1
                                                                       r
                                                                       2)
                                                                      (("2"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (move-terms
                                                                       1
                                                                       l
                                                                       2)
                                                                      (("3"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (subrange type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (Rlat_glo_surf const-decl "real" cpr_real nil)
    (global_eq_lat formula-decl nil cpr_int nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (j_surf const-decl "int" cpr_real nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (mes1 skolem-const-decl "below(2 ^ min(nb, 17))" cpr_int nil)
    (mes0 skolem-const-decl "below(2 ^ min(nb, 17))" cpr_int nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (north_lat_eq formula-decl nil cpr_int nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil)
  (global_eq_lat_surf-1 nil 3745255710
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (lemma "north_lat_eq")
          (("" (inst?)
            (("" (assert)
              (("" (replace -1 :dir rl)
                (("" (lift-if 1)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (expand "Rlat_glo_surf")
                        (("1" (assert)
                          (("1" (lemma "global_eq_lat")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "Rlat_glo_surf")
                        (("2" (assert)
                          (("2" (lemma "global_eq_lat")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "lat2AWB")
                                  (("2"
                                    (expand "mod" 2 2)
                                    (("2"
                                      (expand "mod" -1 2)
                                      (("2"
                                        (case
                                         "NOT 1/2 + Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360) -
                                    360 *
                                     (floor((Rlat_glo_pre_surf(i, mes0, mes1) - 90) / 360) *
                                       (2 ^ 32 / 360))
                                    - 90 * (2 ^ 32 / 360) = 1/2 + Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360) -
                                    2^32 *
                                     floor((Rlat_glo_pre_surf(i, mes0, mes1) - 90) / 360)
                                    - 2^30")
                                        (("1"
                                          (eval-expr "2^30")
                                          (("1"
                                            (eval-expr "2^32")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (case
                                             "NOT (Rlat_glo_pre_surf(i, mes0, mes1)>=0 AND Rlat_glo_pre_surf(i, mes0, mes1)<90-90/2^31) ")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (expand
                                                 "Rlat_glo_pre_surf")
                                                (("1"
                                                  (expand "MOD")
                                                  (("1"
                                                    (lemma "mod_pos")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "dlat_surf")
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (typepred
                                                                   "mes0")
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "mod(j_surf(mes0, mes1), 60)<=59")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "mes0<=2^17-1")
                                                                                (("1"
                                                                                  (div-by
                                                                                   -1
                                                                                   "2^17")
                                                                                  (("1"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("1"
                                                                                      (eval-expr
                                                                                       "90/2^31")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT (FORALL(a,b,c,d: real):a<=b and c<=d IMPLIES a+c<=b+d)")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "mod(j_surf(mes0, mes1), 60)"
                                                                                             " 59"
                                                                                             "mes0 / 2 ^ 17 "
                                                                                             " (2 ^ 17 - 1) / 2 ^ 17")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "forall (ii,jj:int): ii<jj IMPLIES ii<=jj-1")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "forall (ii,jj:int): ii<jj IMPLIES ii<=jj-1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "mod(j_surf(mes0, mes1), 60)"
                                                                                 "60")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "forall (ii,jj:int): ii<jj IMPLIES ii<=jj-1")
                                                                  (("1"
                                                                    (typepred
                                                                     "mes1")
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (case
                                                                         "NOT i=1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -2
                                                                               "mes1"
                                                                               "2^17")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "mod(j_surf(mes0, mes1), 59)"
                                                                                   "59")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (eval-expr
                                                                                       "2^17")
                                                                                      (("2"
                                                                                        (eval-expr
                                                                                         "90/2^31")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "mes1")
                                                        (("2"
                                                          (expand
                                                           "min")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred
                                                         "mes0")
                                                        (("3"
                                                          (expand
                                                           "min")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "Rlat_glo_pre_surf(i, mes0, mes1)<90")
                                                    (("1"
                                                      (label "xs" -3)
                                                      (("1"
                                                        (hide xs)
                                                        (("1"
                                                          (hide -5)
                                                          (("1"
                                                            (lemma
                                                             "floor_0")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "(Rlat_glo_pre_surf(i, mes0, mes1) - 90) / 360 + 1")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "floor_plus_int")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (move-terms
                                                                             -1
                                                                             l
                                                                             2)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "floor_plus_int")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "2^32 - 2^30"
                                                                                     "1/2 +
                            Rlat_glo_pre_surf(i, mes0, mes1) * (2 ^ 32 / 360)")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "Rlat_glo_pre_surf(i, mes0, mes1) / 360")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (simplify)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     "xs")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "rgps"
                                                                                                       "Rlat_glo_pre_surf(i, mes0, mes1)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         " floor(1/2 + rgps * (2 ^ 32 / 360)) + 2 ^ 32 - 2 ^ 30 = floor(1/2 + rgps * (2 ^ 32 / 360)) + 3*2 ^ 30")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "mod")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "floor_0")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "floor(1/2 + rgps * (2 ^ 32 / 360)) / 2 ^ 32")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "floor_0")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "(floor(1/2 + rgps * (2 ^ 32 / 360)) + 3 * 2 ^ 30) / 2 ^ 32")
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (cross-mult
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (eval-expr
                                                                                                                                       "2^31")
                                                                                                                                      (("2"
                                                                                                                                        (eval-expr
                                                                                                                                         "2^32")
                                                                                                                                        (("2"
                                                                                                                                          (eval-expr
                                                                                                                                           "2^30")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (cross-mult
                                                                                                                                     1)
                                                                                                                                    (("3"
                                                                                                                                      (eval-expr
                                                                                                                                       "2^30")
                                                                                                                                      (("3"
                                                                                                                                        (eval-expr
                                                                                                                                         "2^31")
                                                                                                                                        (("3"
                                                                                                                                          (eval-expr
                                                                                                                                           "2^32")
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (cross-mult
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (eval-expr
                                                                                                                           "2^32")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (cross-mult
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (eval-expr
                                                                                                                           "2^32")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (eval-expr
                                                                                                           "2^30")
                                                                                                          (("2"
                                                                                                            (eval-expr
                                                                                                             "2^32")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (move-terms
                                                                       1
                                                                       r
                                                                       2)
                                                                      (("2"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (move-terms
                                                                       1
                                                                       l
                                                                       2)
                                                                      (("3"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (north_lat_eq formula-decl nil cpr_int nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/") nil
    nil (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil) nil
    (dlat_surf const-decl "posreal" cpr_real nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (global_eq_lat formula-decl nil cpr_int nil)
    (Rlat_glo_surf const-decl "real" cpr_real nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (nl_global_TCC1 0
  (nl_global_TCC1-1 nil 3745829967
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (flatten)
          (("2"
            (case "(FORALL (ii:subrange(0,1)): global_decode(60, yz0, yz1, ii)<2^30)")
            (("1" (inst -1 "i")
              (("1" (eval-expr "2^30")
                (("1" (eval-expr "2^32") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (skeep)
                (("2" (lemma "global_zone_eq")
                  (("2" (inst -1 "60" "yz0" "yz1" "ii")
                    (("2" (assert)
                      (("2" (lemma "mod_pos")
                        (("2" (inst?)
                          (("2"
                            (case "NOT exists (gz: nat): gz<=60-ii-1 AND gz = mod(floor(1/2 + (59 * yz0 - 60 * yz1) / 2 ^ min(nb, 17)), 60 - ii)")
                            (("1"
                              (inst 1
                               "mod(floor(1/2 + (59 * yz0 - 60 * yz1) / 2 ^ min(nb, 17)), 60 - ii)")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide -2)
                              (("2"
                                (skeep)
                                (("2"
                                  (replace -2 -3 :dir rl)
                                  (("2"
                                    (expand "global_decode")
                                    (("2"
                                      (expand "max")
                                      (("2"
                                        (replace -4 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (mult-by -1 "2^19")
                                            (("2"
                                              (simplify -1)
                                              (("2"
                                                (rewrite "times_reg1")
                                                (("1"
                                                  (case
                                                   "NOT 2 ^ 19 * gz +
                                                            4 * IF ii = 0 THEN yz0 ELSE yz1 ENDIF <= 2^19*(60-ii) -4")
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (typepred
                                                           "yz0")
                                                          (("1"
                                                            (replace
                                                             -6)
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (case
                                                                 "NOT yz0<=2^17-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (eval-expr
                                                                     "2^17")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "forall (kk, jj:nat): kk<jj IMPLIES kk<= jj-1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "yz0"
                                                                           "2^17")
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (mult-by
                                                                     -1
                                                                     "4")
                                                                    (("2"
                                                                      (eval-expr
                                                                       "2^17")
                                                                      (("2"
                                                                        (eval-expr
                                                                         "2^19")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (typepred
                                                           "yz1")
                                                          (("2"
                                                            (case
                                                             "forall (kk, jj:nat): kk<jj IMPLIES kk<= jj-1")
                                                            (("1"
                                                              (replace
                                                               -6)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "yz1"
                                                                   "2^17")
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (eval-expr
                                                                         "2^17")
                                                                        (("1"
                                                                          (eval-expr
                                                                           "2^19")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "plus_reg1")
                                                    (("1"
                                                      (lemma
                                                       "closest_div_mult_def")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (simplify
                                                             1)
                                                            (("1"
                                                              (mult-by
                                                               -1
                                                               "2^13")
                                                              (("1"
                                                                (div-by
                                                                 -1
                                                                 "(240-4*ii)")
                                                                (("1"
                                                                  (expand
                                                                   "mod")
                                                                  (("1"
                                                                    (lemma
                                                                     "floor_0")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "floor((2 ^ 13 * 2 ^ 19 * gz +
                      4 * (2 ^ 13 * IF ii = 0 THEN yz0 ELSE yz1 ENDIF))
                     / (240 - 4 * ii)
                     + 1/2)
               / 2 ^ 32")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (simplify
                                                                                 1)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (eval-expr
                                                                                           (!
                                                                                            -3
                                                                                            r))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (eval-expr
                                                                                               "2^30")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT ii=1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (eval-expr
                                                                                             (!
                                                                                              -3
                                                                                              r))
                                                                                            (("2"
                                                                                              (eval-expr
                                                                                               "2^30")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (cross-mult
                                                                               1)
                                                                              (("3"
                                                                                (lift-if
                                                                                 1)
                                                                                (("3"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (eval-expr
                                                                                         (!
                                                                                          -2
                                                                                          r))
                                                                                        (("1"
                                                                                          (eval-expr
                                                                                           "2^32")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (case
                                                                                       "not ii=1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (eval-expr
                                                                                           (!
                                                                                            -2
                                                                                            r))
                                                                                          (("2"
                                                                                            (eval-expr
                                                                                             "2^32")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (eval-expr
                                                           "2^14")
                                                          (("2"
                                                            (eval-expr
                                                             "2^32")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (eval-expr
                                                       "2^32")
                                                      (("2"
                                                        (eval-expr
                                                         "2^19")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (eval-expr "2^19")
                                                  (("2"
                                                    (eval-expr "2^32")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((global_zone_eq formula-decl nil cpr_int nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (plus_reg1 formula-decl nil uint32 nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (times_reg1 formula-decl nil uint32 nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    nil nil nil
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (nl_global 0
  (nl_global-2 nil 3778831691
   ("" (skeep)
    ((""
      (case "exists (rl:real): rl = IF nb = 19 THEN Rlat_glo_surf(own_lat)(i, yz0, yz1)
                   ELSE Rlat_glo(i, yz0, yz1)
                   ENDIF")
      (("1" (skeep)
        (("1" (replace -1 :dir rl)
          (("1" (ground)
            (("1" (flatten)
              (("1" (lemma "global_eq_lat")
                (("1" (lemma "global_eq_lat_surf")
                  (("1"
                    (case "NOT global_decode(60, yz0, yz1, i) +
                        IF nb /= 19 OR (nb = 19 AND north_lat?(i, yz0, yz1, own))
                          THEN 0
                        ELSE 3 * 2 ^ 30
                        ENDIF = lat2AWB(rl)")
                    (("1" (case "nb =19")
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (replace -4 :dir rl)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "Rlat_glo_pre_surf")
                                  (("2"
                                    (expand "MOD")
                                    (("2"
                                      (expand "dlat_surf")
                                      (("2"
                                        (lemma "mod_pos")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (case
                                               "NOT (forall (ii,jj: int): ii<jj IMPLIES ii<=jj-1)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 -1
                                                 " mod(j_surf(yz0, yz1), 60 - i) "
                                                 " 60 - i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (typepred
                                                               "yz0")
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (eval-expr
                                                                   "2^17")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "abs")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (case
                                                           "not i=1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (typepred
                                                               "yz1")
                                                              (("2"
                                                                (eval-expr
                                                                 "2^17")
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "mod")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -1)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 1)
                      (("2" (hide (-2 -3))
                        (("2" (lemma "nl_awb_equiv")
                          (("2" (case "NOT RLAT(360, nb, i)(rl)")
                            (("1" (expand "RLAT")
                              (("1"
                                (hide -1)
                                (("1"
                                  (lift-if -2)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "Rlat_glo_surf")
                                        (("1"
                                          (expand "Rlat_glo_pre_surf")
                                          (("1"
                                            (expand "MOD")
                                            (("1"
                                              (expand "dl")
                                              (("1"
                                                (expand "dlat_surf")
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (name
                                                     "J"
                                                     "reals@reals_mod.mod(j_surf(yz0, yz1), 60 - i)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (name
                                                         "yz"
                                                         "(IF i = 0 THEN yz0 ELSE yz1 ENDIF)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "floor((2^17*J+yz-IF norlat?(own_lat)(i, yz0, yz1) THEN 0 ELSE 2^17*(60-i) ENDIF)/2^19)"
                                                             "mod((2^17*J+yz-IF norlat?(own_lat)(i, yz0, yz1) THEN 0 ELSE 2^17*(60-i) ENDIF), 2^19)")
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (lemma
                                                                 "real_parts")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "(2 ^ 17 * J + yz -
                           IF norlat?(own_lat)(i, yz0, yz1) THEN 0 ELSE 2 ^ 17 * (60 - i) ENDIF)
                          / 2 ^ 19")
                                                                  (("1"
                                                                    (rewrite
                                                                     "mod_frac"
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "360/(60-i)")
                                                                      (("1"
                                                                        (simplify
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (eval-expr
                                                                                   "2^17")
                                                                                  (("1"
                                                                                    (eval-expr
                                                                                     "2^19")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "div_distributes"
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("2"
                                                                                      (eval-expr
                                                                                       "2^19")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "yz1")
                                                                        (("2"
                                                                          (expand
                                                                           "min")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "yz0")
                                                                        (("3"
                                                                          (expand
                                                                           "min")
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "yz1")
                                                                      (("2"
                                                                        (expand
                                                                         "min")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (typepred
                                                                       "yz0")
                                                                      (("3"
                                                                        (expand
                                                                         "min")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "yz1")
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "yz0")
                                                                    (("3"
                                                                      (expand
                                                                       "min")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "mod_pos")
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "mod")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (eval-expr
                                                                                     "2^19")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (eval-expr
                                                                                         "2^17")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "J")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "mod")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "J")
                                                                                (("2"
                                                                                  (expand
                                                                                   "mod")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (typepred
                                                                     "yz1")
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "yz0")
                                                                  (("3"
                                                                    (expand
                                                                     "min")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "yz1")
                                                              (("3"
                                                                (expand
                                                                 "min")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (typepred
                                                               "yz0")
                                                              (("4"
                                                                (expand
                                                                 "min")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "Rlat_glo")
                                          (("2"
                                            (expand
                                             "Rlat_glo_pre"
                                             -1
                                             1)
                                            (("2"
                                              (expand "dlat")
                                              (("2"
                                                (expand "dl")
                                                (("2"
                                                  (inst
                                                   2
                                                   "MOD(j(yz0, yz1), 60 - i) - (IF Rlat_glo_pre(i, yz0, yz1) <= 180 THEN 0 ELSE (60-i) ENDIF)"
                                                   "(IF i = 0 THEN yz0 ELSE yz1 ENDIF)")
                                                  (("1"
                                                    (lift-if 2)
                                                    (("1"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (typepred
                                                         "yz1")
                                                        (("2"
                                                          (typepred
                                                           "nb")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("1"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("1"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("2"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("2"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (replace
                                                                 -1)
                                                                (("3"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("3"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("3"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide-all-but
                                                       (2 1))
                                                      (("3"
                                                        (typepred
                                                         "yz0")
                                                        (("3"
                                                          (typepred
                                                           "nb")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("1"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("1"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("2"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("2"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (replace
                                                                 -1)
                                                                (("3"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("3"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("3"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand "MOD")
                                                    (("4"
                                                      (expand "mod")
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -2 "nb" "rl")
                              (("1"
                                (expand "lat2AWB")
                                (("1"
                                  (case
                                   "NOT  mod(floor(1/2 + (2 ^ 32 / 360) * mod(rl, 360)), 2 ^ 32) = floor(1/2 + (2 ^ 32 / 360) * mod(rl, 360))")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma "mod_frac")
                                      (("1"
                                        (inst
                                         -1
                                         "floor(1 / 2 + (2 ^ 32 / 360) * mod(rl, 360))"
                                         "2^32")
                                        (("1"
                                          (cross-mult -1)
                                          (("1"
                                            (expand "fractional" -1)
                                            (("1"
                                              (rewrite "div_cancel1")
                                              (("1"
                                                (replaces -1 1)
                                                (("1"
                                                  (simplify 1)
                                                  (("1"
                                                    (move-terms 1 l)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1"
                                                        (lemma
                                                         "floor_0")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "floor(1/2 + (2 ^ 32 * mod(rl, 360)) / 360) / 2 ^ 32 ")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "mod_pos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (mult-by
                                                                                 -1
                                                                                 "2^32")
                                                                                (("1"
                                                                                  (div-by
                                                                                   -1
                                                                                   "360")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (cross-mult
                                                                         1)
                                                                        (("2"
                                                                          (move-terms
                                                                           1
                                                                           r)
                                                                          (("2"
                                                                            (lemma
                                                                             "floor_plus_int")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               " -2^32"
                                                                               "1 / 2 + (2 ^ 32 * mod(rl, 360)) / 360 ")
                                                                              (("2"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (case
                                                                                   "1 / 2 + (2 ^ 32 * mod(rl, 360)) / 360 + -2 ^ 32<0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "mod_lt_real")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (eval-expr
                                                                                                       "2^32")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (simplify
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "div_distributes"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (eval-expr
                                                                                                         "2^32")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (simplify
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "rl<=-(360/60)/2^19")
                                                                                                              (("1"
                                                                                                                (eval-expr
                                                                                                                 (!
                                                                                                                  -1
                                                                                                                  r))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (flip-ineq
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -4
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "RLAT")
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "k>0")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "NOT m/2^nb>=0")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "dl(60-i, 360)")
                                                                                                                              (("2"
                                                                                                                                (mult-by
                                                                                                                                 -2
                                                                                                                                 "dl(60-i, 360)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (case
                                                                                                                             "k<0")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "m=2^nb")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "div_simp")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "k+1<=0")
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "k=-1")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (case
                                                                                                                                         "NOT k+1<=-1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (case
                                                                                                                                           "i=0")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (eval-expr
                                                                                                                                               "dl(60, 360)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (eval-expr
                                                                                                                                                   "2^19")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (case
                                                                                                                                             "NOT i=1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (eval-expr
                                                                                                                                                 "2^19")
                                                                                                                                                (("2"
                                                                                                                                                  (eval-expr
                                                                                                                                                   "dl(59, 360)")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (case
                                                                                                                                 "NOT m<=2^nb-1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "m")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "NOT (forall (mm,jj :int): mm<=jj IMPLIES (mm<=jj-1 OR mm = jj))")
                                                                                                                                        (("1"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "m"
                                                                                                                                           "2^nb")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (div-by
                                                                                                                                   -1
                                                                                                                                   "2^nb")
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "div_distributes_minus"
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "div_simp")
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "NOT k+m/2^nb<= -(1/2^nb)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "dl")
                                                                                                                                          (("2"
                                                                                                                                            (mult-by
                                                                                                                                             -1
                                                                                                                                             "(360/(60-i))")
                                                                                                                                            (("1"
                                                                                                                                              (eval-expr
                                                                                                                                               "2^19")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "i=0")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (typepred
                                                                                                                                                     "nb")
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("3"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("4"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("4"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("4"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (case
                                                                                                                                                   "not i=1")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "nb")
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("3"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("3"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("4"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("4"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("4"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (cross-mult
                                                                                                                                               1)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "NOT k=0")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       (1
                                                                                                                                        2))
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "NOT m>=0")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (div-by
                                                                                                                                           -1
                                                                                                                                           "2^nb")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "NOT 0/2^nb = 0")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (mult-by
                                                                                                                                                 -1
                                                                                                                                                 "dl(60-i, 360)")
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "NOT 0 * dl(60 - i, 360) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "NOT  m / 2 ^ nb * dl(60 - i, 360) = rl")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "i=0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (case "NOT i=1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "nb")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (inst 1 "IF nb = 19 THEN Rlat_glo_surf(own_lat)(i, yz0, yz1)
             ELSE Rlat_glo(i, yz0, yz1)
             ENDIF")
        (("1" (flatten)
          (("1" (hide 3)
            (("1" (typepred "yz1")
              (("1" (typepred "nb")
                (("1" (assert)
                  (("1" (split -2)
                    (("1" (replace -1)
                      (("1" (eval-expr (! -3 r))
                        (("1" (eval-expr (! 2 r))
                          (("1" (assert :flush? T) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (eval-expr (! -3 r))
                        (("2" (eval-expr (! 2 r))
                          (("2" (assert :flush? T) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (replace -1)
                      (("3" (eval-expr (! -3 r))
                        (("3" (eval-expr (! 2 r))
                          (("3" (assert :flush? T) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (flatten)
            (("2" (assert :flush? T)
              (("2" (typepred "yz0")
                (("2" (typepred "nb")
                  (("2" (assert)
                    (("2" (split -2)
                      (("1" (replace -1)
                        (("1" (eval-expr (! -3 r))
                          (("1" (eval-expr (! 2 r))
                            (("1" (assert :flush? T) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (eval-expr (! -3 r))
                          (("2" (eval-expr (! 2 r))
                            (("2" (assert :flush? T) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (replace -1)
                        (("3" (eval-expr (! -3 r))
                          (("3" (eval-expr (! 2 r))
                            (("3" (assert :flush? T) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (flatten)
            (("3" (typepred "yz1")
              (("3" (expand "min") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (flatten)
            (("4" (typepred "yz0")
              (("4" (expand "min") (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (flatten)
        (("3" (hide 3)
          (("3" (typepred "yz1")
            (("3" (typepred "nb")
              (("3" (assert)
                (("3" (split -2)
                  (("1" (replace -1)
                    (("1" (eval-expr (! -3 r))
                      (("1" (eval-expr (! 2 r))
                        (("1" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (eval-expr (! -3 r))
                      (("2" (eval-expr (! 2 r))
                        (("2" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (eval-expr (! -3 r))
                      (("3" (eval-expr (! 2 r))
                        (("3" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (flatten)
        (("4" (hide 3)
          (("4" (typepred "yz0")
            (("4" (typepred "nb")
              (("4" (assert)
                (("4" (split -2)
                  (("1" (replace -1)
                    (("1" (eval-expr (! -3 r))
                      (("1" (eval-expr (! 2 r))
                        (("1" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (eval-expr (! -3 r))
                      (("2" (eval-expr (! 2 r))
                        (("2" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (eval-expr (! -3 r))
                      (("3" (eval-expr (! 2 r))
                        (("3" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (flatten)
          (("5" (typepred "yz1")
            (("5" (expand "min") (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (flatten)
          (("6" (typepred "yz0")
            (("6" (expand "min") (("6" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (global_eq_lat formula-decl nil cpr_int nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (north_lat? const-decl "bool" cpr_int nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (yz0 skolem-const-decl "below(2 ^ min(nb, 17))" cpr_int nil)
    (yz1 skolem-const-decl "below(2 ^ min(nb, 17))" cpr_int nil)
    (i skolem-const-decl "subrange(0, 1)" cpr_int nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (j_surf const-decl "int" cpr_real nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (own_lat skolem-const-decl "Latitude" cpr_int nil)
    (norlat? const-decl "bool" cpr_real nil)
    (yz skolem-const-decl "below(2 ^ min(nb, 17))" cpr_int nil)
    (J skolem-const-decl "{k | abs(k) < abs(60 - i)}" cpr_int nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_parts formula-decl nil floor_ceil nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (div_distributes formula-decl nil real_props nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (Rlat_glo_pre const-decl "real" cpr_real nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (j const-decl "int" cpr_real nil)
    (dlat const-decl "posreal" cpr_real nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_simp formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (mod_lt_real formula-decl nil reals_mod "reals/")
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel1 formula-decl nil real_props nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (rl skolem-const-decl "real" cpr_int nil)
    (nl_awb_equiv formula-decl nil nl nil)
    (global_eq_lat_surf formula-decl nil cpr_int nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (subrange type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Rlat_glo_surf const-decl "real" cpr_real nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Rlat_glo const-decl "real" cpr_real nil))
   nil)
  (nl_global-1 nil 3745840018
   ("" (skeep)
    ((""
      (case "exists (rl:real): rl = IF nb = 19 THEN Rlat_glo_surf(i, yz0, yz1)
            ELSE Rlat_glo(i, yz0, yz1)
            ENDIF")
      (("1" (skeep)
        (("1" (replace -1 :dir rl)
          (("1" (ground)
            (("1" (flatten)
              (("1" (lemma "global_eq_lat")
                (("1" (lemma "global_eq_lat_surf")
                  (("1"
                    (case "NOT global_decode(60, yz0, yz1, i) +
               IF nb /= 19 OR (nb = 19 AND north_lat?(i, yz0, yz1, own))
                 THEN 0
               ELSE 3 * 2 ^ 30
               ENDIF = lat2AWB(rl)")
                    (("1" (case "nb =19")
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (replace -4 :dir rl)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "Rlat_glo_pre_surf")
                                  (("2"
                                    (expand "MOD")
                                    (("2"
                                      (expand "dlat_surf")
                                      (("2"
                                        (lemma "mod_pos")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (case
                                               "NOT (forall (ii,jj: int): ii<jj IMPLIES ii<=jj-1)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 -1
                                                 " mod(j_surf(yz0, yz1), 60 - i) "
                                                 " 60 - i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (typepred
                                                               "yz0")
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (eval-expr
                                                                   "2^17")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "abs")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (case
                                                           "not i=1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (typepred
                                                               "yz1")
                                                              (("2"
                                                                (eval-expr
                                                                 "2^17")
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "mod")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -1)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 1)
                      (("2" (hide (-2 -3))
                        (("2" (lemma "nl_awb_equiv")
                          (("2" (case "NOT RLAT(360, nb, i)(rl)")
                            (("1" (expand "RLAT")
                              (("1"
                                (hide -1)
                                (("1"
                                  (lift-if -2)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "Rlat_glo_surf")
                                        (("1"
                                          (expand "Rlat_glo_pre_surf")
                                          (("1"
                                            (expand "MOD")
                                            (("1"
                                              (expand "dl")
                                              (("1"
                                                (expand "dlat_surf")
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (name
                                                     "J"
                                                     "reals@reals_mod.mod(j_surf(yz0, yz1), 60 - i)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (name
                                                         "yz"
                                                         "(IF i = 0 THEN yz0 ELSE yz1 ENDIF)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "floor((2^17*J+yz-IF norlat?(i, yz0, yz1) THEN 0 ELSE 2^17*(60-i) ENDIF)/2^19)"
                                                             "mod((2^17*J+yz-IF norlat?(i, yz0, yz1) THEN 0 ELSE 2^17*(60-i) ENDIF), 2^19)")
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (lemma
                                                                 "real_parts")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "(2 ^ 17 * J + yz -
               IF norlat?(i, yz0, yz1) THEN 0 ELSE 2 ^ 17 * (60 - i) ENDIF)
              / 2 ^ 19")
                                                                  (("1"
                                                                    (rewrite
                                                                     "mod_frac"
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "360/(60-i)")
                                                                      (("1"
                                                                        (simplify
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (eval-expr
                                                                                   "2^17")
                                                                                  (("1"
                                                                                    (eval-expr
                                                                                     "2^19")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "div_distributes"
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("2"
                                                                                      (eval-expr
                                                                                       "2^19")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "yz1")
                                                                        (("2"
                                                                          (expand
                                                                           "min")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "yz0")
                                                                        (("3"
                                                                          (expand
                                                                           "min")
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "yz1")
                                                                      (("2"
                                                                        (expand
                                                                         "min")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (typepred
                                                                       "yz0")
                                                                      (("3"
                                                                        (expand
                                                                         "min")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "yz1")
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "yz0")
                                                                    (("3"
                                                                      (expand
                                                                       "min")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "mod_pos")
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "mod")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (eval-expr
                                                                                     "2^19")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (eval-expr
                                                                                         "2^17")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "J")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "mod")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "J")
                                                                                (("2"
                                                                                  (expand
                                                                                   "mod")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (typepred
                                                                     "yz1")
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "yz0")
                                                                  (("3"
                                                                    (expand
                                                                     "min")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "yz1")
                                                              (("3"
                                                                (expand
                                                                 "min")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (typepred
                                                               "yz0")
                                                              (("4"
                                                                (expand
                                                                 "min")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "Rlat_glo")
                                          (("2"
                                            (expand
                                             "Rlat_glo_pre"
                                             -1
                                             1)
                                            (("2"
                                              (expand "dlat")
                                              (("2"
                                                (expand "dl")
                                                (("2"
                                                  (inst
                                                   2
                                                   "MOD(j(yz0, yz1), 60 - i) - (IF Rlat_glo_pre(i, yz0, yz1) <= 180 THEN 0 ELSE (60-i) ENDIF)"
                                                   "(IF i = 0 THEN yz0 ELSE yz1 ENDIF)")
                                                  (("1"
                                                    (lift-if 2)
                                                    (("1"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (typepred
                                                         "yz1")
                                                        (("2"
                                                          (typepred
                                                           "nb")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("1"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("1"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("2"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("2"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (replace
                                                                 -1)
                                                                (("3"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("3"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("3"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide-all-but
                                                       (2 1))
                                                      (("3"
                                                        (typepred
                                                         "yz0")
                                                        (("3"
                                                          (typepred
                                                           "nb")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("1"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("1"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("2"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("2"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (replace
                                                                 -1)
                                                                (("3"
                                                                  (eval-expr
                                                                   (!
                                                                    -3
                                                                    r))
                                                                  (("3"
                                                                    (eval-expr
                                                                     (!
                                                                      1
                                                                      r))
                                                                    (("3"
                                                                      (assert
                                                                       :flush?
                                                                       T)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand "MOD")
                                                    (("4"
                                                      (expand "mod")
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -2 "nb" "rl")
                              (("1"
                                (expand "lat2AWB")
                                (("1"
                                  (case
                                   "NOT  mod(floor(1/2 + (2 ^ 32 / 360) * mod(rl, 360)), 2 ^ 32) = floor(1/2 + (2 ^ 32 / 360) * mod(rl, 360))")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma "mod_frac")
                                      (("1"
                                        (inst
                                         -1
                                         "floor(1 / 2 + (2 ^ 32 / 360) * mod(rl, 360))"
                                         "2^32")
                                        (("1"
                                          (cross-mult -1)
                                          (("1"
                                            (expand "fractional" -1)
                                            (("1"
                                              (rewrite "div_cancel1")
                                              (("1"
                                                (replaces -1 1)
                                                (("1"
                                                  (simplify 1)
                                                  (("1"
                                                    (move-terms 1 l)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1"
                                                        (lemma
                                                         "floor_0")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "floor(1/2 + (2 ^ 32 * mod(rl, 360)) / 360) / 2 ^ 32 ")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "mod_pos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (mult-by
                                                                                 -1
                                                                                 "2^32")
                                                                                (("1"
                                                                                  (div-by
                                                                                   -1
                                                                                   "360")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (cross-mult
                                                                         1)
                                                                        (("2"
                                                                          (move-terms
                                                                           1
                                                                           r)
                                                                          (("2"
                                                                            (lemma
                                                                             "floor_plus_int")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               " -2^32"
                                                                               "1 / 2 + (2 ^ 32 * mod(rl, 360)) / 360 ")
                                                                              (("2"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (case
                                                                                   "1 / 2 + (2 ^ 32 * mod(rl, 360)) / 360 + -2 ^ 32<0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "mod_lt_real")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (eval-expr
                                                                                                       "2^32")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (simplify
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "div_distributes"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (eval-expr
                                                                                                         "2^32")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (simplify
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "rl<=-(360/60)/2^19")
                                                                                                              (("1"
                                                                                                                (eval-expr
                                                                                                                 (!
                                                                                                                  -1
                                                                                                                  r))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (flip-ineq
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -4
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "RLAT")
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "k>0")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "NOT m/2^nb>=0")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "dl(60-i, 360)")
                                                                                                                              (("2"
                                                                                                                                (mult-by
                                                                                                                                 -2
                                                                                                                                 "dl(60-i, 360)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (case
                                                                                                                             "k<0")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "m=2^nb")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "div_simp")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "k+1<=0")
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "k=-1")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (case
                                                                                                                                         "NOT k+1<=-1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (case
                                                                                                                                           "i=0")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (eval-expr
                                                                                                                                               "dl(60, 360)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (eval-expr
                                                                                                                                                   "2^19")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (case
                                                                                                                                             "NOT i=1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (eval-expr
                                                                                                                                                 "2^19")
                                                                                                                                                (("2"
                                                                                                                                                  (eval-expr
                                                                                                                                                   "dl(59, 360)")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (case
                                                                                                                                 "NOT m<=2^nb-1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "m")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "NOT (forall (mm,jj :int): mm<=jj IMPLIES (mm<=jj-1 OR mm = jj))")
                                                                                                                                        (("1"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "m"
                                                                                                                                           "2^nb")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (div-by
                                                                                                                                   -1
                                                                                                                                   "2^nb")
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "div_distributes_minus"
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "div_simp")
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "NOT k+m/2^nb<= -(1/2^nb)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "dl")
                                                                                                                                          (("2"
                                                                                                                                            (mult-by
                                                                                                                                             -1
                                                                                                                                             "(360/(60-i))")
                                                                                                                                            (("1"
                                                                                                                                              (eval-expr
                                                                                                                                               "2^19")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "i=0")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (typepred
                                                                                                                                                     "nb")
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("3"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("4"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("4"
                                                                                                                                                          (eval-expr
                                                                                                                                                           (!
                                                                                                                                                            1
                                                                                                                                                            r))
                                                                                                                                                          (("4"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (case
                                                                                                                                                   "not i=1")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "nb")
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("3"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("3"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("4"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("4"
                                                                                                                                                            (eval-expr
                                                                                                                                                             (!
                                                                                                                                                              2
                                                                                                                                                              r))
                                                                                                                                                            (("4"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (cross-mult
                                                                                                                                               1)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "NOT k=0")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       (1
                                                                                                                                        2))
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "NOT m>=0")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (div-by
                                                                                                                                           -1
                                                                                                                                           "2^nb")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "NOT 0/2^nb = 0")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (mult-by
                                                                                                                                                 -1
                                                                                                                                                 "dl(60-i, 360)")
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "NOT 0 * dl(60 - i, 360) = 0")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "NOT  m / 2 ^ nb * dl(60 - i, 360) = rl")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "i=0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (case "NOT i=1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "nb")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (inst 1 "IF nb = 19 THEN Rlat_glo_surf(i, yz0, yz1)
         ELSE Rlat_glo(i, yz0, yz1)
         ENDIF")
        (("1" (flatten)
          (("1" (hide 3)
            (("1" (typepred "yz1")
              (("1" (typepred "nb")
                (("1" (assert)
                  (("1" (split -2)
                    (("1" (replace -1)
                      (("1" (eval-expr (! -3 r))
                        (("1" (eval-expr (! 2 r))
                          (("1" (assert :flush? T) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (eval-expr (! -3 r))
                        (("2" (eval-expr (! 2 r))
                          (("2" (assert :flush? T) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (replace -1)
                      (("3" (eval-expr (! -3 r))
                        (("3" (eval-expr (! 2 r))
                          (("3" (assert :flush? T) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (flatten)
            (("2" (assert :flush? T)
              (("2" (typepred "yz0")
                (("2" (typepred "nb")
                  (("2" (assert)
                    (("2" (split -2)
                      (("1" (replace -1)
                        (("1" (eval-expr (! -3 r))
                          (("1" (eval-expr (! 2 r))
                            (("1" (assert :flush? T) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (eval-expr (! -3 r))
                          (("2" (eval-expr (! 2 r))
                            (("2" (assert :flush? T) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (replace -1)
                        (("3" (eval-expr (! -3 r))
                          (("3" (eval-expr (! 2 r))
                            (("3" (assert :flush? T) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (flatten)
            (("3" (typepred "yz1")
              (("3" (expand "min") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (flatten)
            (("4" (typepred "yz0")
              (("4" (expand "min") (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (flatten)
        (("3" (hide 3)
          (("3" (typepred "yz1")
            (("3" (typepred "nb")
              (("3" (assert)
                (("3" (split -2)
                  (("1" (replace -1)
                    (("1" (eval-expr (! -3 r))
                      (("1" (eval-expr (! 2 r))
                        (("1" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (eval-expr (! -3 r))
                      (("2" (eval-expr (! 2 r))
                        (("2" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (eval-expr (! -3 r))
                      (("3" (eval-expr (! 2 r))
                        (("3" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (flatten)
        (("4" (hide 3)
          (("4" (typepred "yz0")
            (("4" (typepred "nb")
              (("4" (assert)
                (("4" (split -2)
                  (("1" (replace -1)
                    (("1" (eval-expr (! -3 r))
                      (("1" (eval-expr (! 2 r))
                        (("1" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (eval-expr (! -3 r))
                      (("2" (eval-expr (! 2 r))
                        (("2" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (replace -1)
                    (("3" (eval-expr (! -3 r))
                      (("3" (eval-expr (! 2 r))
                        (("3" (assert :flush? T) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (flatten)
          (("5" (typepred "yz1")
            (("5" (expand "min") (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (flatten)
          (("6" (typepred "yz0")
            (("6" (expand "min") (("6" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Rlat_glo const-decl "real" cpr_real nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Rlat_glo_surf const-decl "real" cpr_real nil)
    (below type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (global_eq_lat_surf formula-decl nil cpr_int nil)
    (nl_awb_equiv formula-decl nil nl nil) nil
    (times_div2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (div_cancel1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mod_lt_real formula-decl nil reals_mod "reals/")
    (minus_even_is_even application-judgement "even_int" integers nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_simp formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals
     nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (dlat const-decl "posreal" cpr_real nil) nil
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (Rlat_glo_pre const-decl "real" cpr_real nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (real_parts formula-decl nil floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norlat? const-decl "bool" cpr_real nil) nil nil
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (RLAT const-decl "bool" rlat_spec nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (Rlat_glo_pre_surf const-decl "real" cpr_real nil)
    (dlat_surf const-decl "posreal" cpr_real nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil) nil
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil) nil
    nil nil (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (north_lat? const-decl "bool" cpr_int nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (global_eq_lat formula-decl nil cpr_int nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (global_eq_lon_TCC1 0
  (global_eq_lon_TCC1-1 nil 3745935423
   ("" (skeep)
    (("" (replaces -1)
      (("" (assert)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (split -1)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (hide 1)
                (("2"
                  (case "(FORALL (ii:subrange(0,1)): global_decode(60, yz0, yz1, ii)<2^30)")
                  (("1" (inst -1 "0")
                    (("1" (eval-expr "2^30")
                      (("1" (eval-expr "2^32") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (skeep)
                      (("2" (lemma "global_zone_eq")
                        (("2" (inst -1 "60" "yz0" "yz1" "ii")
                          (("2" (assert)
                            (("2" (lemma "mod_pos")
                              (("2"
                                (inst?)
                                (("2"
                                  (case
                                   "NOT exists (gz: nat): gz<=60-ii-1 AND gz = mod(floor(1/2 + (59 * yz0 - 60 * yz1) / 2 ^ min(nb, 17)), 60 - ii)")
                                  (("1"
                                    (inst
                                     1
                                     "mod(floor(1/2 + (59 * yz0 - 60 * yz1) / 2 ^ min(nb, 17)), 60 - ii)")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide -2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (replace -2 -3 :dir rl)
                                        (("2"
                                          (expand "global_decode")
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (replace -4 1)
                                              (("2"
                                                (replace -3 1)
                                                (("2"
                                                  (mult-by -1 "2^19")
                                                  (("2"
                                                    (simplify -1)
                                                    (("2"
                                                      (rewrite
                                                       "times_reg1")
                                                      (("1"
                                                        (case
                                                         "NOT 2 ^ 19 * gz +
                                                                           4 * IF ii = 0 THEN yz0 ELSE yz1 ENDIF <= 2^19*(60-ii) -4")
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "yz0")
                                                                (("1"
                                                                  (replace
                                                                   -6)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (case
                                                                       "NOT yz0<=2^17-1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (eval-expr
                                                                           "2^17")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "forall (kk, jj:nat): kk<jj IMPLIES kk<= jj-1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "yz0"
                                                                                 "2^17")
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (mult-by
                                                                           -1
                                                                           "4")
                                                                          (("2"
                                                                            (eval-expr
                                                                             "2^17")
                                                                            (("2"
                                                                              (eval-expr
                                                                               "2^19")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (typepred
                                                                 "yz1")
                                                                (("2"
                                                                  (case
                                                                   "forall (kk, jj:nat): kk<jj IMPLIES kk<= jj-1")
                                                                  (("1"
                                                                    (replace
                                                                     -6)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "yz1"
                                                                         "2^17")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (eval-expr
                                                                               "2^17")
                                                                              (("1"
                                                                                (eval-expr
                                                                                 "2^19")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "plus_reg1")
                                                          (("1"
                                                            (lemma
                                                             "closest_div_mult_def")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (simplify
                                                                   1)
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "2^13")
                                                                    (("1"
                                                                      (div-by
                                                                       -1
                                                                       "(240-4*ii)")
                                                                      (("1"
                                                                        (expand
                                                                         "mod")
                                                                        (("1"
                                                                          (lemma
                                                                           "floor_0")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "floor((2 ^ 13 * 2 ^ 19 * gz +
                                      4 * (2 ^ 13 * IF ii = 0 THEN yz0 ELSE yz1 ENDIF))
                                     / (240 - 4 * ii)
                                     + 1/2)
                               / 2 ^ 32")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (simplify
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -3
                                                                                                  r))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     "2^30")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (case
                                                                                               "NOT ii=1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    -3
                                                                                                    r))
                                                                                                  (("2"
                                                                                                    (eval-expr
                                                                                                     "2^30")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("3"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("3"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                -2
                                                                                                r))
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "not ii=1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -2
                                                                                                  r))
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   "2^32")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (eval-expr
                                                                 "2^14")
                                                                (("2"
                                                                  (eval-expr
                                                                   "2^32")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (eval-expr
                                                             "2^32")
                                                            (("2"
                                                              (eval-expr
                                                               "2^19")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lift-if
                                                                   1)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (eval-expr
                                                         "2^19")
                                                        (("2"
                                                          (eval-expr
                                                           "2^32")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    nil nil nil
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (times_reg1 formula-decl nil uint32 nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (global_zone_eq formula-decl nil cpr_int nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lon_TCC2 0
  (global_eq_lon_TCC2-1 nil 3745935423
   ("" (skeep)
    (("" (skeep)
      (("" (replace -1)
        (("" (simplify 1)
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2"
                  (case "(FORALL (ii:subrange(0,1)): global_decode(60, yz0, yz1, ii)<2^30)")
                  (("1" (inst -1 "1")
                    (("1" (eval-expr "2^30")
                      (("1" (eval-expr "2^32") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (skeep)
                      (("2" (lemma "global_zone_eq")
                        (("2" (inst -1 "60" "yz0" "yz1" "ii")
                          (("2" (assert)
                            (("2" (lemma "mod_pos")
                              (("2"
                                (inst?)
                                (("2"
                                  (case
                                   "NOT exists (gz: nat): gz<=60-ii-1 AND gz = mod(floor(1/2 + (59 * yz0 - 60 * yz1) / 2 ^ min(nb, 17)), 60 - ii)")
                                  (("1"
                                    (inst
                                     1
                                     "mod(floor(1/2 + (59 * yz0 - 60 * yz1) / 2 ^ min(nb, 17)), 60 - ii)")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide -2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (replace -2 -3 :dir rl)
                                        (("2"
                                          (expand "global_decode")
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (replace -4 1)
                                              (("2"
                                                (replace -3 1)
                                                (("2"
                                                  (mult-by -1 "2^19")
                                                  (("2"
                                                    (simplify -1)
                                                    (("2"
                                                      (rewrite
                                                       "times_reg1")
                                                      (("1"
                                                        (case
                                                         "NOT 2 ^ 19 * gz +
                                                                           4 * IF ii = 0 THEN yz0 ELSE yz1 ENDIF <= 2^19*(60-ii) -4")
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "yz0")
                                                                (("1"
                                                                  (replace
                                                                   -6)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (case
                                                                       "NOT yz0<=2^17-1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (eval-expr
                                                                           "2^17")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "forall (kk, jj:nat): kk<jj IMPLIES kk<= jj-1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "yz0"
                                                                                 "2^17")
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (mult-by
                                                                           -1
                                                                           "4")
                                                                          (("2"
                                                                            (eval-expr
                                                                             "2^17")
                                                                            (("2"
                                                                              (eval-expr
                                                                               "2^19")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (typepred
                                                                 "yz1")
                                                                (("2"
                                                                  (case
                                                                   "forall (kk, jj:nat): kk<jj IMPLIES kk<= jj-1")
                                                                  (("1"
                                                                    (replace
                                                                     -6)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "yz1"
                                                                         "2^17")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (eval-expr
                                                                               "2^17")
                                                                              (("1"
                                                                                (eval-expr
                                                                                 "2^19")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "plus_reg1")
                                                          (("1"
                                                            (lemma
                                                             "closest_div_mult_def")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (simplify
                                                                   1)
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "2^13")
                                                                    (("1"
                                                                      (div-by
                                                                       -1
                                                                       "(240-4*ii)")
                                                                      (("1"
                                                                        (expand
                                                                         "mod")
                                                                        (("1"
                                                                          (lemma
                                                                           "floor_0")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "floor((2 ^ 13 * 2 ^ 19 * gz +
                                      4 * (2 ^ 13 * IF ii = 0 THEN yz0 ELSE yz1 ENDIF))
                                     / (240 - 4 * ii)
                                     + 1/2)
                               / 2 ^ 32")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (simplify
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -3
                                                                                                  r))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (eval-expr
                                                                                                     "2^30")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (case
                                                                                               "NOT ii=1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   (!
                                                                                                    -3
                                                                                                    r))
                                                                                                  (("2"
                                                                                                    (eval-expr
                                                                                                     "2^30")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("3"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("3"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                -2
                                                                                                r))
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case
                                                                                             "not ii=1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (eval-expr
                                                                                                 (!
                                                                                                  -2
                                                                                                  r))
                                                                                                (("2"
                                                                                                  (eval-expr
                                                                                                   "2^32")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (eval-expr
                                                                 "2^14")
                                                                (("2"
                                                                  (eval-expr
                                                                   "2^32")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (eval-expr
                                                             "2^32")
                                                            (("2"
                                                              (eval-expr
                                                               "2^19")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lift-if
                                                                   1)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (eval-expr
                                                         "2^19")
                                                        (("2"
                                                          (eval-expr
                                                           "2^32")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    nil nil nil
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (times_reg1 formula-decl nil uint32 nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (global_zone_eq formula-decl nil cpr_int nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lon_TCC3 0
  (global_eq_lon_TCC3-1 nil 3745935423
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide-all-but (-4 1))
            (("" (typepred "xz0")
              (("" (replace -2)
                (("" (expand "min") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lon_TCC4 0
  (global_eq_lon_TCC4-1 nil 3745935423
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide-all-but (-4 1))
            (("" (typepred "xz1")
              (("" (replace -2)
                (("" (expand "min") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lon_TCC5 0
  (global_eq_lon_TCC5-1 nil 3745935423
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide -)
            (("" (typepred "xz0")
              (("" (typepred "nb") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lon_TCC6 0
  (global_eq_lon_TCC6-1 nil 3745935423
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide -)
            (("" (typepred "xz1")
              (("" (typepred "nb") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lon_TCC7 0
  (global_eq_lon_TCC7-1 nil 3745935423
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "nl0")
              (("" (eval-expr (! 1 r)) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (global_eq_lon 0
  (global_eq_lon-2 nil 3778832095
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (skoletin)
          (("" (skoletin)
            (("" (skoletin)
              (("" (flatten)
                (("" (lemma "nl_global")
                  (("" (inst -1 "own_lat" "own" "yz0" "yz1" "_")
                    (("" (inst-cp -1 "0")
                      (("" (skoletin)
                        (("" (assert)
                          (("" (split -1)
                            (("1" (inst -3 "1")
                              (("1"
                                (split -3)
                                (("1"
                                  (case
                                   "NL(lat(0)) = nl0 AND NL(lat(1)) = nl1")
                                  (("1"
                                    (hide (-2 -3 -4))
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "NOT FORALL (mes: below(2^min(nb,17))): (mes<2^nb AND mes<2^17)")
                                        (("1"
                                          (hide-all-but 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "mes")
                                              (("1"
                                                (typepred "nb")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (label "mes_pred" -1)
                                          (("2"
                                            (expand "global_decode" 1)
                                            (("2"
                                              (name
                                               "nli"
                                               "max(nl0 - i, 1)")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (name
                                                   "xzi"
                                                   "IF i = 0 THEN xz0 ELSE xz1 ENDIF")
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (reveal
                                                         "mes_pred")
                                                        (("2"
                                                          (lemma
                                                           "global_zone_eq")
                                                          (("2"
                                                            (case
                                                             "nl0/=1")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name
                                                                     "gz"
                                                                     "global_zone(nl0, xz0, xz1, i)")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "NOT 2^nb*gz<= 2^19*60")
                                                                        (("1"
                                                                          (lemma
                                                                           " mod_pos")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             " floor(1/2 +
                                (-1 * (nl0 * xz1) - xz0 + nl0 * xz0) / 2 ^ min(nb, 17))"
                                                                             "nl0-i")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nl0")
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT gz<= 59")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (-2
                                                                                      -3
                                                                                      -4
                                                                                      -5))
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT 2^nb<= 2^19")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "nb")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-ineq
                                                                                         -1
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "times_reg1")
                                                                          (("1"
                                                                            (rewrite
                                                                             "plus_reg1")
                                                                            (("1"
                                                                              (lemma
                                                                               "closest_div_mult_def")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "expt_div"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -14
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "lon2AWB")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Rlon_glo_surf")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -15)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "m_surf")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "NL_match_surf")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "min")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "max")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -7)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "MOD")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -4
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (eval-expr
                                                                                                                                 "2^19")
                                                                                                                                (("1"
                                                                                                                                  (eval-expr
                                                                                                                                   "2^17")
                                                                                                                                  (("1"
                                                                                                                                    (eval-expr
                                                                                                                                     "2^32")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -14)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Rlon_glo")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "m")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "NL_match")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -7)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "max")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -5)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "MOD")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "NOT min(nb, 17) = nb")
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        2))
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "nb")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "min")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lift-if
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -4
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "lon2AWB")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "nli<= 59")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1))
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "nb")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "nl0")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (eval-expr
                                                                                           "2^32")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (flatten)
                                                                                  (("4"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("4"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("4"
                                                                                        (eval-expr
                                                                                         "2^32")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -4
                                                                                 "xzi")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (eval-expr
                                                                                     (!
                                                                                      -1
                                                                                      r))
                                                                                    (("2"
                                                                                      (eval-expr
                                                                                       "2^17")
                                                                                      (("2"
                                                                                        (eval-expr
                                                                                         "2^32")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (inst
                                                                                 -4
                                                                                 "xzi")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("3"
                                                                                      (eval-expr
                                                                                       "2^32")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (eval-expr
                                                                                 "2^17")
                                                                                (("4"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (inst
                                                                                       -7
                                                                                       "xzi")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (eval-expr
                                                                             (!
                                                                              -1
                                                                              r))
                                                                            (("2"
                                                                              (eval-expr
                                                                               "2^32")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -1)
                                                              (("2"
                                                                (case
                                                                 "not nl0=1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "global_zone")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "times_reg1")
                                                                        (("2"
                                                                          (rewrite
                                                                           "plus_reg1")
                                                                          (("1"
                                                                            (lemma
                                                                             "closest_div_mult_def")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -12)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Rlon_glo_surf"
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -13
                                                                                               -6)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -6
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT nli = 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lift-if
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "m_surf")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "NL_match_surf")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -14
                                                                                                                   -8)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -7
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (simplify
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "MOD")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "mod"
                                                                                                                               1
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "floor_int")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   " floor(1/2 + -1 * xz1 / 2 ^ 17) / 1")
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (simplify
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "NOT 90 * floor(1/2 + -1 * xz1 / 2 ^ 17) + 90 * (xzi / 2 ^ 17) -
                                                                      90 * (floor(1/2 + -1 * xz1 / 2 ^ 17) / 1) = 90 * (xzi / 2 ^ 17)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "NOT 4 * ((2 ^ (32 - nb)) * xzi) / 4 = 2^32*(xzi/2^nb)")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "expt_div"
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "lon2AWB")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "mod_eq")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "(90 * (xzi / 2 ^ 17) / 360) * 2 ^ 32 = 2 ^ 32 * (xzi / 2 ^ nb)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -3)
                                                                                                                                                            (("2"
                                                                                                                                                              (eval-expr
                                                                                                                                                               "2^17")
                                                                                                                                                              (("2"
                                                                                                                                                                (eval-expr
                                                                                                                                                                 "2^19")
                                                                                                                                                                (("2"
                                                                                                                                                                  (eval-expr
                                                                                                                                                                   "2^32")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -11)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Rlon_glo")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -12)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -5
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "m")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "NL_match")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -5)
                                                                                                            (("2"
                                                                                                              (simplify
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "MOD")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "mod"
                                                                                                                       2
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (name
                                                                                                                         "fl"
                                                                                                                         "floor(1/2 + -1 * xz1 / 2 ^ nb)")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "not nli=1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "max")
                                                                                                                              (("1"
                                                                                                                                (lift-if
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (simplify
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "floor_int")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "fl/1")
                                                                                                                                    (("2"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "NOT 360 * (xzi / 2 ^ nb) - 360 * (fl / 1) + 360 * fl = 360 * (xzi / 2 ^ nb)")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "lon2AWB")
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 "NOT (360 * (xzi / 2 ^ nb) / 360) * 2 ^ 32 = (2 ^ (32 - nb)) * xzi / 1")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "expt_div"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "nb")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT nli<=59")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max")
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -8)
                                                                                          (("1"
                                                                                            (split
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (split
                                                                                         -5)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("2"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("3"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("4"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (eval-expr
                                                                                                     "2^14")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("3"
                                                                                        (lift-if
                                                                                         -7)
                                                                                        (("3"
                                                                                          (split
                                                                                           -7)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "max")
                                                                                    (("4"
                                                                                      (lift-if
                                                                                       -6)
                                                                                      (("4"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (flatten)
                                                                                (("5"
                                                                                  (inst
                                                                                   -2
                                                                                   "xzi")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (flatten)
                                                                                      (("5"
                                                                                        (eval-expr
                                                                                         "2^17")
                                                                                        (("5"
                                                                                          (eval-expr
                                                                                           "2^32")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (inst
                                                                                 -2
                                                                                 "xzi")
                                                                                (("6"
                                                                                  (flatten)
                                                                                  (("6"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("6"
                                                                                      (eval-expr
                                                                                       "2^32")
                                                                                      (("6"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -2
                                                                             "xzi")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (eval-expr
                                                                                 "2^17")
                                                                                (("2"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("2"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (inst
                                                                               -2
                                                                               "xzi")
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (eval-expr
                                                                                   "2^17")
                                                                                  (("3"
                                                                                    (eval-expr
                                                                                     "2^32")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (flatten)
                                                                            (("4"
                                                                              (inst
                                                                               -3
                                                                               "xzi")
                                                                              (("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (eval-expr
                                                                                   "2^17")
                                                                                  (("4"
                                                                                    (eval-expr
                                                                                     "2^32")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (replace -12)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -9)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (replace
                                                       -11
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (replace
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -8 -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (replace -8 -3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (global_zone const-decl "unsigned_int" cpr_int nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (plus_reg1 formula-decl nil uint32 nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nl0 skolem-const-decl "subrange(1, 59)" cpr_int nil)
    (i skolem-const-decl "subrange(0, 1)" cpr_int nil)
    (nli skolem-const-decl "{k: int | nl0 - i <= k AND 1 <= k}" cpr_int
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_div formula-decl nil exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (NL_match const-decl "bool" cpr_real nil)
    (m const-decl "int" cpr_real nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (NL_match_surf const-decl "bool" cpr_real nil)
    (m_surf const-decl "int" cpr_real nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (times_reg1 formula-decl nil uint32 nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_int formula-decl nil floor_ceil nil)
    (mod_eq formula-decl nil reals_mod "reals/")
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (xzi skolem-const-decl "below(2 ^ min(nb, 17))" cpr_int nil)
    (global_zone_eq formula-decl nil cpr_int nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nl_global formula-decl nil cpr_int nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lon2AWB const-decl "LonAWB" awb32 nil)
    (LonAWB type-eq-decl nil awb32 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Rlon_glo const-decl "real" cpr_real nil)
    (Rlon_glo_surf const-decl "real" cpr_real nil)
    (AWB2lat const-decl "Latitude" awb32 nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Rlat_glo const-decl "real" cpr_real nil)
    (Rlat_glo_surf const-decl "real" cpr_real nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nl_awb const-decl "subrange(1, 59)" nl nil)
    (nnreal type-eq-decl nil real_types nil)
    (north_lat? const-decl "bool" cpr_int nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil))
   nil)
  (global_eq_lon-1 nil 3746199376
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (skoletin)
          (("" (skoletin)
            (("" (skoletin)
              (("" (flatten)
                (("" (lemma "nl_global")
                  (("" (inst -1 "own" "yz0" "yz1" "_")
                    (("" (inst-cp -1 "0")
                      (("" (skoletin)
                        (("" (assert)
                          (("" (split -1)
                            (("1" (inst -3 "1")
                              (("1"
                                (split -3)
                                (("1"
                                  (case
                                   "NL(lat(0)) = nl0 AND NL(lat(1)) = nl1")
                                  (("1"
                                    (hide (-2 -3 -4))
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "NOT FORALL (mes: below(2^min(nb,17))): (mes<2^nb AND mes<2^17)")
                                        (("1"
                                          (hide-all-but 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "mes")
                                              (("1"
                                                (typepred "nb")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (label "mes_pred" -1)
                                          (("2"
                                            (expand "global_decode" 1)
                                            (("2"
                                              (name
                                               "nli"
                                               "max(nl0 - i, 1)")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (name
                                                   "xzi"
                                                   "IF i = 0 THEN xz0 ELSE xz1 ENDIF")
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (reveal
                                                         "mes_pred")
                                                        (("2"
                                                          (lemma
                                                           "global_zone_eq")
                                                          (("2"
                                                            (case
                                                             "nl0/=1")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name
                                                                     "gz"
                                                                     "global_zone(nl0, xz0, xz1, i)")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "NOT 2^nb*gz<= 2^19*60")
                                                                        (("1"
                                                                          (lemma
                                                                           " mod_pos")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             " floor(1/2 +
                  (-1 * (nl0 * xz1) - xz0 + nl0 * xz0) / 2 ^ min(nb, 17))"
                                                                             "nl0-i")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nl0")
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT gz<= 59")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (-2
                                                                                      -3
                                                                                      -4
                                                                                      -5))
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT 2^nb<= 2^19")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "nb")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-ineq
                                                                                         -1
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "times_reg1")
                                                                          (("1"
                                                                            (rewrite
                                                                             "plus_reg1")
                                                                            (("1"
                                                                              (lemma
                                                                               "closest_div_mult_def")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "expt_div"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -14
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "lon2AWB")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Rlon_glo_surf")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -15)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "m_surf")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "NL_match_surf")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "min")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "max")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -7)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "MOD")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -4
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (eval-expr
                                                                                                                                 "2^19")
                                                                                                                                (("1"
                                                                                                                                  (eval-expr
                                                                                                                                   "2^17")
                                                                                                                                  (("1"
                                                                                                                                    (eval-expr
                                                                                                                                     "2^32")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -14)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Rlon_glo")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "m")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "NL_match")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -7)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "max")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -5)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "MOD")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "NOT min(nb, 17) = nb")
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        2))
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "nb")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "min")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lift-if
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -4
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "lon2AWB")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "nli<= 59")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1))
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "nb")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "nl0")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (eval-expr
                                                                                           "2^32")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (flatten)
                                                                                  (("4"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("4"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("4"
                                                                                        (eval-expr
                                                                                         "2^32")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -4
                                                                                 "xzi")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (eval-expr
                                                                                     (!
                                                                                      -1
                                                                                      r))
                                                                                    (("2"
                                                                                      (eval-expr
                                                                                       "2^17")
                                                                                      (("2"
                                                                                        (eval-expr
                                                                                         "2^32")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (inst
                                                                                 -4
                                                                                 "xzi")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("3"
                                                                                      (eval-expr
                                                                                       "2^32")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (eval-expr
                                                                                 "2^17")
                                                                                (("4"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (inst
                                                                                       -7
                                                                                       "xzi")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (eval-expr
                                                                             (!
                                                                              -1
                                                                              r))
                                                                            (("2"
                                                                              (eval-expr
                                                                               "2^32")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -1)
                                                              (("2"
                                                                (case
                                                                 "not nl0=1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "global_zone")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "times_reg1")
                                                                        (("2"
                                                                          (rewrite
                                                                           "plus_reg1")
                                                                          (("1"
                                                                            (lemma
                                                                             "closest_div_mult_def")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -12)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Rlon_glo_surf"
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -13
                                                                                               -6)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -6
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT nli = 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lift-if
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "m_surf")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "NL_match_surf")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -14
                                                                                                                   -8)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -7
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (simplify
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "MOD")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "mod"
                                                                                                                               1
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "floor_int")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   " floor(1/2 + -1 * xz1 / 2 ^ 17) / 1")
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (simplify
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "NOT 90 * floor(1/2 + -1 * xz1 / 2 ^ 17) + 90 * (xzi / 2 ^ 17) -
                                           90 * (floor(1/2 + -1 * xz1 / 2 ^ 17) / 1) = 90 * (xzi / 2 ^ 17)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "NOT 4 * ((2 ^ (32 - nb)) * xzi) / 4 = 2^32*(xzi/2^nb)")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "expt_div"
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "lon2AWB")
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "mod_eq")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "(90 * (xzi / 2 ^ 17) / 360) * 2 ^ 32 = 2 ^ 32 * (xzi / 2 ^ nb)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -3)
                                                                                                                                                            (("2"
                                                                                                                                                              (eval-expr
                                                                                                                                                               "2^17")
                                                                                                                                                              (("2"
                                                                                                                                                                (eval-expr
                                                                                                                                                                 "2^19")
                                                                                                                                                                (("2"
                                                                                                                                                                  (eval-expr
                                                                                                                                                                   "2^32")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -11)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Rlon_glo")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -12)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -5
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "m")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "NL_match")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -5)
                                                                                                            (("2"
                                                                                                              (simplify
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "MOD")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "mod"
                                                                                                                       2
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (name
                                                                                                                         "fl"
                                                                                                                         "floor(1/2 + -1 * xz1 / 2 ^ nb)")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "not nli=1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "max")
                                                                                                                              (("1"
                                                                                                                                (lift-if
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (simplify
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "floor_int")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "fl/1")
                                                                                                                                    (("2"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "NOT 360 * (xzi / 2 ^ nb) - 360 * (fl / 1) + 360 * fl = 360 * (xzi / 2 ^ nb)")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "lon2AWB")
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 "NOT (360 * (xzi / 2 ^ nb) / 360) * 2 ^ 32 = (2 ^ (32 - nb)) * xzi / 1")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "expt_div"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "nb")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT nli<=59")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max")
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -8)
                                                                                          (("1"
                                                                                            (split
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (split
                                                                                         -5)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("1"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("2"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("3"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (eval-expr
                                                                                               (!
                                                                                                1
                                                                                                l
                                                                                                1
                                                                                                1))
                                                                                              (("4"
                                                                                                (eval-expr
                                                                                                 "2^32")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (eval-expr
                                                                                                     "2^14")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "nl0")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("3"
                                                                                        (lift-if
                                                                                         -7)
                                                                                        (("3"
                                                                                          (split
                                                                                           -7)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "max")
                                                                                    (("4"
                                                                                      (lift-if
                                                                                       -6)
                                                                                      (("4"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (flatten)
                                                                                (("5"
                                                                                  (inst
                                                                                   -2
                                                                                   "xzi")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (flatten)
                                                                                      (("5"
                                                                                        (eval-expr
                                                                                         "2^17")
                                                                                        (("5"
                                                                                          (eval-expr
                                                                                           "2^32")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (inst
                                                                                 -2
                                                                                 "xzi")
                                                                                (("6"
                                                                                  (flatten)
                                                                                  (("6"
                                                                                    (eval-expr
                                                                                     "2^17")
                                                                                    (("6"
                                                                                      (eval-expr
                                                                                       "2^32")
                                                                                      (("6"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -2
                                                                             "xzi")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (eval-expr
                                                                                 "2^17")
                                                                                (("2"
                                                                                  (eval-expr
                                                                                   "2^32")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("2"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (inst
                                                                               -2
                                                                               "xzi")
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (eval-expr
                                                                                   "2^17")
                                                                                  (("3"
                                                                                    (eval-expr
                                                                                     "2^32")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (flatten)
                                                                            (("4"
                                                                              (inst
                                                                               -3
                                                                               "xzi")
                                                                              (("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (eval-expr
                                                                                   "2^17")
                                                                                  (("4"
                                                                                    (eval-expr
                                                                                     "2^32")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (replace -12)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -9)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (replace
                                                       -11
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (replace
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -8 -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (replace -8 -3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NumBins type-eq-decl nil cpr_defs nil)
    (nb formal-const-decl "NumBins" cpr_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (global_decode const-decl "unsigned_int" cpr_int nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (north_lat? const-decl "bool" cpr_int nil)
    (nnreal type-eq-decl nil real_types nil)
    (nl_awb const-decl "subrange(1, 59)" nl nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Rlat_glo_surf const-decl "real" cpr_real nil)
    (Rlat_glo const-decl "real" cpr_real nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Latitude type-eq-decl nil rlat_spec nil) nil
    (AWB2lat const-decl "Latitude" awb32 nil)
    (Rlon_glo_surf const-decl "real" cpr_real nil)
    (Rlon_glo const-decl "real" cpr_real nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (LonAWB type-eq-decl nil awb32 nil)
    (lon2AWB const-decl "LonAWB" awb32 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (nl_global formula-decl nil cpr_int nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (global_zone_eq formula-decl nil cpr_int nil) nil
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mod_eq formula-decl nil reals_mod "reals/")
    (floor_int formula-decl nil floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (times_reg1 formula-decl nil uint32 nil)
    (closest_div_mult_def formula-decl nil uint32 nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "below(m)" reals_mod "reals/") nil
    (NL_match_surf const-decl "bool" cpr_real nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    nil (NL_match const-decl "bool" cpr_real nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt_div formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil) nil nil nil
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (global_zone const-decl "unsigned_int" cpr_int nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (NL const-decl "subrange(1, 59)" nl nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak)))

