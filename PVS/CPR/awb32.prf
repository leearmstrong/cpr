(awb32
 (AWB2lat_TCC1 0
  (AWB2lat_TCC1-1 nil 3735292781
   ("" (skeep)
    (("" (eval-expr (! -1 r))
      (("" (assert)
        (("" (replace -1)
          (("" (expand "resolution")
            (("" (eval-expr "(360 / 2 ^ 32)") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (resolution const-decl "real" awb32 nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (AWB2lat_TCC2 0
  (AWB2lat_TCC2-1 nil 3735292781
   ("" (skeep)
    (("" (eval-expr "(360 / 2 ^ 32)")
      (("" (eval-expr " 2 ^ 30")
        (("" (assert)
          (("" (expand "resolution")
            (("" (assert)
              (("" (ground)
                (("1" (typepred "lat_bin") (("1" (assert) nil nil))
                  nil)
                 ("2" (typepred "lat_bin") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (LatAWB type-eq-decl nil awb32 nil)
    (resolution const-decl "real" awb32 nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (AWB2lon_TCC1 0
  (AWB2lon_TCC1-1 nil 3735292781
   ("" (skeep)
    (("" (typepred "lon_bin")
      (("" (assert)
        (("" (eval-expr " 2 ^ 32")
          (("" (assert)
            (("" (expand "resolution") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((LonAWB type-eq-decl nil awb32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (resolution const-decl "real" awb32 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (lat2AWB_TCC1 0
  (lat2AWB_TCC1-1 nil 3735292781
   ("" (skeep)
    (("" (case "lat>=-360/2^33")
      (("1" (case "lat>=0")
        (("1" (hide -2)
          (("1" (typepred "lat")
            (("1" (expand "mod" 1 2)
              (("1" (div-by -2 "360")
                (("1" (assert)
                  (("1" (lemma "floor_0")
                    (("1" (inst -1 "lat/360")
                      (("1" (flatten)
                        (("1" (hide -1)
                          (("1" (split -1)
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (case "(2^32/360)* lat<=2^30")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "NOT floor((2 ^ 32 / 360) * lat +1/2) <= floor(2 ^ 30+1/2)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (eval-expr (! -1 r))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (eval-expr (! 1 r))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "mod" 1 1)
                                                (("2"
                                                  (lemma "floor_0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "floor(1/2 + (2 ^ 32 / 360) * lat) / 2 ^ 32")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (cross-mult
                                                               1)
                                                              (("2"
                                                                (mult-by
                                                                 -7
                                                                 "2^32")
                                                                (("2"
                                                                  (div-by
                                                                   -1
                                                                   "360")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            (("3"
                                                              (cross-mult
                                                               1)
                                                              (("3"
                                                                (eval-expr
                                                                 (!
                                                                  1
                                                                  r))
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (mult-by -2 "2^32")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (eval-expr (! -1 r))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (eval-expr (! 1 r))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flip-ineq 1)
          (("2" (hide 2)
            (("2" (expand "mod" 1 2)
              (("2" (lemma "floor_0")
                (("2" (inst -1 "lat / 360 +1")
                  (("2" (flatten)
                    (("2" (hide -1)
                      (("2" (split -1)
                        (("1" (rewrite "floor_plus_int")
                          (("1" (move-terms -1 l 1)
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "NOT 360 * (2 ^ 32 / 360) = 2^32")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (mult-by -2 "(2^32/360)")
                                      (("2"
                                        (eval-expr (! -1 r))
                                        (("2"
                                          (lemma "floor_0")
                                          (("2"
                                            (inst
                                             -1
                                             "(2 ^ 32 / 360) * lat + 1/2")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (mult-by
                                                   -4
                                                   "(2^32/360)")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (lemma
                                                       "floor_plus_int")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "2 ^ 32"
                                                         "(2 ^ 32 / 360) * lat + 1 / 2")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (eval-formula
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flip-ineq 1)
        (("2" (hide 1)
          (("2" (lemma " mod_pos")
            (("2"
              (inst -1 "floor((2 ^ 32 / 360) * mod(lat, 360) + 1 / 2) "
               "2^32")
              (("2" (flatten)
                (("2" (assert)
                  (("2" (hide (-1 -2))
                    (("2" (typepred "lat")
                      (("2" (expand "mod" 1 2)
                        (("2" (lemma "floor_0")
                          (("2" (inst -1 "lat / 360 +1")
                            (("2" (flatten)
                              (("2"
                                (hide -1)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (rewrite "floor_plus_int")
                                    (("1"
                                      (move-terms -1 l 1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "NOT 360 * (2 ^ 32 / 360) = 2^32")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replaces -1)
                                              (("2"
                                                (mult-by -3 "2^32/360")
                                                (("2"
                                                  (mult-by
                                                   -1
                                                   "2^32/360")
                                                  (("2"
                                                    (expand "mod")
                                                    (("2"
                                                      (lemma "floor_0")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "floor(2 ^ 32 + 1/2 + (2 ^ 32 / 360) * lat) / 2 ^ 32")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (eval-expr
                                                                     "2^32")
                                                                    (("1"
                                                                      (eval-expr
                                                                       "2^30")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (cross-mult
                                                                 1)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (eval-expr
                                                                     "2^30")
                                                                    (("3"
                                                                      (eval-expr
                                                                       "2^32")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (eval-expr
                                                                           "2^33")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (eval-expr "2^33")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (Latitude type-eq-decl nil rlat_spec nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (lat_awb_inverse 0
  (lat_awb_inverse-2 nil 3736166912
   ("" (skeep)
    (("" (expand "AWB2lat")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (expand "resolution")
            (("1" (expand "lat2AWB")
              (("1" (expand "mod" 1 2)
                (("1" (lemma "floor_0")
                  (("1" (inst -1 "awb * (360 / 2 ^ 32) / 360")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "NOT 360 / 2 ^ 32 * (2 ^ 32 / 360) * awb = awb")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (lemma "floor_plus_int")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (eval-expr "floor(1/2)")
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "mod")
                                                    (("2"
                                                      (lemma "floor_0")
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (assert)
                            (("3" (eval-expr "2^30")
                              (("3"
                                (eval-expr "2^32")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (typepred "awb")
              (("2" (assert)
                (("2" (flatten)
                  (("2" (expand "resolution")
                    (("2" (expand "lat2AWB")
                      (("2" (lemma "mod_multiple")
                        (("2"
                          (inst -1 "awb * (360 / 2 ^ 32)" "360" "-1")
                          (("2" (replace -1)
                            (("2" (hide -1)
                              (("2"
                                (expand "mod" 2 2)
                                (("2"
                                  (lemma "floor_0")
                                  (("2"
                                    (inst
                                     -1
                                     "awb * (360 / 2 ^ 32) / 360")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (case
                                               "NOT 360 / 2 ^ 32 * (2 ^ 32 / 360) * awb = awb")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "floor_plus_int")
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (eval-expr
                                                           "floor(1/2)")
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "mod")
                                                                (("2"
                                                                  (lemma
                                                                   "floor_0")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AWB2lat const-decl "Latitude" awb32 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lat2AWB const-decl "LatAWB" awb32 nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (LatAWB type-eq-decl nil awb32 nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (resolution const-decl "real" awb32 nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)
  (lat_awb_inverse-1 nil 3735307095
   ("" (skeep)
    (("" (expand "AWB2lat")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "resolution")
              (("1" (mult-by -1 "360/2^32")
                (("1" (eval-expr (! -1 r))
                  (("1" (replace -1)
                    (("1" (case " NOT awb * (360 / 2 ^ 32)>= 0")
                      (("1" (assert) nil nil)
                       ("2" (expand "lat2AWB")
                        (("2" (assert)
                          (("2" (eval-expr "-360 / 2 ^ 33")
                            (("2" (replaces -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (flip-ineq 1)
              (("2" (typepred "awb")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (eval-expr (! -2 r))
                      (("2" (replaces -1)
                        (("2" (expand "resolution")
                          (("2" (case "NOT awb <=2^32 -1")
                            (("1" (assert)
                              (("1"
                                (eval-expr "2^32")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "NOT FORALL (a,b:nat): a<b IMPLIES a<=b-1")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (inst -1 "awb" "4294967296")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -2 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1 2)
                                          (("2"
                                            (replace -1 -2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -2)
                                (("2"
                                  (mult-by -1 "360/2^32")
                                  (("2"
                                    (eval-expr (! -1 r))
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (case
                                         "NOT  awb * (360 / 2 ^ 32)-360 <= 193273528275 / 536870912 -360")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (eval-expr (! -1 r))
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand "lat2AWB")
                                              (("2"
                                                (eval-expr
                                                 "-360 / 2 ^ 33")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (lon_awb_inverse 0
  (lon_awb_inverse-1 nil 3735308478
   ("" (skeep)
    (("" (expand "AWB2lon")
      (("" (expand "resolution")
        (("" (typepred "awb")
          (("" (case "NOT 360 / 2 ^ 32 * awb >=0")
            (("1" (assert) nil nil)
             ("2" (mult-by -2 "360/2^32")
              (("2" (eval-expr (! -2 r))
                (("2" (replaces -1)
                  (("2" (expand "lon2AWB")
                    (("2"
                      (case "NOT (360 / 2 ^ 32 * awb / 360) * 2 ^ 32 = awb")
                      (("1" (assert) nil nil)
                       ("2" (replaces -1)
                        (("2" (lemma "floor_plus_int")
                          (("2" (inst -1 "awb" "1/2")
                            (("2" (replaces -1)
                              (("2"
                                (eval-expr "floor(1/2)")
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (expand "mod")
                                    (("2"
                                      (lemma " floor_0")
                                      (("2"
                                        (inst -1 "awb / 2 ^ 32")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AWB2lon const-decl "{x: real | x >= 0 AND x < 360}" awb32 nil)
    (LonAWB type-eq-decl nil awb32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (lon2AWB const-decl "LonAWB" awb32 nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (resolution const-decl "real" awb32 nil))
   shostak)))

