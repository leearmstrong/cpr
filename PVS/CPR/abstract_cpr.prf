(abstract_cpr
 (MOD_TCC1 0
  (MOD_TCC1-1 nil 3717500113
   ("" (skeep)
    (("" (expand "mod")
      (("" (case "NOT (x - y * floor(x / y))/y = fractional(x/y)")
        (("1" (expand "fractional") (("1" (assert) nil nil)) nil)
         ("2" (typepred "fractional(x/y)")
          (("2" (cross-mult -3)
            (("2" (mult-by -1 "y")
              (("2" (mult-by -2 "y") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil))
   nil))
 (dl_less 0
  (dl_less-1 nil 3732531585
   ("" (skeep) (("" (expand "dl") (("" (assert) nil nil)) nil)) nil)
   ((dl const-decl "posreal" abstract_cpr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (decomp_position 0
  (decomp_position-1 nil 3717324245
   ("" (skeep)
    (("" (skoletin)
      ((""
        (case "NOT (2 ^ bins * mod(position, dl_1) / dl_1) / 2 ^ bins =  mod(position, dl_1) / dl_1 ")
        (("1" (assert) nil nil)
         ("2" (replace -1)
          (("2" (expand "mod") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (alt_rec_pos 0
  (alt_rec_pos-1 nil 3717408664
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "recovered_position")
        (("" (replace -1 :dir rl)
          (("" (rewrite "times_div1" :dir rl)
            (("" (rewrite "mod_frac")
              (("" (lemma "real_parts")
                (("" (inst?)
                  (("" (move-terms -1 r 1)
                    (("" (replaces -1 :dir rl)
                      (("" (simplify 1)
                        (("" (lemma "floor_plus_int")
                          ((""
                            (inst -1 "-floor(position/dll)*2^bins"
                             " 1/2 +2^bins*(position/dll)")
                            (("" (replaces -1)
                              ((""
                                (rewrite "div_distributes" :dir rl)
                                ((""
                                  (case
                                   "NOT (-floor(position / dll) * 2 ^ bins / 2 ^ bins) = -floor(position/dll)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (simplify 1)
                                      (("2"
                                        (rewrite "expt_plus")
                                        (("2"
                                          (rewrite "expt_x1")
                                          (("2"
                                            (rewrite
                                             "div_distributes"
                                             :dir
                                             rl)
                                            (("2"
                                              (simplify 1)
                                              (("2"
                                                (case
                                                 "NOT 2 ^ bins * (dll / (2 * 2 ^ bins) / dll) = 1/2")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (div_distributes formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_parts formula-decl nil floor_ceil nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (rec_pos_incr 0
  (rec_pos_incr-1 nil 3736095404
   ("" (skeep)
    (("" (lemma "alt_rec_pos")
      (("" (inst?)
        (("" (ground)
          (("" (replaces -1)
            (("" (lemma "alt_rec_pos")
              (("" (inst?)
                (("" (ground)
                  (("" (replaces -1)
                    (("" (cancel-by 1 "dl(dnl, range)")
                      (("" (cancel-by 2 "1/2^bins")
                        ((""
                          (case "NOT dl(dnl, range) / 2 ^ (1 + bins)+pos0 <= dl(dnl, range) / 2 ^ (1 + bins) + pos1")
                          (("1" (assert) nil nil)
                           ("2" (div-by -1 "dl(dnl, range)")
                            (("2" (mult-by -1 "2^bins")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((alt_rec_pos formula-decl nil abstract_cpr nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (rec_pos_less 0
  (rec_pos_less-1 nil 3732531634
   ("" (skeep)
    (("" (lemma "alt_rec_pos")
      (("" (inst -1 "binmod" "dnl" "position" "range/2^(bins-binmod)")
        (("" (lemma "alt_rec_pos")
          (("" (inst -1 "bins" "dnl" "position" "range")
            (("" (ground)
              (("" (rewrite "dl_less")
                ((""
                  (case " NOT FORALL (x:real): dl(dnl, range) / 2 ^ (bins - binmod) *
        (x
          / 2 ^ binmod) = dl(dnl, range)* (x/2^bins)")
                  (("1" (hide-all-but (-3 1))
                    (("1" (skeep)
                      (("1" (cross-mult)
                        (("1" (lemma "expt_plus")
                          (("1"
                            (inst -1 "(bins - binmod)" "binmod" "2")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst -1 "floor(2 ^ binmod *
                ((dl(dnl, range) / 2 ^ (bins - binmod) / 2 ^ (1 + binmod) +
                   position)
                  / (dl(dnl, range) / 2 ^ (bins - binmod))))")
                    (("2" (replaces -1)
                      (("2"
                        (case "NOT FORALL (y:real): 2 ^ binmod *
                ((y)
                  / (dl(dnl, range) / 2 ^ (bins - binmod))) = 2^bins * ((y)/dl(dnl, range))")
                        (("1" (hide-all-but (-3 1))
                          (("1" (skeep)
                            (("1" (cross-mult)
                              (("1"
                                (lemma "expt_plus")
                                (("1"
                                  (inst
                                   -1
                                   "(bins - binmod)"
                                   "binmod"
                                   "2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst -1
                           "dl(dnl, range) / 2 ^ (bins - binmod) / 2 ^ (1 + binmod) +
                   position")
                          (("2" (replaces -1)
                            (("2"
                              (case "NOT dl(dnl, range) / 2 ^ (bins - binmod) / 2 ^ (1 + binmod) = dl(dnl, range) / 2 ^ (1 + bins)")
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (cross-mult)
                                  (("1"
                                    (lemma "expt_plus")
                                    (("1"
                                      (inst
                                       -1
                                       "(bins - binmod)"
                                       "1+binmod"
                                       "2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (replace -3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((alt_rec_pos formula-decl nil abstract_cpr nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (dl_less formula-decl nil abstract_cpr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (recovered_position_close 0
  (recovered_position_close-1 nil 3717325267
   ("" (skeep)
    (("" (invoke (name "rec_pos" "%1") (! 1 l 1 1))
      (("" (lemma "decomp_position")
        (("" (inst -1 "bins" "dnl" "position" "range")
          (("" (assert)
            (("" (replaces -2)
              (("" (replaces -1)
                (("" (expand "rec_pos")
                  (("" (expand "recovered_position")
                    (("" (assert)
                      (("" (invoke (name "dll" "%1") (! 1 r 1))
                        (("" (replaces -1)
                          (("" (assert)
                            (("" (rewrite "commutative_mult")
                              ((""
                                (assert)
                                ((""
                                  (invoke (name "hold" "%1") (! 1 l 1))
                                  ((""
                                    (replace -1)
                                    ((""
                                      (factor -1 l)
                                      ((""
                                        (rewrite "minus_div2" -1)
                                        ((""
                                          (case
                                           "FORALL (x:real): abs(floor(1/2 + x) - x)<=1/2")
                                          (("1"
                                            (replace -2 :dir rl)
                                            (("1"
                                              (rewrite "abs_mult")
                                              (("1"
                                                (rewrite "abs_div")
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (invoke
                                                     (name "arg" "%1")
                                                     (! 1 l 2 1 1 2))
                                                    (("1"
                                                      (inst -2 "arg")
                                                      (("1"
                                                        (lemma
                                                         "expt_pos"
                                                         ("px"
                                                          "2"
                                                          "i"
                                                          "bins"))
                                                        (("1"
                                                          (case
                                                           "NOT dll>0")
                                                          (("1"
                                                            (expand
                                                             "dll")
                                                            (("1"
                                                              (expand
                                                               "dl")
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "abs"
                                                             1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "abs"
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "expt_plus")
                                                                (("2"
                                                                  (rewrite
                                                                   "expt_x1")
                                                                  (("2"
                                                                    (cross-mult
                                                                     -4)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (cancel-by
                                                                           1
                                                                           "dll")
                                                                          (("2"
                                                                            (cancel-by
                                                                             2
                                                                             "2^bins")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "floor(1/2 + x)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (move-terms
                                                       -1
                                                       r
                                                       2)
                                                      (("2"
                                                        (move-terms
                                                         -2
                                                         r
                                                         2)
                                                        (("2"
                                                          (move-terms
                                                           -2
                                                           l
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (lift-if
                                                               1)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (rec_pos skolem-const-decl "real" abstract_cpr nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (commutative_mult formula-decl nil number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_mult formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (dll skolem-const-decl "posreal" abstract_cpr nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_pos formula-decl nil exponentiation nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs_div formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_div2 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (decomp_position formula-decl nil abstract_cpr nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (enc_mod_val 0
  (enc_mod_val-1 nil 3717330391
   ("" (skeep)
    (("" (expand "enc_mod")
      (("" (lemma "mod_pos") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mod_pos formula-decl nil reals_mod "reals/"))
   nil))
 (enc_mod_less 0
  (enc_mod_less-1 nil 3717330935
   ("" (skeep)
    (("" (expand "enc_mod")
      (("" (expand "enc_raw")
        (("" (expand "dl")
          ((""
            (case "2 ^ binmod *
                   mod(position, range / 2 ^ (bins - binmod) / dnl)
                   / (range / 2 ^ (bins - binmod) / dnl) = 2 ^ bins *
                   mod(position, range / 2 ^ (bins - binmod) / dnl)
                   / (range / dnl)")
            (("1" (replaces -1)
              (("1" (name "dll" "range/dnl")
                (("1" (replace -1)
                  (("1" (expand "mod" 1 2)
                    (("1" (expand "mod" 1 3)
                      (("1" (rewrite "minus_div2" :dir rl)
                        (("1"
                          (case "NOT floor(position / dll) * 2 ^ bins * dll / dll = floor(position / dll) * 2 ^ bins")
                          (("1" (assert) nil nil)
                           ("2" (replaces -1)
                            (("2" (rewrite "minus_div2" :dir rl)
                              (("2"
                                (case
                                 "NOT floor(position / (range / 2 ^ (bins - binmod) / dnl)) *
                     2 ^ bins
                     * (range / 2 ^ (bins - binmod) / dnl)
                     / dll = floor(position / (range / 2 ^ (bins - binmod) / dnl)) *
                     2 ^ binmod")
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "dll")
                                    (("1"
                                      (rewrite "expt_div" :dir rl)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1)
                                  (("2"
                                    (lemma " floor_plus_int")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "-
                   floor(position / dll) * 2 ^ bins"
                                       "1/2 +2^bins*position/dll")
                                      (("2"
                                        (replaces -2)
                                        (("2"
                                          (inst
                                           -1
                                           "-
                   floor(position / (range / 2 ^ (bins - binmod) / dnl)) * 2 ^ binmod"
                                           "1/2 +2^bins*position/dll")
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (lemma "mod_multiple")
                                              (("2"
                                                (inst
                                                 -1
                                                 "floor(1 / 2 + 2 ^ bins * position / dll)"
                                                 "2 ^ binmod"
                                                 "-floor(position / dll)*2^(bins-binmod)")
                                                (("1"
                                                  (rewrite
                                                   "expt_div"
                                                   -1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (case
                                                     "NOT -floor(position / dll) * (2 ^ bins / 2 ^ binmod) * 2 ^ binmod = -floor(position / dll) * 2 ^ bins")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (lemma
                                                           "mod_multiple")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "floor(1 / 2 + 2 ^ bins * position / dll)"
                                                             "2^binmod"
                                                             "-floor(position / (range / (2 ^ bins / 2 ^ binmod) / dnl))")
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "int_expt")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "bins-binmod"
                                                     "2")
                                                    (("1"
                                                      (case
                                                       "NOT integer_pred(2^(bins-binmod))")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2)
                                                        (("2"
                                                          (lemma
                                                           "int_times_int_is_int")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "-floor(position / dll)"
                                                             "2 ^ (bins - binmod)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (cross-mult 1)
                (("2" (rewrite "expt_div" :dir rl)
                  (("2" (cross-mult 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (int_expt judgement-tcc nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_times_int_is_int judgement-tcc nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (binmod skolem-const-decl "posnat" abstract_cpr nil)
    (bins skolem-const-decl "posnat" abstract_cpr nil)
    (position skolem-const-decl "real" abstract_cpr nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_div formula-decl nil exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (dll skolem-const-decl "posreal" abstract_cpr nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_div2 formula-decl nil real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (alt_enc_is_enc 0
  (alt_enc_is_enc-1 nil 3717333537
   ("" (skeep)
    (("" (expand "alt_enc")
      (("" (expand "enc_mod")
        (("" (expand "enc_raw")
          (("" (name "dll" "dl(dnl, range)")
            (("" (replaces -1)
              (("" (lemma "mod_frac")
                (("" (inst?)
                  (("" (replaces -1)
                    (("" (mult-by -1 "2^bins")
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (lemma "mod_frac")
                            (("" (inst?)
                              ((""
                                (mult-by -1 "2^bins")
                                ((""
                                  (replaces -1)
                                  ((""
                                    (lemma "real_parts")
                                    ((""
                                      (inst-cp
                                       -1
                                       "(dll / 2 ^ (1 + bins) + position) / dll")
                                      ((""
                                        (move-terms -2 r 1)
                                        ((""
                                          (replaces -2 :dir rl)
                                          ((""
                                            (inst -1 "position / dll")
                                            ((""
                                              (move-terms -1 r 1)
                                              ((""
                                                (replaces -1 :dir rl)
                                                ((""
                                                  (simplify 1)
                                                  ((""
                                                    (case
                                                     "NOT 2 ^ bins * ((dll / 2 ^ (1 + bins) + position) / dll) = 1/2 +2^bins*(position/dll)")
                                                    (("1"
                                                      (rewrite
                                                       "expt_plus")
                                                      (("1"
                                                        (rewrite
                                                         "expt_x1")
                                                        (("1"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lemma
                                                         "floor_plus_int")
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "-
             floor((dll / 2 ^ (1 + bins) + position) / dll) * 2 ^ bins"
                                                           "1 / 2 + 2 ^ bins * (position / dll)")
                                                          (("2"
                                                            (replaces
                                                             -2)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "-
                  floor(position / dll) * 2 ^ bins"
                                                               "1/2 + 2 ^ bins * (position / dll)")
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "mod_multiple")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "floor(1 / 2 + 2 ^ bins * (position / dll)) "
                                                                     "2^bins"
                                                                     "-floor(position / dll)")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "mod")
                                                                        (("2"
                                                                          (cancel-by
                                                                           1
                                                                           "2^bins")
                                                                          (("2"
                                                                            (hide
                                                                             1)
                                                                            (("2"
                                                                              (case
                                                                               "floor((dll / 2 ^ (1 + bins) + position) / dll) =
        floor(floor(1/2 + (2 ^ bins) * (position / dll)) / (2 ^ bins))")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (move-terms
                                                                                   1
                                                                                   l
                                                                                   1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "floor_plus_int")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "-
        floor((dll / 2 ^ (1 + bins) + position) / dll)"
                                                                                       "floor(1 / 2 + (2 ^ bins) * (position / dll)) / (2 ^ bins)")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "floor_0")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "floor(1 / 2 + (2 ^ bins) * (position / dll)) / (2 ^ bins) +
              -floor((dll / 2 ^ (1 + bins) + position) / dll)")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "NOT (0 <=
       floor(1 / 2 + (2 ^ bins) * (position / dll)) / (2 ^ bins) +
        -floor((dll / 2 ^ (1 + bins) + position) / dll)
       AND
       floor(1 / 2 + (2 ^ bins) * (position / dll)) / (2 ^ bins) +
        -floor((dll / 2 ^ (1 + bins) + position) / dll)
        < 1)")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "floor(1 / 2 + (2 ^ bins) * (position / dll))")
                                                                                                        (("1"
                                                                                                          (div-by
                                                                                                           -1
                                                                                                           "2^bins")
                                                                                                          (("1"
                                                                                                            (div-by
                                                                                                             -2
                                                                                                             "2^bins")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "NOT (1 / 2 + (2 ^ bins) * (position / dll)) / 2 ^ bins = 1/2^(bins+1) +position/dll")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "expt_plus")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "expt_x1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "floor((dll / 2 ^ (1 + bins) + position) / dll)")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "NOT (dll / 2 ^ (1 + bins) + position) / dll = 1/2^(1+bins) + position/dll")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (move-terms
                                                                                                                           1
                                                                                                                           r
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "0 - -floor(1 / 2 ^ (1 + bins) + position / dll) = floor(1 / 2 ^ (1 + bins) + position / dll)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (cross-mult
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (mult-by
                                                                                                                                     -1
                                                                                                                                     "2^bins")
                                                                                                                                    (("1"
                                                                                                                                      (cross-mult
                                                                                                                                       -4)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "FORALL (i,j:int): i<j+1 IMPLIES i<=j")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "floor(1 / 2 ^ (1 + bins) + position / dll) * 2 ^ bins"
                                                                                                                                             "floor(1/2 + ((2 ^ bins) * position) / dll)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (alt_enc const-decl "int" abstract_cpr nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (<= const-decl "bool" reals nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (posint nonempty-type-eq-decl nil integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (times_div1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_parts formula-decl nil floor_ceil nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (enc_mod const-decl "int" abstract_cpr nil))
   shostak))
 (alt_alt_is_enc 0
  (alt_alt_is_enc-1 nil 3717515992
   ("" (skeep)
    (("" (lemma "alt_enc_is_enc")
      (("" (inst?)
        (("" (replaces -1 :dir rl)
          (("" (expand "alt_enc")
            (("" (rewrite "times_div1" 1 :dir rl)
              (("" (rewrite "mod_frac")
                (("" (lemma "real_parts")
                  ((""
                    (inst -1
                     "(dl(dnl, range) / 2 ^ (1 + bins) + position) /
                         dl(dnl, range)")
                    (("" (move-terms -1 r 1)
                      (("" (replaces -1 :dir rl)
                        (("" (simplify)
                          (("" (lemma "floor_plus_int")
                            ((""
                              (inst -1 "-
             floor((dl(dnl, range) / 2 ^ (1 + bins) + position) /
                    dl(dnl, range))
              * 2 ^ bins" "2 ^ bins *
             ((dl(dnl, range) / 2 ^ (1 + bins) + position) /
               dl(dnl, range))")
                              ((""
                                (replaces -1)
                                ((""
                                  (assert)
                                  ((""
                                    (rewrite "div_distributes" :dir rl)
                                    ((""
                                      (simplify 1)
                                      ((""
                                        (case
                                         "NOT 2 ^ bins * (dl(dnl, range) / 2 ^ (1 + bins) / dl(dnl, range)) = 1/2")
                                        (("1"
                                          (rewrite "expt_plus")
                                          (("1"
                                            (rewrite "expt_x1")
                                            (("1"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((alt_enc_is_enc formula-decl nil abstract_cpr nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_parts formula-decl nil floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_distributes formula-decl nil real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (alt_enc const-decl "int" abstract_cpr nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (enc_to_rec 0
  (enc_to_rec-1 nil 3717876304
   ("" (skeep)
    (("" (lemma "alt_alt_is_enc")
      (("" (inst?)
        (("" (replaces -1)
          ((""
            (case "NOT (floor(2 ^ bins * (position / dl(dnl, range)) + 1 / 2) -
         2 ^ bins * floor(position / dl(dnl, range) + 1 / 2 ^ (1 + bins)))
        / 2 ^ bins = floor(2 ^ bins * (position / dl(dnl, range)) + 1 / 2)/ 2 ^ bins -
          floor(position / dl(dnl, range) + 1 / 2 ^ (1 + bins))")
            (("1" (assert) nil nil)
             ("2" (replaces -1)
              (("2" (cross-mult 1)
                (("2" (lemma "alt_rec_pos")
                  (("2" (inst?)
                    (("2" (skoletin)
                      (("2" (replace -2 :dir rl)
                        (("2" (replaces -1)
                          (("2" (simplify 1)
                            (("2"
                              (case "NOT 2 ^ bins * ((dll / 2 ^ (1 + bins) + position) / dll) = 1/2 + (2 ^ bins * position) / dll")
                              (("1"
                                (rewrite "expt_plus")
                                (("1"
                                  (rewrite "expt_x1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (case
                                   "NOT dll * (floor(1 / 2 + (2 ^ bins * position) / dll) / 2 ^ bins) / dll =  (floor(1 / 2 + (2 ^ bins * position) / dll) / 2 ^ bins) ")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (rewrite
                                       "div_distributes"
                                       :dir
                                       rl)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((alt_alt_is_enc formula-decl nil abstract_cpr nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (TRUE const-decl "bool" booleans nil)
    (alt_rec_pos formula-decl nil abstract_cpr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_distributes formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (local_decode_correct 0
  (local_decode_correct-1 nil 3732529759
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (move-terms 1 r 1)
          (("" (invoke (name "mod_arg" "%1") (! 1 l))
            (("" (replace -1)
              (("" (lemma "alt_rec_pos")
                (("" (inst?)
                  (("" (skoletin)
                    (("" (replaces -1)
                      (("" (rewrite "alt_enc_is_enc" :dir rl)
                        (("" (expand "local_decode")
                          (("" (swap-rel -1)
                            (("" (replace -1)
                              ((""
                                (lemma "abs_diff")
                                ((""
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replace -1 -5)
                                        (("1"
                                          (expand "alt_enc")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (rewrite
                                               "times_div1"
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite "mod_frac")
                                                (("1"
                                                  (lemma "real_parts")
                                                  (("1"
                                                    (name
                                                     "smidge"
                                                     "dll / 2 ^ (1 + bins)")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "(smidge+position)/dll")
                                                        (("1"
                                                          (move-terms
                                                           -2
                                                           r
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (simplify
                                                               -7)
                                                              (("1"
                                                                (lemma
                                                                 "floor_plus_int")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "-
                         floor((position + smidge) / dll) * 2 ^ bins"
                                                                   "2 ^ bins * ((position + smidge) / dll)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "div_distributes")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "2^bins"
                                                                         "floor(2 ^ bins * ((position + smidge) / dll)) "
                                                                         "-floor((position + smidge) / dll) * 2 ^ bins")
                                                                        (("1"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "times_div1"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (rewrite
                                                                               "div_simp")
                                                                              (("1"
                                                                                (simplify
                                                                                 -7)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "floor_plus_int")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     " floor((position + smidge) / dll)"
                                                                                     "1/2 + (eps + position) / dll -
                      (floor(2 ^ bins * ((position + smidge) / dll)) / 2 ^ bins)")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (simplify
                                                                                         -7)
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT floor(1/2 + (eps + position) / dll -
                                (floor(2 ^ bins * ((position + smidge) / dll)) / 2 ^ bins))
                          * dll
                          + floor((position + smidge) / dll) * dll
                          + (floor(2 ^ bins * ((position + smidge) / dll)) / 2 ^ bins) * dll
                          + -floor((position + smidge) / dll) * dll = floor(1/2 + (eps + position) / dll -
                                (floor(2 ^ bins * ((position + smidge) / dll)) / 2 ^ bins))
                          * dll
                          + (floor(2 ^ bins * ((position + smidge) / dll)) / 2 ^ bins) * dll
                          ")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -7)
                                                                                              (("2"
                                                                                                (simplify
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "commutative_mult")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "dll"
                                                                                                     "(floor(2 ^ bins * ((position + smidge) / dll)) / 2 ^ bins)")
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "NOT 2 ^ bins * (position + smidge) / dll = 2^bins*(position/dll) + 1/2")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "expt_plus")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "nearest_int")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "2 ^ bins * (position / dll)")
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (simplify
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         " minus_div2"
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "NOT 2 ^ bins * (position / dll) / 2 ^ bins =  (position / dll)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "div_distributes"
                                                                                                                               -6
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (simplify
                                                                                                                                 -6)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "eps")
                                                                                                                                  (("2"
                                                                                                                                    (name
                                                                                                                                     "fl_arg"
                                                                                                                                     "1/2 + (eps / dll) + fr / 2 ^ bins")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "NOT (fl_arg>=0 AND fl_arg<1)")
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           (-3
                                                                                                                                            -4
                                                                                                                                            -5
                                                                                                                                            -7
                                                                                                                                            -8
                                                                                                                                            -10
                                                                                                                                            2))
                                                                                                                                          (("1"
                                                                                                                                            (move-terms
                                                                                                                                             -3
                                                                                                                                             r
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (replaces
                                                                                                                                               -3)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -3)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "fr")
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -3
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "abs")
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if
                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (div-by
                                                                                                                                                               -1
                                                                                                                                                               " dll")
                                                                                                                                                              (("1"
                                                                                                                                                                (div-by
                                                                                                                                                                 -2
                                                                                                                                                                 "dll")
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "NOT (1 / 2 * dll - (1 / 2 ^ (1 + bins)) * dll) / dll = 1/2 -1/2^(1+bins)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (div-by
                                                                                                                                                                       -3
                                                                                                                                                                       "2^bins")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (div-by
                                                                                                                                                                         -4
                                                                                                                                                                         "2^bins")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "div_div2")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "div_div2")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (case
                                                                                                                                                                               "not 2*2^bins = 2^(1+bins)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "expt_plus")
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (replaces
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "both_sides_expt_gt1_lt")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "2"
                                                                                                                                                                                     "1"
                                                                                                                                                                                     "1+bins")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (flip-ineq
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (div-by
                                                                                                                                                                 -4
                                                                                                                                                                 "2^bins")
                                                                                                                                                                (("2"
                                                                                                                                                                  (div-by
                                                                                                                                                                   -3
                                                                                                                                                                   "2^bins")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (div-by
                                                                                                                                                                     -1
                                                                                                                                                                     "dll")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (div-by
                                                                                                                                                                       -2
                                                                                                                                                                       "dll")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "NOT (1 / 2 * dll - (1 / 2 ^ (1 + bins)) * dll) / dll = 1/2 -1/2^(1+bins)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (replaces
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "div_div2")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "div_div2")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case
                                                                                                                                                                                 "not 2*2^bins = 2^(1+bins)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "expt_plus")
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (replaces
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (lemma
                                                                                                                                           "floor_0")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "fl_arg")
                                                                                                                                            (("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (cancel-by 1 "dll")
                                    (("2"
                                      (move-terms 2 l 2)
                                      (("2"
                                        (simplify 2)
                                        (("2"
                                          (cross-mult 2)
                                          (("2"
                                            (lemma
                                             "both_sides_expt_gt1_lt")
                                            (("2"
                                              (inst
                                               -1
                                               "2"
                                               "1"
                                               "1+bins")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (local_decode const-decl "real" abstract_cpr nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dll skolem-const-decl "posreal" abstract_cpr nil)
    (bins skolem-const-decl "posnat" abstract_cpr nil)
    (nnreal type-eq-decl nil real_types nil)
    (alt_enc const-decl "int" abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (real_parts formula-decl nil floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (div_distributes formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (commutative_mult formula-decl nil number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nearest_int formula-decl nil simple_props nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (minus_div2 formula-decl nil real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (zero_div formula-decl nil extra_tegies nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_diff formula-decl nil simple_props nil)
    (alt_enc_is_enc formula-decl nil abstract_cpr nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (alt_rec_pos formula-decl nil abstract_cpr nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (local_decode_correct_surf 0
  (local_decode_correct_surf-1 nil 3732528944
   ("" (skeep)
    (("" (skoletin)
      (("" (lemma "enc_mod_less")
        (("" (inst?)
          (("" (assert)
            (("" (replace -1)
              (("" (lemma "local_decode_correct")
                ((""
                  (inst -1 "binmod" "dnl" "position"
                   "range / 2 ^ (bins - binmod)" "ref_position")
                  (("" (assert)
                    (("" (replace -1 -3 :dir rl)
                      (("" (replace -3 1)
                        (("" (lemma "alt_rec_pos")
                          ((""
                            (inst-cp -1 "bins" "dnl" "position"
                             "range")
                            ((""
                              (inst -1 "binmod" "dnl" "position"
                               "range/2^(bins-binmod)")
                              ((""
                                (assert)
                                ((""
                                  (lemma "rec_pos_less")
                                  ((""
                                    (inst?)
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (local_decode const-decl "real" abstract_cpr nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (alt_rec_pos formula-decl nil abstract_cpr nil)
    (rec_pos_less formula-decl nil abstract_cpr nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (local_decode_correct formula-decl nil abstract_cpr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (enc_mod_less formula-decl nil abstract_cpr nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (global_decode_TCC1 0
  (global_decode_TCC1-1 nil 3717500113 ("" (subtype-tcc) nil nil) nil
   nil))
 (global_decode_TCC2 0
  (global_decode_TCC2-1 nil 3717503043 ("" (subtype-tcc) nil nil) nil
   nil))
 (zone_offset_TCC1 0
  (zone_offset_TCC1-1 nil 3717500113 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (zone_offset_TCC2 0
  (zone_offset_TCC2-1 nil 3717500113
   ("" (skeep)
    (("" (ground)
      (("1" (move-terms 1 l 2) (("1" (cross-mult 1) nil nil)) nil)
       ("2" (move-terms 1 l 2) (("2" (cross-mult 1) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil))
   nil))
 (global_close_mes_TCC1 0
  (global_close_mes_TCC1-1 nil 3717857200 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (global_close_mes 0
  (global_close_mes-1 nil 3717857204
   ("" (case "NOT FORALL (x: real):abs(x) = abs(-x)")
    (("1" (hide 2) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2"
        (case "abs(recovered_position(range, dnl, bins)(pos0) -
                  recovered_position(range, dnl - 1, bins)(pos1)) <= abs(pos0-pos1)+abs(pos0-recovered_position(range,dnl,bins)(pos0)) + abs(pos1-recovered_position(range, dnl - 1, bins)(pos1)) ")
        (("1" (lemma "recovered_position_close")
          (("1" (inst -1 "bins" "dnl" "pos0" "range")
            (("1" (lemma "recovered_position_close")
              (("1" (inst -1 "bins" "dnl-1" "pos1" "range")
                (("1"
                  (inst-cp -4
                   " recovered_position(range, dnl - 1, bins)(pos1) - pos1")
                  (("1" (replaces -5)
                    (("1"
                      (inst -4
                       "recovered_position(range, dnl, bins)(pos0) - pos0")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (-3 2))
          (("2" (lemma "triangle")
            (("2"
              (inst -1 "pos0 -
           recovered_position(range, dnl - 1, bins)(pos1)"
               "recovered_position(range, dnl, bins)(pos0) - pos0")
              (("2" (simplify -1)
                (("2" (lemma "triangle")
                  (("2"
                    (inst -1 "pos0-pos1"
                     "pos1- recovered_position(range, dnl - 1, bins)(pos1)")
                    (("2" (simplify -1)
                      (("2" (assert)
                        (("2"
                          (inst -3
                           "recovered_position(range, dnl, bins)(pos0) - pos0")
                          (("2" (replaces -3) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (triangle formula-decl nil real_props nil)
    (recovered_position_close formula-decl nil abstract_cpr nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (global_decode_correct_TCC1 0
  (global_decode_correct_TCC1-1 nil 3717500113
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (dl const-decl "posreal" abstract_cpr nil)
    (^ const-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (global_decode_correct_TCC2 0
  (global_decode_correct_TCC2-1 nil 3717502433
   ("" (subtype-tcc) nil nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (global_decode const-decl "real" abstract_cpr nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (dl const-decl "posreal" abstract_cpr nil)
    (^ const-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (global_decode_correct_TCC3 0
  (global_decode_correct_TCC3-1 nil 3717503145
   ("" (subtype-tcc) nil nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (nzint_max application-judgement "{k: nzint | i <= k AND j <= k}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (zone_offset const-decl "posreal" abstract_cpr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (global_decode const-decl "real" abstract_cpr nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (dl const-decl "posreal" abstract_cpr nil)
    (^ const-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (global_decode_correct 0
  (global_decode_correct-1 nil 3717502460
   ("" (skeep)
    (("" (skoletin*)
      (("" (case "dnl =1")
        (("1" (assert)
          (("1" (expand "global_decode")
            (("1" (name "mes" "IF i = 0 THEN m0 ELSE m1 ENDIF")
              (("1" (replace -1)
                (("1" (case "NOT max(dnl-i, 1) = 1")
                  (("1" (replaces -2)
                    (("1" (expand "max")
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (invoke (typepred "%1") (! -3 r 1 1))
                      (("2" (lemma "floor_int")
                        (("2"
                          (inst -1
                           " floor(1/2 + -1 * m1 / 2 ^ bins) / 1")
                          (("1" (replaces -1)
                            (("1" (replace -6)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "NOT floor(1/2 + -1 * m1 / 2 ^ bins) - floor(1/2 + -1 * m1 / 2 ^ bins) / 1 = 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (hide (-1 -2))
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (simplify -3)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "correct_recovered_position")
                                                (("2"
                                                  (lemma "alt_rec_pos")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (skoletin)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "max")
                                                          (("2"
                                                            (case
                                                             "NOT mes = alt_enc(range, 1, bins)(pos)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (lemma
                                                                 "alt_enc_is_enc")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "i=0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 (-2
                                                                  -6
                                                                  -7
                                                                  -8))
                                                                (("2"
                                                                  (expand
                                                                   "alt_enc")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (rewrite
                                                                       "times_div1"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "mod_frac")
                                                                        (("2"
                                                                          (lemma
                                                                           "real_parts")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "(dll / 2 ^ (1 + bins) + pos) / dll")
                                                                            (("2"
                                                                              (move-terms
                                                                               -1
                                                                               r
                                                                               1)
                                                                              (("2"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (simplify)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "floor_plus_int")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "-
                                      floor((dll / 2 ^ (1 + bins) + pos) / dll) * 2 ^ bins"
                                                                                       "2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll)")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT global = range*(floor(2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll))/ 2 ^ bins -
                                           floor((dll / 2 ^ (1 + bins) + pos) / dll))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -5)
                                                                                            (("2"
                                                                                              (case
                                                                                               "NOT dll =range")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "dl")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (simplify
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (invoke
                                                                                                       (case
                                                                                                        "NOT %1 = %2")
                                                                                                       (!
                                                                                                        1
                                                                                                        l
                                                                                                        1)
                                                                                                       (!
                                                                                                        1
                                                                                                        l
                                                                                                        1
                                                                                                        3))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "mod_multiple")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "0 "
                                                                                                             " range"
                                                                                                             "floor((range / 2 ^ (1 + bins) + pos) / range)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "mod")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (label "pos" -2)
          (("2" (case "NOT max(dnl-i, 1) = dnl-i")
            (("1" (hide-all-but (1 2))
              (("1" (typepred "i")
                (("1" (expand "max") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (expand "global_decode")
                (("2" (replace -1)
                  (("2" (name "mes" "IF i = 0 THEN m0 ELSE m1 ENDIF")
                    (("2" (label "mes" -1)
                      (("2" (replace -1)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "max" -6)
                              (("2"
                                (lift-if -6)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -6)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "dnl")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (move-terms -2 l 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "NOT forall (n, m: int): n> m-1 AND n< m+1 IMPLIES n=m")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -1 "dnl" "1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (simplify)
                                          (("2"
                                            (case
                                             "NOT mes = alt_enc(range, dnl-i, bins)(pos)")
                                            (("1"
                                              (lemma "alt_enc_is_enc")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "i=0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "correct_recovered_position")
                                              (("2"
                                                (lemma "alt_rec_pos")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (skoletin)
                                                    (("2"
                                                      (expand "dl" -2)
                                                      (("2"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "alt_enc")
                                                          (("2"
                                                            (expand
                                                             "dl"
                                                             -3)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (rewrite
                                                                 "times_div1"
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "mod_frac"
                                                                   -3)
                                                                  (("2"
                                                                    (lemma
                                                                     "real_parts")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "(dll / 2 ^ (1 + bins) + pos) / dll")
                                                                      (("2"
                                                                        (move-terms
                                                                         -1
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (simplify
                                                                             -3)
                                                                            (("2"
                                                                              (lemma
                                                                               "floor_plus_int")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "-
                                  floor((dll / 2 ^ (1 + bins) + pos) / dll) * 2 ^ bins"
                                                                                 "2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll)")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     2)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -3
                                                                                       -8)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT (floor(2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll)) +
                                        -floor((dll / 2 ^ (1 + bins) + pos) / dll) * 2 ^ bins)
                                       / 2 ^ bins
                                       * dll = floor(2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll))/ 2 ^ bins
                                       * dll  - floor((dll / 2 ^ (1 + bins) + pos) / dll)*dll")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -8
                                                                                             2)
                                                                                            (("2"
                                                                                              (simplify
                                                                                               2)
                                                                                              (("2"
                                                                                                (invoke
                                                                                                 (case
                                                                                                  "NOT %1 = %2 - %3")
                                                                                                 (!
                                                                                                  2
                                                                                                  l
                                                                                                  1)
                                                                                                 (!
                                                                                                  2
                                                                                                  l
                                                                                                  1
                                                                                                  1)
                                                                                                 (!
                                                                                                  2
                                                                                                  l
                                                                                                  1
                                                                                                  2))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT exists (k: int): MOD(floor(1 / 2 + (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins),
                                                     dnl - i) = floor(1 / 2 + (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins)  + k*(dnl-i)")
                                                                                                    (("1"
                                                                                                      (name
                                                                                                       "MODarg"
                                                                                                       " floor(1 / 2 + (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins)")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "MOD")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "mod")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "-floor(MODarg/(dnl-i))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skolem
                                                                                                       -1
                                                                                                       "mod_gone1")
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (name
                                                                                                           "dnli"
                                                                                                           "dnl-i")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (simplify
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "dll"
                                                                                                                 2
                                                                                                                 5)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "dl")
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "NOT range / dnli * dnli * mod_gone1 = mod_gone1*range")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           (-2
                                                                                                                            -4
                                                                                                                            -6
                                                                                                                            -9
                                                                                                                            -10))
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins = (m0/2^bins)*(dnl-1) - (m1/2^bins)*dnl")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (name
                                                                                                                               "dnl1"
                                                                                                                               "dnl-1")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (replaces
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "enc_to_rec")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "bins"
                                                                                                                                       "dnl"
                                                                                                                                       "pos0"
                                                                                                                                       "range")
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -8
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (replaces
                                                                                                                                           -1
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "enc_to_rec")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "bins"
                                                                                                                                               "dnl1"
                                                                                                                                               "pos1"
                                                                                                                                               "range")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -5
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -1
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (simplify
                                                                                                                                                     2)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "floor_plus_int")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "floor((dl(dnl1, range) / 2 ^ (1 + bins) + pos1) /
                         dl(dnl1, range))
                   * dnl
                  -
                  floor((dl(dnl, range) / 2 ^ (1 + bins) + pos0) /
                         dl(dnl, range))
                   * dnl1"
                                                                                                                                                         "1/2 -
                  recovered_position(range, dnl1, bins)(pos1) /
                   dl(dnl1, range)
                   * dnl
                  +
                  recovered_position(range, dnl, bins)(pos0) /
                   dl(dnl, range)
                   * dnl1")
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (simplify
                                                                                                                                                             2)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "NOT EXISTS (kk:int): floor((dll / 2 ^ (1 + bins) + pos) / dll) * dll + floor((dl(dnl, range) / 2 ^ (1 + bins) + pos0) / dl(dnl, range))
            * dll
            * dnl1 - floor((dl(dnl1, range) / 2 ^ (1 + bins) + pos1) /
                  dl(dnl1, range))
            * dll
            * dnl = kk*range")
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   1
                                                                                                                                                                   "floor((dl(dnl, range) / 2 ^ (1 + bins) + pos0) / dl(dnl, range)) - floor((dl(dnl1, range) / 2 ^ (1 + bins) + pos1) / dl(dnl1, range))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (reveal
                                                                                                                                                                     "pos")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (simplify
                                                                                                                                                                                 -4)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -4
                                                                                                                                                                                   :dir
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -5)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -3
                                                                                                                                                                                       1
                                                                                                                                                                                       :dir
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (simplify
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "dl"
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT i=1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -3
                                                                                                                                                                                   2
                                                                                                                                                                                   :dir
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -5
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -4
                                                                                                                                                                                       2
                                                                                                                                                                                       :dir
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "dl")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (skolem
                                                                                                                                                                 -1
                                                                                                                                                                 "mod_gone2")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (invoke
                                                                                                                                                                     (case
                                                                                                                                                                      "NOT %1 = -%2 -mod_gone1*range + mod_gone2*range")
                                                                                                                                                                     (!
                                                                                                                                                                      2
                                                                                                                                                                      l
                                                                                                                                                                      1)
                                                                                                                                                                     (!
                                                                                                                                                                      2
                                                                                                                                                                      l
                                                                                                                                                                      1
                                                                                                                                                                      2))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "global_close_mes")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "bins"
                                                                                                                                                                             "dnl"
                                                                                                                                                                             "pos0"
                                                                                                                                                                             "pos1"
                                                                                                                                                                             "range")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -2
                                                                                                                                                                               -1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "exists (frac: real): 1/2 + frac = 1/2 - recovered_position(range, dnl1, bins)(pos1) /
                   dl(dnl1, range)
                   * dnl
                  +
                  recovered_position(range, dnl, bins)(pos0) /
                   dl(dnl, range)
                   * dnl1 AND frac<1/2 AND -1/2<frac")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (skeep)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1
                                                                                                                                                                                       :dir
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "floor_0")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           "1/2+frac")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (simplify
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                       "mod_multiple")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         "0"
                                                                                                                                                                                                         "range"
                                                                                                                                                                                                         "mod_gone2-mod_gone1")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "mod")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("3"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     3)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       1
                                                                                                                                                                                       "-
          recovered_position(range, dnl1, bins)(pos1) / dl(dnl1, range) *
           dnl
          +
          recovered_position(range, dnl, bins)(pos0) / dl(dnl, range) *
           dnl1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           " abs( (recovered_position(range, dnl, bins)(pos0) -
           recovered_position(range, dnl1, bins)(pos1))/zone_offset(range,dnl))<1/2")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             (-2
                                                                                                                                                                                              -8))
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (rewrite
                                                                                                                                                                                               "div_distributes_minus"
                                                                                                                                                                                               :dir
                                                                                                                                                                                               rl)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "dl")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                   "div_div1"
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                     "div_div1"
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (case
                                                                                                                                                                                                       "NOT zone_offset(range,dnl) = range/(dnl*dnl1)")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "zone_offset")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (cross-mult
                                                                                                                                                                                                               1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                   "NOT range / dnl1 * dnl1 * dnl = range*dnl")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (cross-mult
                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                       "NOT range / dnl * dnl1 * dnl = range*dnl1")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (cross-mult
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -2
                                                                                                                                                                                                                           1
                                                                                                                                                                                                                           :dir
                                                                                                                                                                                                                           rl)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         -2)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                           "div_div1"
                                                                                                                                                                                                           -2)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                             "div_div1"
                                                                                                                                                                                                             -2)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                               "times_div2"
                                                                                                                                                                                                               1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (simplify
                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "abs")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (lift-if
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (split
                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("3"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (rewrite
                                                                                                                                                                                             "abs_div"
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (cross-mult
                                                                                                                                                                                               1)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (global_decode const-decl "real" abstract_cpr nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (zone_offset const-decl "posreal" abstract_cpr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (correct_recovered_position const-decl "bool" abstract_cpr nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dnl1 skolem-const-decl "int" abstract_cpr nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (nzint_max application-judgement "{k: nzint | i <= k AND j <= k}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (global_close_mes formula-decl nil abstract_cpr nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_div1 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_div formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (enc_to_rec formula-decl nil abstract_cpr nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (dll skolem-const-decl "posreal" abstract_cpr nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (bins skolem-const-decl "posnat" abstract_cpr nil)
    (m1 skolem-const-decl "{x: nat | x < 2 ^ bins}" abstract_cpr nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (alt_rec_pos formula-decl nil abstract_cpr nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (real_parts formula-decl nil floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (alt_enc_is_enc formula-decl nil abstract_cpr nil)
    (alt_enc const-decl "int" abstract_cpr nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (floor_int formula-decl nil floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (global_decode_correct_alt 0
  (global_decode_correct_alt-1 nil 3728665602
   ("" (skeep)
    (("" (skoletin*)
      (("" (case "dnl =1")
        (("1" (assert)
          (("1" (expand "global_decode")
            (("1" (name "mes" "IF i = 0 THEN m0 ELSE m1 ENDIF")
              (("1" (replace -1)
                (("1" (case "NOT max(dnl-i, 1) = 1")
                  (("1" (replaces -2)
                    (("1" (expand "max")
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (invoke (typepred "%1") (! -3 r 1 1))
                      (("2" (lemma "floor_int")
                        (("2"
                          (inst -1
                           " floor(1/2 + -1 * m1 / 2 ^ bins) / 1")
                          (("1" (replace -6)
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "NOT floor(1/2 + -1 * m1 / 2 ^ bins) - floor(1/2 + -1 * m1 / 2 ^ bins) / 1 = 0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (hide (-1 -2))
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (simplify -3)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma "alt_rec_pos")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (skoletin)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (expand "max")
                                                      (("2"
                                                        (case
                                                         "NOT mes = alt_enc(range, 1, bins)(pos)")
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (lemma
                                                             "alt_enc_is_enc")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "i=0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (hide
                                                             (-2
                                                              -6
                                                              -7
                                                              -8))
                                                            (("2"
                                                              (expand
                                                               "alt_enc")
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "times_div1"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "mod_frac")
                                                                    (("2"
                                                                      (lemma
                                                                       "real_parts")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "(dll / 2 ^ (1 + bins) + pos) / dll")
                                                                        (("2"
                                                                          (move-terms
                                                                           -1
                                                                           r
                                                                           1)
                                                                          (("2"
                                                                            (replaces
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (simplify)
                                                                              (("2"
                                                                                (lemma
                                                                                 "floor_plus_int")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "-
                                                                                                  floor((dll / 2 ^ (1 + bins) + pos) / dll) * 2 ^ bins"
                                                                                   "2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll)")
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT global = range*(floor(2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll))/ 2 ^ bins -
                                                                                                                                floor((dll / 2 ^ (1 + bins) + pos) / dll))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -5)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT dll =range")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "dl")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (simplify
                                                                                               -2)
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (simplify
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (simplify
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (invoke
                                                                                                       (case
                                                                                                        "NOT %1 = %2")
                                                                                                       (!
                                                                                                        1
                                                                                                        l)
                                                                                                       (!
                                                                                                        1
                                                                                                        l
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "NOT (range / 2 ^ (1 + bins) + pos) / range = 1/2^(1+bins)+pos/range ")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "global_delta")
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "floor_int")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "floor(1 / 2 ^ (1 + bins) + pos / dl(1, range)) / 1")
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (label "pos" -2)
          (("2" (case "NOT max(dnl-i, 1) = dnl-i")
            (("1" (hide-all-but (1 2))
              (("1" (typepred "i")
                (("1" (expand "max") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (expand "global_decode")
                (("2" (replace -1)
                  (("2" (name "mes" "IF i = 0 THEN m0 ELSE m1 ENDIF")
                    (("2" (label "mes" -1)
                      (("2" (replace -1)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "max" -6)
                              (("2"
                                (lift-if -6)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -6)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "dnl")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (move-terms -2 l 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "NOT forall (n, m: int): n> m-1 AND n< m+1 IMPLIES n=m")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -1 "dnl" "1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (simplify)
                                          (("2"
                                            (case
                                             "NOT mes = alt_enc(range, dnl-i, bins)(pos)")
                                            (("1"
                                              (lemma "alt_enc_is_enc")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "i=0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "alt_rec_pos")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (skoletin)
                                                  (("2"
                                                    (expand "dl" -2)
                                                    (("2"
                                                      (replace
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "alt_enc")
                                                        (("2"
                                                          (expand
                                                           "dl"
                                                           -3)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "times_div1"
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (rewrite
                                                                 "mod_frac"
                                                                 -3)
                                                                (("2"
                                                                  (lemma
                                                                   "real_parts")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "(dll / 2 ^ (1 + bins) + pos) / dll")
                                                                    (("2"
                                                                      (move-terms
                                                                       -1
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (simplify
                                                                           -3)
                                                                          (("2"
                                                                            (lemma
                                                                             "floor_plus_int")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "-
                                                                                    floor((dll / 2 ^ (1 + bins) + pos) / dll) * 2 ^ bins"
                                                                               "2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll)")
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -3
                                                                                     -8)
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT (floor(2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll)) +
                                                                                                                   -floor((dll / 2 ^ (1 + bins) + pos) / dll) * 2 ^ bins)
                                                                                                                  / 2 ^ bins
                                                                                                                  * dll = floor(2 ^ bins * ((dll / 2 ^ (1 + bins) + pos) / dll))/ 2 ^ bins
                                                                                                                  * dll  - floor((dll / 2 ^ (1 + bins) + pos) / dll)*dll")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -8
                                                                                           2)
                                                                                          (("2"
                                                                                            (simplify
                                                                                             2)
                                                                                            (("2"
                                                                                              (invoke
                                                                                               (case
                                                                                                "NOT %1 = %2 - %3")
                                                                                               (!
                                                                                                2
                                                                                                l)
                                                                                               (!
                                                                                                2
                                                                                                l
                                                                                                1)
                                                                                               (!
                                                                                                2
                                                                                                l
                                                                                                2))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (name
                                                                                                   "mod_gone1"
                                                                                                   "-floor(floor(1 / 2 + (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins)/(dnl-i))")
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT MOD(floor(1 / 2 + (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins),
                                                                                                                                                    dnl - i) = floor(1 / 2 + (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins)  + mod_gone1*(dnl-i)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "MOD")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "mod")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (name
                                                                                                         "dnli"
                                                                                                         "dnl-i")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (label
                                                                                                             "mod_gone1"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (simplify
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "dll"
                                                                                                                   2
                                                                                                                   5)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "dl")
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "NOT range / dnli * dnli * mod_gone1 = mod_gone1*range")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             (-2
                                                                                                                              -4
                                                                                                                              -6
                                                                                                                              -9
                                                                                                                              -10))
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "NOT (-1 * (dnl * m1) - m0 + dnl * m0) / 2 ^ bins = (m0/2^bins)*(dnl-1) - (m1/2^bins)*dnl")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (name
                                                                                                                                 "dnl1"
                                                                                                                                 "dnl-1")
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "enc_to_rec")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "bins"
                                                                                                                                         "dnl"
                                                                                                                                         "pos0"
                                                                                                                                         "range")
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -8
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("2"
                                                                                                                                            (replaces
                                                                                                                                             -1
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "enc_to_rec")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "bins"
                                                                                                                                                 "dnl1"
                                                                                                                                                 "pos1"
                                                                                                                                                 "range")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -5
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (simplify
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "floor_plus_int")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "floor((dl(dnl1, range) / 2 ^ (1 + bins) + pos1) /
                                                                                                                                       dl(dnl1, range))
                                                                                                                                 * dnl
                                                                                                                                -
                                                                                                                                floor((dl(dnl, range) / 2 ^ (1 + bins) + pos0) /
                                                                                                                                       dl(dnl, range))
                                                                                                                                 * dnl1"
                                                                                                                                                           "1/2 -
                                                                                                                                recovered_position(range, dnl1, bins)(pos1) /
                                                                                                                                 dl(dnl1, range)
                                                                                                                                 * dnl
                                                                                                                                +
                                                                                                                                recovered_position(range, dnl, bins)(pos0) /
                                                                                                                                 dl(dnl, range)
                                                                                                                                 * dnl1")
                                                                                                                                                          (("1"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (simplify
                                                                                                                                                               2)
                                                                                                                                                              (("1"
                                                                                                                                                                (name
                                                                                                                                                                 "mod_gone2"
                                                                                                                                                                 "floor((dl(dnl, range) / 2 ^ (1 + bins) + pos0) / dl(dnl, range)) - floor((dl(dnl1, range) / 2 ^ (1 + bins) + pos1) / dl(dnl1, range))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "NOT floor((dll / 2 ^ (1 + bins) + pos) / dll) * dll + floor((dl(dnl, range) / 2 ^ (1 + bins) + pos0) / dl(dnl, range))
                                                                                                                                                                     * dll
                                                                                                                                                                     * dnl1 - floor((dl(dnl1, range) / 2 ^ (1 + bins) + pos1) /
                                                                                                                                                                           dl(dnl1, range))
                                                                                                                                                                     * dll
                                                                                                                                                                     * dnl = mod_gone2*range")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (reveal
                                                                                                                                                                     "pos")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -4
                                                                                                                                                                                 :dir
                                                                                                                                                                                 rl)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -5)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -3
                                                                                                                                                                                     1
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (simplify
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "dl"
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "NOT i=1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -3
                                                                                                                                                                                   2
                                                                                                                                                                                   :dir
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -4
                                                                                                                                                                                     2
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "dl")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (invoke
                                                                                                                                                                       (case
                                                                                                                                                                        "NOT %1 = -%2 -mod_gone1*range + mod_gone2*range")
                                                                                                                                                                       (!
                                                                                                                                                                        2
                                                                                                                                                                        l)
                                                                                                                                                                       (!
                                                                                                                                                                        2
                                                                                                                                                                        l
                                                                                                                                                                        2))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "global_close_mes")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "bins"
                                                                                                                                                                               "dnl"
                                                                                                                                                                               "pos0"
                                                                                                                                                                               "pos1"
                                                                                                                                                                               "range")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (label
                                                                                                                                                                                 "mod_gone2"
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -2
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "exists (frac: real): 1/2 + frac = 1/2 - recovered_position(range, dnl1, bins)(pos1) /
                                                                                                                                                                                                dl(dnl1, range)
                                                                                                                                                                                                * dnl
                                                                                                                                                                                               +
                                                                                                                                                                                               recovered_position(range, dnl, bins)(pos0) /
                                                                                                                                                                                                dl(dnl, range)
                                                                                                                                                                                                * dnl1 AND frac<1/2 AND -1/2<frac")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (label
                                                                                                                                                                                             "frac"
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replaces
                                                                                                                                                                                               -1
                                                                                                                                                                                               :dir
                                                                                                                                                                                               rl)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "floor_0")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   "1/2+frac")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (simplify
                                                                                                                                                                                                             2)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (reveal
                                                                                                                                                                                                               mod_gone1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (reveal
                                                                                                                                                                                                                 mod_gone2)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (name
                                                                                                                                                                                                                   "dl0"
                                                                                                                                                                                                                   "dl(dnl, range)")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (name
                                                                                                                                                                                                                     "dl1"
                                                                                                                                                                                                                     "dl(dnl1, range)")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                           "NOT mod_gone2-mod_gone1 = floor(floor(1/2 + (dnli*floor(pos0/dl0+1/2^(1+bins))+m0*dnl1/2^bins) - (dnli*floor(pos1/dl1+1/2^(1+bins))+m1*dnl/2^bins))/dnli)")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                             3)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                               "floor_plus_int")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                 "dnli * floor(pos0 / dl0 + 1 / 2 ^ (1 + bins)) - dnli * floor(pos1 / dl1 + 1 / 2 ^ (1 + bins))"
                                                                                                                                                                                                                                 " 1 / 2 + m0 * dnl1 / 2 ^ bins -  m1 * dnl / 2 ^ bins")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                                     "div_distributes"
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     :dir
                                                                                                                                                                                                                                     rl)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                                       "NOT ((dnli * floor(1 / 2 ^ (1 + bins) + pos0 / dl0) -
                                                                                         dnli * floor(1 / 2 ^ (1 + bins) + pos1 / dl1))
                                                                                        / dnli) = floor(1 / 2 ^ (1 + bins) + pos0 / dl0) -
                                                                                         floor(1 / 2 ^ (1 + bins) + pos1 / dl1)")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (cross-mult
                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                           "floor_plus_int")
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                             "(floor(1 / 2 ^ (1 + bins) + pos0 / dl0) -
                                                                                            floor(1 / 2 ^ (1 + bins) + pos1 / dl1))"
                                                                                                                                                                                                                                             "(floor(1/2 + m0 * dnl1 / 2 ^ bins - m1 * dnl / 2 ^ bins) /
                                                                                           dnli)")
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                             "NOT (dnli * floor(pos0 / dl0 + 1 / 2 ^ (1 + bins)) +
                                                                                              m0 * dnl1 / 2 ^ bins) = (dnli-dnl1)*floor(pos0/dl0+1/2^(1+bins)) + recovered_position(range, dnl, bins)(pos0)/dl0 * dnl1")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                               (-1
                                                                                                                                                                                                                                3
                                                                                                                                                                                                                                -4
                                                                                                                                                                                                                                -5
                                                                                                                                                                                                                                -6
                                                                                                                                                                                                                                -7
                                                                                                                                                                                                                                -8
                                                                                                                                                                                                                                -14))
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                 "enc_to_rec")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                   "bins"
                                                                                                                                                                                                                                   "dnl"
                                                                                                                                                                                                                                   "pos0"
                                                                                                                                                                                                                                   "range")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                     -3)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                       -9
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                         :dir
                                                                                                                                                                                                                                         rl)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                           "NOT enc_mod(range, dnl, bins, bins)(pos0) * dnl1 / 2 ^ bins = dnl1*(enc_mod(range, dnl, bins, bins)(pos0) / 2 ^ bins)")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                            (replaces
                                                                                                                                                                                                                                             -2
                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                             :dir
                                                                                                                                                                                                                                             rl)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                               -1
                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                 "NOT (dl0 / 2 ^ (1 + bins) + pos0) / dl0 = pos0 / dl0 + 1 / 2 ^ (1 + bins)")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (simplify
                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                                                       "NOT dnli * floor(1 / 2 ^ (1 + bins) + pos0 / dl0) = floor(1 / 2 ^ (1 + bins) + pos0 / dl0) * dnli")
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                               "NOT (dnli * floor(pos1 / dl1 + 1 / 2 ^ (1 + bins)) +
                                                                                                                                      m1 * dnl / 2 ^ bins) = (dnli-dnl)*floor(pos1/dl1+1/2^(1+bins)) + recovered_position(range, dnl1, bins)(pos1)/dl1*dnl")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                 (-1
                                                                                                                                                                                                                                  3
                                                                                                                                                                                                                                  -4
                                                                                                                                                                                                                                  -5
                                                                                                                                                                                                                                  -6
                                                                                                                                                                                                                                  -7
                                                                                                                                                                                                                                  -8
                                                                                                                                                                                                                                  -14))
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                                   "enc_to_rec")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                                     "bins"
                                                                                                                                                                                                                                     "dnl1"
                                                                                                                                                                                                                                     "pos1"
                                                                                                                                                                                                                                     "range")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                           -7
                                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (replaces
                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                             :dir
                                                                                                                                                                                                                                             rl)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                                               "NOT enc_mod(range, dnl1, bins, bins)(pos1) * dnl / 2 ^ bins = dnl*(enc_mod(range, dnl1, bins, bins)(pos1) / 2 ^ bins)")
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                 :dir
                                                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                                     "NOT (dl1 / 2 ^ (1 + bins) + pos1) / dl1 = pos1 / dl1 + 1 / 2 ^ (1 + bins)")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (simplify
                                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                                           "NOT dnli * floor(1 / 2 ^ (1 + bins) + pos1 / dl1) = floor(1 / 2 ^ (1 + bins) + pos1 / dl1) * dnli")
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                 -3)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                   -2)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (reveal
                                                                                                                                                                                                                                     "frac")
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                       "floor_plus_int")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                         "(dnli - dnl1) * floor(pos0 / dl0 + 1 / 2 ^ (1 + bins)) - (dnli - dnl) * floor(pos1 / dl1 + 1 / 2 ^ (1 + bins))"
                                                                                                                                                                                                                                         "1 / 2 + recovered_position(range, dnl, bins)(pos0) / dl0 *
                                                               dnl1 - recovered_position(range, dnl1, bins)(pos1) / dl1 *
                                                               dnl")
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                           -3)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                             -3
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                                               -4
                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                 -2)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                                   :dir
                                                                                                                                                                                                                                                   rl)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                                     "floor_0")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                                       "1/2 +frac")
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (hide
                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (split
                                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                                 " NOT mod_gone2 * range - mod_gone1 * range = (mod_gone2-mod_gone1)*range")
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                                   -2
                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                       "global_delta")
                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                         "pos")
                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                          (lift-if
                                                                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                            (split
                                                                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (simplify
                                                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                                                                     -10
                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                                                 "i")
                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                                                                                   "NOT i=1")
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                                                                       -12
                                                                                                                                                                                                                                                                                       :dir
                                                                                                                                                                                                                                                                                       rl)
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                                                         -11)
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                             ("3"
                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("3"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           3)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             1
                                                                                                                                                                                             "-
                                                                                                                                                                        recovered_position(range, dnl1, bins)(pos1) / dl(dnl1, range) *
                                                                                                                                                                         dnl
                                                                                                                                                                        +
                                                                                                                                                                        recovered_position(range, dnl, bins)(pos0) / dl(dnl, range) *
                                                                                                                                                                         dnl1")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 " abs( (recovered_position(range, dnl, bins)(pos0) -
                                                                                                                                                                              recovered_position(range, dnl1, bins)(pos1))/zone_offset(range,dnl))<1/2")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   (-2
                                                                                                                                                                                                    -8))
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                     "div_distributes_minus"
                                                                                                                                                                                                     :dir
                                                                                                                                                                                                     rl)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "dl")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (rewrite
                                                                                                                                                                                                         "div_div1"
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                           "div_div1"
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (case
                                                                                                                                                                                                             "NOT zone_offset(range,dnl) = range/(dnl*dnl1)")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "zone_offset")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (cross-mult
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                         "NOT range / dnl1 * dnl1 * dnl = range*dnl")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (cross-mult
                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                             "NOT range / dnl * dnl1 * dnl = range*dnl1")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (cross-mult
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                 :dir
                                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               -2)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                                 "div_div1"
                                                                                                                                                                                                                 -2)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                   "div_div1"
                                                                                                                                                                                                                   -2)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                     "times_div2"
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (simplify
                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "abs")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (lift-if
                                                                                                                                                                                                                           -2)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (split
                                                                                                                                                                                                                             -2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("3"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                   "abs_div"
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (cross-mult
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (global_decode const-decl "real" abstract_cpr nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (zone_offset const-decl "posreal" abstract_cpr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (global_delta const-decl "real" abstract_cpr nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dll skolem-const-decl "posreal" abstract_cpr nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (enc_to_rec formula-decl nil abstract_cpr nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_div1 formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (global_close_mes formula-decl nil abstract_cpr nil)
    (dnl1 skolem-const-decl "int" abstract_cpr nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (bins skolem-const-decl "posnat" abstract_cpr nil)
    (m1 skolem-const-decl "{x: nat | x < 2 ^ bins}" abstract_cpr nil)
    (alt_rec_pos formula-decl nil abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (real_parts formula-decl nil floor_ceil nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (pos skolem-const-decl "real" abstract_cpr nil)
    (range skolem-const-decl "posreal" abstract_cpr nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (alt_enc_is_enc formula-decl nil abstract_cpr nil)
    (alt_enc const-decl "int" abstract_cpr nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (floor_int formula-decl nil floor_ceil nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (global_decode_eq 0
  (global_decode_eq-1 nil 3728922525
   ("" (skeep)
    (("" (lemma " global_decode_correct_alt")
      (("" (skoletin)
        (("" (skoletin)
          (("" (skoletin)
            (("" (skoletin)
              (("" (inst -5 "bins" "dnl" "i" "pos0" "pos1" "range")
                (("" (flatten)
                  (("" (replace -1)
                    (("" (skoletin)
                      (("" (skoletin)
                        (("" (skoletin)
                          (("" (skoletin)
                            (("" (replace -12 :dir rl)
                              ((""
                                (replace -5)
                                ((""
                                  (replace -11 :dir rl)
                                  ((""
                                    (replace -4)
                                    ((""
                                      (replace -10 :dir rl)
                                      ((""
                                        (replace -3)
                                        ((""
                                          (replace -9 :dir rl)
                                          ((""
                                            (replace -2)
                                            ((""
                                              (move-terms 1 r 1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand
                                                   "global_delta")
                                                  (("1"
                                                    (lemma
                                                     "floor_0
")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "floor(1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range)) /
              max(dnl - i, 1)")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             "NOT 0<=1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range)")
                                                            (("1"
                                                              (move-terms
                                                               1
                                                               r
                                                               1)
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "NOT 1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range) < max(dnl - i, 1)")
                                                              (("1"
                                                                (move-terms
                                                                 1
                                                                 l
                                                                 1)
                                                                (("1"
                                                                  (cross-mult
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "dl"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (case
                                                                       "NOT range / max(dnl - i, 1) * max(dnl - i, 1) = range")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replaces
                                                                         -1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (split
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (cross-mult
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "max")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "max")
                                                (("2"
                                                  (lift-if 1)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((global_decode_correct_alt formula-decl nil abstract_cpr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (global_delta const-decl "real" abstract_cpr nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dnl skolem-const-decl "posnat" abstract_cpr nil)
    (i skolem-const-decl "subrange(0, 1)" abstract_cpr nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zone_offset const-decl "posreal" abstract_cpr nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (global_decode const-decl "real" abstract_cpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (global_decode_neg 0
  (global_decode_neg-1 nil 3728924735
   ("" (skeep)
    (("" (lemma " global_decode_correct_alt")
      (("" (skoletin)
        (("" (skoletin)
          (("" (skoletin)
            (("" (skoletin)
              (("" (inst -5 "bins" "dnl" "i" "pos0" "pos1" "range")
                (("" (flatten)
                  (("" (replace -1)
                    (("" (skoletin)
                      (("" (skoletin)
                        (("" (skoletin)
                          (("" (skoletin)
                            (("" (replace -11 :dir rl)
                              ((""
                                (replace -5)
                                ((""
                                  (replace -10 :dir rl)
                                  ((""
                                    (replace -4)
                                    ((""
                                      (replace -9 :dir rl)
                                      ((""
                                        (replace -3)
                                        ((""
                                          (replace -8 :dir rl)
                                          ((""
                                            (replace -2)
                                            ((""
                                              (move-terms 1 r 1)
                                              (("1"
                                                (move-terms 1 l 1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand
                                                     "global_delta")
                                                    (("1"
                                                      (case
                                                       " floor(floor(1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range))
               / max(dnl - i, 1)) <= -1")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "range")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (case
                                                           "1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range) <0")
                                                          (("1"
                                                            (typepred
                                                             "floor(1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range))")
                                                            (("1"
                                                              (case
                                                               "NOT floor(1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range)) <0 ")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT floor(1 / 2 ^ (1 + bins) + pos / dl(max(dnl - i, 1), range)) /
             max(dnl - i, 1) <0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (move-terms
                                                             1
                                                             l
                                                             1)
                                                            (("2"
                                                              (cross-mult
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "max")
                                                        (("3"
                                                          (lift-if 1)
                                                          (("3"
                                                            (split 1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "max")
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "max")
                                                (("2"
                                                  (lift-if 1)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((global_decode_correct_alt formula-decl nil abstract_cpr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (global_delta const-decl "real" abstract_cpr nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dnl skolem-const-decl "posnat" abstract_cpr nil)
    (i skolem-const-decl "subrange(0, 1)" abstract_cpr nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (recovered_position const-decl "real" abstract_cpr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (dl const-decl "posreal" abstract_cpr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zone_offset const-decl "posreal" abstract_cpr nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (global_decode const-decl "real" abstract_cpr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (enc_mod_val application-judgement "{x: nat | x < 2 ^ binmod}"
     abstract_cpr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (close_mod_le_to_close 0
  (close_mod_le_to_close-1 nil 3731847788
   ("" (skeep)
    (("" (expand "close_mod_le")
      (("" (split -1)
        (("1" (inst 1 "a-modulus*floor((a-b)/modulus)" "b")
          (("1" (assert)
            (("1" (ground)
              (("1" (lemma "mod_multiple")
                (("1"
                  (inst -1 "0" "modulus" "floor((a - b) / modulus)")
                  (("1" (assert)
                    (("1" (expand "MOD")
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "MOD")
                (("2" (expand "mod") (("2" (assert) nil nil)) nil))
                nil)
               ("3" (expand "MOD")
                (("3" (lemma "reals@reals_mod.mod_pos")
                  (("3" (inst?)
                    (("3" (flatten)
                      (("3"
                        (case " -1 * (modulus * floor((a - b) / modulus)) - b + a = mod(a - b, modulus)")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "abs")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "mod") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst 1 "a-modulus*(floor((a-b)/modulus)+1)" "b")
          (("2" (ground)
            (("1" (lemma "mod_multiple")
              (("1"
                (inst -1 "0" "modulus" "floor((a - b) / modulus)+1")
                (("1" (grind) nil nil)) nil))
              nil)
             ("2" (expand "MOD")
              (("2" (expand "mod") (("2" (assert) nil nil)) nil)) nil)
             ("3"
              (case "-1 * (floor((a - b) / modulus) * modulus) - b - modulus + a = MOD(a-b,modulus)-modulus")
              (("1" (replace -1)
                (("1" (lemma "mod_pos")
                  (("1" (inst -1 " a-b" "modulus")
                    (("1" (flatten)
                      (("1" (move-terms -2 r 1)
                        (("1" (expand "MOD")
                          (("1" (expand "abs")
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "MOD")
                (("2" (expand "mod") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((close_mod_le const-decl "bool" abstract_cpr nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (mod_pos formula-decl nil reals_mod "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (close_to_close_mod_le 0
  (close_to_close_mod_le-1 nil 3732609447
   ("" (skeep)
    (("" (expand "MOD")
      (("" (expand "mod")
        (("" (name "am" " floor((a - a_pr) / modulus)")
          (("" (name "bm" " floor((b - b_pr) / modulus)")
            (("" (replace -1)
              (("" (replace -2)
                (("" (move-terms -3 l 1)
                  (("" (move-terms -3 l 1)
                    (("" (move-terms -4 l 1)
                      (("" (move-terms -4 l 1)
                        (("" (simplify)
                          (("" (expand "close_mod_le")
                            (("" (lemma "mod_multiple")
                              ((""
                                (replace -4 1)
                                ((""
                                  (replace -5 1)
                                  ((""
                                    (simplify 1)
                                    ((""
                                      (inst
                                       -1
                                       "a_pr - b_pr"
                                       "modulus"
                                       "am-bm")
                                      ((""
                                        (expand "MOD")
                                        ((""
                                          (replace -1 1)
                                          ((""
                                            (hide-all-but (-6 1))
                                            ((""
                                              (case "modulus<=eps")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "mod_pos")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flip-ineq 1)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (lift-if -2)
                                                    (("2"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (expand
                                                             "mod")
                                                            (("1"
                                                              (lemma
                                                               "floor_0")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "(a_pr - b_pr) / modulus + 1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "floor_plus_int")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "1"
                                                                           "(a_pr - b_pr) / modulus")
                                                                          (("1"
                                                                            (move-terms
                                                                             -1
                                                                             r
                                                                             2)
                                                                            (("1"
                                                                              (replaces
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (move-terms
                                                                         1
                                                                         r
                                                                         1)
                                                                        (("2"
                                                                          (simplify
                                                                           1)
                                                                          (("2"
                                                                            (cross-mult
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (move-terms
                                                                           1
                                                                           l
                                                                           1)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide 3)
                                                          (("2"
                                                            (flip-ineq
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "mod")
                                                              (("2"
                                                                (lemma
                                                                 "floor_0")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "(a_pr - b_pr) / modulus")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (close_mod_le const-decl "bool" abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (close_mod_lt_to_close 0
  (close_mod_lt_to_close-1 nil 3731847914
   ("" (skeep)
    (("" (expand "close_mod_lt")
      (("" (split -1)
        (("1" (inst 1 "a-modulus*floor((a-b)/modulus)" "b")
          (("1" (assert)
            (("1" (ground)
              (("1" (lemma "mod_multiple")
                (("1"
                  (inst -1 "0" "modulus" "floor((a - b) / modulus)")
                  (("1" (assert)
                    (("1" (expand "MOD")
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "MOD")
                (("2" (expand "mod") (("2" (assert) nil nil)) nil))
                nil)
               ("3" (expand "MOD")
                (("3" (lemma "reals@reals_mod.mod_pos")
                  (("3" (inst?)
                    (("3" (flatten)
                      (("3"
                        (case " -1 * (modulus * floor((a - b) / modulus)) - b + a = mod(a - b, modulus)")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "abs")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "mod") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst 1 "a-modulus*(floor((a-b)/modulus)+1)" "b")
          (("2" (ground)
            (("1" (lemma "mod_multiple")
              (("1"
                (inst -1 "0" "modulus" "floor((a - b) / modulus)+1")
                (("1" (grind) nil nil)) nil))
              nil)
             ("2" (expand "MOD")
              (("2" (expand "mod") (("2" (assert) nil nil)) nil)) nil)
             ("3"
              (case "-1 * (floor((a - b) / modulus) * modulus) - b - modulus + a = MOD(a-b,modulus)-modulus")
              (("1" (replace -1)
                (("1" (lemma "mod_pos")
                  (("1" (inst -1 " a-b" "modulus")
                    (("1" (flatten)
                      (("1" (move-terms -2 r 1)
                        (("1" (expand "MOD")
                          (("1" (expand "abs")
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "MOD")
                (("2" (expand "mod") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((close_mod_lt const-decl "bool" abstract_cpr nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (mod_pos formula-decl nil reals_mod "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (close_mod_enc 0
  (close_mod_enc-1 nil 3730735738
   ("" (skeep)
    (("" (expand "enc_mod")
      ((""
        (case "NOT enc_raw(range, dnl, bins)(pos0) = enc_raw(range, dnl, bins)(pos1)")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "enc_raw")
              (("1"
                (case "mod(pos0, dl(dnl, range)) = mod(pos1, dl(dnl, range))")
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "dl")
                    (("2" (expand "MOD")
                      (("2" (expand "mod" -1)
                        (("2" (lemma "mod_multiple")
                          (("2"
                            (inst -1 "pos1" "range/dnl"
                             "dnl*floor((pos0 - pos1) / range)")
                            (("2"
                              (case "dnl * floor((pos0 - pos1) / range) * (range / dnl) = range * floor((pos0 - pos1) / range)")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (enc_mod const-decl "int" abstract_cpr nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (MOD const-decl
     "{r: real | r >= 0 AND r < y AND r = x - y * floor(x / y)}"
     abstract_cpr nil)
    (mod_multiple formula-decl nil reals_mod "reals/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (dl const-decl "posreal" abstract_cpr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (enc_raw const-decl "int" abstract_cpr nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

