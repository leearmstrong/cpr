(uint32
 (div_shift_TCC1 0
  (div_shift_TCC1-2 nil 3735312133
   ("" (skeep)
    (("" (typepred (a))
      (("" (case "a/2^n<2^32")
        (("1" (assert) nil nil)
         ("2" (cross-mult 1)
          (("2" (case "1<=2^n")
            (("1" (mult-ineq -1 -2) (("1" (assert) nil nil)) nil)
             ("2" (assert)
              (("2" (typepred (n))
                (("2" (lemma "both_sides_expt_gt1_le")
                  (("2" (inst -1 "2" "0" "n")
                    (("2" (flatten)
                      (("2" (hide -1)
                        (("2" (assert)
                          (("2" (eval-expr "2^0")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)
  (div_shift_TCC1-1 nil 3735311984 ("" (subtype-tcc) nil nil) nil nil))
 (div_TCC1 0
  (div_TCC1-1 nil 3735311984
   ("" (skeep)
    (("" (typepred "a")
      (("" (eval-expr "2^32")
        (("" (assert)
          (("" (replaces -1)
            (("" (typepred "b")
              (("" (assert)
                (("" (case "not a/b>=0")
                  (("1" (assert) (("1" (cross-mult 1) nil nil)) nil)
                   ("2" (assert)
                    (("2" (case "a/b<4294967296")
                      (("1" (assert) nil nil)
                       ("2" (cross-mult 1) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (mod_uint_TCC1 0
  (mod_uint_TCC1-1 nil 3735311984
   ("" (skeep)
    (("" (case "NOT a-b*floor(a/b)  =  mod(a,b)")
      (("1" (expand "mod") (("1" (propax) nil nil)) nil)
       ("2" (replaces -1)
        (("2" (expand "div")
          (("2" (expand "times")
            (("2" (typepred "floor(a/b)")
              (("2" (mult-by -1 "b")
                (("2" (typepred "a")
                  (("2" (expand "mod" 1 1)
                    (("2" (lemma "floor_0")
                      (("2" (inst -1 "b * floor(a / b) / 2 ^ 32")
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (split -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "minus")
                                      (("1"
                                        (expand "mod" 1 1)
                                        (("1"
                                          (lemma "floor_0")
                                          (("1"
                                            (inst
                                             -1
                                             "(a - b * floor(a / b)) / 2 ^ 32")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "mod")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (cross-mult 1)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (case
                                                         "NOT a - b * floor(a / b) < a")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "floor(a/b)>=0")
                                                            (("1"
                                                              (mult-by
                                                               -1
                                                               "b")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "a/b>=0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (cross-mult 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (eval-expr
                                     "2^32
")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case "a/b>=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "floor(a/b) >=0")
                                                (("1"
                                                  (mult-by -1 "b")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (cross-mult 1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (div const-decl "unsigned_int" uint32 nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (minus const-decl "unsigned_int" uint32 nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (times const-decl "unsigned_int" uint32 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (closest_div_mult_TCC1 0
  (closest_div_mult_TCC1-1 nil 3735404124
   ("" (skeep)
    (("" (typepred "ex")
      (("" (lemma "both_sides_expt_gt1_lt")
        (("" (inst -1 "2 " "30" "32")
          (("" (assert)
            (("" (lemma "both_sides_expt_gt1_le")
              (("" (inst -1 "2" "ex" "30") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil))
   nil))
 (closest_div_mult_TCC2 0
  (closest_div_mult_TCC2-1 nil 3735404124
   ("" (skeep)
    (("" (typepred "ex")
      (("" (lemma "both_sides_expt_gt1_lt")
        (("" (inst -1 "2" "ex" "32") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil))
   nil))
 (closest_div_mult_TCC3 0
  (closest_div_mult_TCC3-1 nil 3735404124 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (div const-decl "unsigned_int" uint32 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (times const-decl "unsigned_int" uint32 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (closest_div_mult_TCC4 0
  (closest_div_mult_TCC4-1 nil 3735404124
   ("" (skeep)
    (("" (skeep)
      (("" (expand "plus")
        (("" (expand "mod")
          (("" (lemma "floor_0")
            (("" (inst -1 "(1 + ex) / 2 ^ 32")
              (("" (flatten)
                (("" (hide -1)
                  (("" (split -1)
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (lemma "both_sides_expt_gt1_lt")
                            (("1" (inst -1 "2" "1+ex" "32")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (cross-mult 1) nil nil)
                     ("3" (cross-mult 1)
                      (("3" (eval-expr (! 1 r))
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (<= const-decl "bool" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (closest_div_mult_TCC5 0
  (closest_div_mult_TCC5-1 nil 3735404124 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (div const-decl "unsigned_int" uint32 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (times const-decl "unsigned_int" uint32 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (floor_div_div 0
  (floor_div_div-1 nil 3735316395
   ("" (skeep)
    (("" (case "exists (d:int, y:real): x= b*d+y and y>=0 and y<b")
      (("1" (skeep)
        (("1" (replaces -1)
          (("1" (lemma "floor_plus_int")
            (("1" (inst-cp -1 "b*d" "y")
              (("1" (replaces -2)
                (("1" (rewrite "div_distributes" :dir rl)
                  (("1" (rewrite "div_distributes" :dir rl)
                    (("1" (case "NOT (b * d / b) = d")
                      (("1" (assert) nil nil)
                       ("2" (replaces -1)
                        (("2" (inst-cp -1 "d" "(floor(y)/b)")
                          (("2" (replaces -1)
                            (("2" (replaces -2)
                              (("2"
                                (typepred "floor(y)")
                                (("2"
                                  (case "NOT floor(y)/b<1 ")
                                  (("1"
                                    (assert)
                                    (("1" (cross-mult 1) nil nil))
                                    nil)
                                   ("2"
                                    (case "NOT floor(y)>=0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (case "NOT (floor(y)/b)>=0")
                                      (("1"
                                        (assert)
                                        (("1" (cross-mult 1) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "floor_0")
                                        (("2"
                                          (inst -1 "(floor(y) / b)")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (inst
                                                     -6
                                                     "d"
                                                     "(y/b)")
                                                    (("1"
                                                      (replaces -6)
                                                      (("1"
                                                        (lemma
                                                         "floor_0")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(y/b)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (cross-mult
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "real_parts")
          (("2" (inst -1 "x/b")
            (("2" (cross-mult -1)
              (("2" (inst 1 "floor(x/b)" "fractional(x / b) * b")
                (("2" (assert)
                  (("2" (typepred "fractional(x / b)")
                    (("2" (both-sides "*" "b" -1)
                      (("1" (both-sides "*" "b" -2)
                        (("1" (assert) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (TRUE const-decl "bool" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_distributes formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (real_parts formula-decl nil floor_ceil nil)
    (div_cancel3 formula-decl nil real_props nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_times_le formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil))
   nil))
 (plus_assoc 0
  (plus_assoc-1 nil 3735316428
   ("" (assert)
    (("" (skeep)
      (("" (assert) (("" (expand "plus") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (plus const-decl "unsigned_int" uint32 nil))
   nil))
 (plus_over1 0
  (plus_over1-1 nil 3735316464
   ("" (skeep :preds? t)
    (("" (expand "plus")
      (("" (expand "mod")
        (("" (add-formulas -1 -2)
          (("" (div-by - "2^32")
            (("" (both-sides "-" "1" -)
              (("" (both-sides "-" "1" -2)
                (("" (simplify -)
                  (("" (lemma "floor_plus_int")
                    (("" (inst -1 "-1" "(a+b)/2^32")
                      (("" (move-terms -1 r 2)
                        (("" (elim-unary -1)
                          (("" (elim-unary -1)
                            (("" (replaces -1 :dir rl)
                              ((""
                                (lemma "floor_0")
                                ((""
                                  (inst -1 "(a + b) / 2 ^ 32 - 1")
                                  ((""
                                    (flatten)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (split -1)
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (both_sides_minus_ge1 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (plus_over2 0
  (plus_over2-1 nil 3735316503
   ("" (skeep)
    (("" (case "a+b>=2^32")
      (("1" (lemma "plus_over1")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (expand "plus")
          (("2" (flip-ineq 1)
            (("2" (expand "mod")
              (("2" (assert)
                (("2" (div-by -1 "2^32") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (plus_over1 formula-decl nil uint32 nil)
    (plus const-decl "unsigned_int" uint32 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil))
 (plus_reg1 0
  (plus_reg1-1 nil 3735316545
   ("" (skeep)
    (("" (assert)
      (("" (expand "plus")
        (("" (assert)
          (("" (expand "mod")
            (("" (assert)
              (("" (div-by -1 "2^32") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (plus const-decl "unsigned_int" uint32 nil))
   nil))
 (plus_reg2 0
  (plus_reg2-1 nil 3735316586
   ("" (skeep)
    (("" (case "a+b<2^32")
      (("1" (lemma "plus_reg1")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (flip-ineq 1)
        (("2" (lemma "plus_over1")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (plus_over1 formula-decl nil uint32 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (minus_under1 0
  (minus_under1-1 nil 3735316620
   ("" (skeep :preds? t)
    (("" (expand "minus")
      (("" (expand "mod")
        (("" (copy -3)
          (("" (div-by -4 "2^32")
            (("" (both-sides "+" "1" -4)
              (("" (eval-expr "0/2^32")
                (("" (replaces -1)
                  (("" (simplify -4)
                    (("" (case "not  a>=0")
                      (("1" (assert) nil nil)
                       ("2" (move-terms -4 r 1)
                        (("2" (move-terms -4 l 1)
                          (("2" (swap-rel -4)
                            (("2" (simplify -4)
                              (("2"
                                (both-sides "+" "2^32" -4)
                                (("2"
                                  (simplify -4)
                                  (("2"
                                    (eval-expr "2 ^ 32 + -(2 ^ 32)")
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (add-formulas -1 -4)
                                        (("2"
                                          (div-by -1 "2^32")
                                          (("2"
                                            (elim-unary -1)
                                            (("2"
                                              (case
                                               "NOT (2 ^ 32 - b + a) / 2 ^ 32 = 1+(a-b)/2^32")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (eval-expr
                                                   "0/2 ^ 32 ")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (lemma "floor_0")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "1 + (a - b) / 2 ^ 32")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "floor_plus_int")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "1"
                                                                   "(a - b) / 2 ^ 32")
                                                                  (("1"
                                                                    (move-terms
                                                                     -1
                                                                     r
                                                                     2)
                                                                    (("1"
                                                                      (replaces
                                                                       -2)
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (minus const-decl "unsigned_int" uint32 nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (floor_0 formula-decl nil floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (both_sides_plus_gt1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (minus_under2 0
  (minus_under2-1 nil 3735316654
   ("" (skeep)
    (("" (case "a-b<0")
      (("1" (lemma "minus_under1")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (expand "minus")
          (("2" (assert)
            (("2" (expand "mod")
              (("2" (flip-ineq 1)
                (("2" (assert)
                  (("2" (div-by -1 "2^32")
                    (("2" (assert)
                      (("2" (eval-expr "0/2 ^ 32 ")
                        (("2" (replaces -1)
                          (("2" (move-terms -2 l 3)
                            (("2" (simplify -2)
                              (("2"
                                (typepred "floor((a - b) / 2 ^ 32)")
                                (("2"
                                  (move-terms -4 l 1)
                                  (("2"
                                    (move-terms -4 l 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (elim-unary -1)
                                        (("2"
                                          (elim-unary -4)
                                          (("2"
                                            (case
                                             "floor((a-b)/2^32)>=0")
                                            (("1"
                                              (both-sides
                                               "*"
                                               "2^32"
                                               -1)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_under1 formula-decl nil uint32 nil)
    (minus const-decl "unsigned_int" uint32 nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pos_times_ge formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/"))
   nil))
 (minus_reg1 0
  (minus_reg1-1 nil 3735316707
   ("" (skeep :preds? t)
    (("" (assert)
      (("" (expand "minus")
        (("" (assert)
          (("" (expand "mod")
            (("" (assert)
              (("" (case "not a-b< 2^32")
                (("1" (assert) nil nil)
                 ("2" (div-by (-1 -4) "2^32") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus const-decl "unsigned_int" uint32 nil))
   nil))
 (minus_reg2 0
  (minus_reg2-1 nil 3735316747
   ("" (skeep)
    (("" (case "a-b>=0")
      (("1" (lemma "minus_reg1")
        (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (flip-ineq 1)
        (("2" (lemma "minus_under1")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((unsigned_int type-eq-decl nil uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_reg1 formula-decl nil uint32 nil)
    (minus_under1 formula-decl nil uint32 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_reg1 0
  (times_reg1-1 nil 3735316787
   ("" (skeep)
    (("" (expand "times")
      (("" (assert)
        (("" (expand "mod")
          (("" (div-by -1 "2^32") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (times const-decl "unsigned_int" uint32 nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "below(m)" reals_mod "reals/"))
   nil))
 (mod_mod 0
  (mod_mod-1 nil 3735316824
   ("" (skeep) (("" (ground) (("" (grind) nil nil)) nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/"))
   nil))
 (closest_div_mult_def 0
  (closest_div_mult_def-1 nil 3736070405
   ("" (skeep)
    (("" (expand "closest_div_mult")
      (("" (lift-if 1)
        (("" (split)
          (("1" (flatten)
            (("1" (replace -1)
              (("1" (lemma "floor_plus_int")
                (("1" (inst -1 "2 ^ ex * num / 1" "1/2")
                  (("1" (replace -1)
                    (("1"
                      (eval-expr "floor(1/2)
")
                      (("1" (replaces -1)
                        (("1" (expand "times") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "plus_reg1")
              (("2" (inst -1 "ex" "1")
                (("2" (assert)
                  (("2" (typepred "ex")
                    (("2" (eval-expr "2^32")
                      (("2" (assert)
                        (("2"
                          (case "mod_uint(num, den) = mod(num, den)")
                          (("1" (lemma "times_reg1")
                            (("1"
                              (inst -1 "2^plus(ex,1)"
                               "mod_uint(num,den)")
                              (("1"
                                (case "NOT mod_uint(num, den)<=den-1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "mod_pos")
                                        (("1"
                                          (inst -1 "num" "den")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -8 -7 :dir rl)
                                  (("2"
                                    (mult-by -1 "2^plus(ex,1)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (replace -8)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (expand "div" 2 3)
                                              (("2"
                                                (copy -1)
                                                (("2"
                                                  (div-by -1 "2")
                                                  (("2"
                                                    (copy -8)
                                                    (("2"
                                                      (div-by -1 "2")
                                                      (("2"
                                                        (eval-expr
                                                         "2^32")
                                                        (("2"
                                                          (lemma
                                                           "plus_reg1")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "floor((2 ^ (1 + ex)) * mod(num, den) / den)"
                                                             "1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (case
                                                                   "NOT (mod(num, den) * 2 ^ (1 + ex))/den <= ((2 ^ (1 + ex)) * den - 2 ^ (1 + ex))/2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "NOT 2<=den")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (mult-ineq
                                                                           -1
                                                                           -5)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "div"
                                                                         +)
                                                                        (("2"
                                                                          (expand
                                                                           "plus"
                                                                           +)
                                                                          (("2"
                                                                            (expand
                                                                             "times "
                                                                             +)
                                                                            (("2"
                                                                              (lemma
                                                                               "mod_mod")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "floor((1 + floor((2 ^ (1 + ex)) * mod(num, den) / den)) / 2)"
                                                                                 "2 ^ ex * floor(num / den)"
                                                                                 "2 ^ 32")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "floor_plus_int")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "2 ^ ex * floor(num / den)"
                                                                                       "(1 + floor((2 ^ (1 + ex)) * mod(num, den) / den)) / 2")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT 2 ^ ex * floor(num / den) = (2^(1+ex)*floor(num/den))/2")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "expt_plus"
                                                                                             1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "expt_x1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "div_distributes"
                                                                                               2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "floor_plus_int")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "(2 ^ (1 + ex) * floor(num / den)) + 1"
                                                                                                   "(2 ^ (1 + ex)) * mod(num, den) / den")
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "floor_div_div"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "NOT (1 + (2 ^ (1 + ex)) * mod(num, den) / den +
                  (2 ^ (1 + ex) * floor(num / den))) = 1 + 2^(1+ex)*(num/den)")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "real_parts")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "num / den")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "mod_frac")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (mult-by
                                                                                                                     -1
                                                                                                                     "2^(1+ex)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "expt_plus"
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "expt_x1"
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "div_distributes"
                                                                                                                 2
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "(2 ^ (1 + ex)) * mod(num, den) / den>=0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "mod_uint(num, den)")
                            (("2" (expand "mod")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closest_div_mult const-decl "unsigned_int" uint32 nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (num skolem-const-decl "unsigned_int" uint32 nil)
    (ex skolem-const-decl "{ex: unsigned_int |
         ex <= 30 AND (2 ^ (1 + ex)) * den - 2 ^ (1 + ex) < 2 ^ 32}"
     uint32 nil)
    (den skolem-const-decl "{den: unsigned_int | den /= 0}" uint32 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (times const-decl "unsigned_int" uint32 nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (floor_plus_int formula-decl nil floor_ceil nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (plus const-decl "unsigned_int" uint32 nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div const-decl "unsigned_int" uint32 nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (mod_mod formula-decl nil uint32 nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_distributes formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (floor_div_div formula-decl nil uint32 nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_parts formula-decl nil floor_ceil nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod_pos formula-decl nil reals_mod "reals/")
    (times_reg1 formula-decl nil uint32 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (closest_mult_div_shift_TCC1 0
  (closest_mult_div_shift_TCC1-1 nil 3735473261
   ("" (subtype-tcc) nil nil) nil nil))
 (closest_mult_div_shift_TCC2 0
  (closest_mult_div_shift_TCC2-1 nil 3735473261
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (times const-decl "unsigned_int" uint32 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (div_shift const-decl "unsigned_int" uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (closest_mult_div_shift_TCC3 0
  (closest_mult_div_shift_TCC3-1 nil 3735473261
   ("" (skeep)
    (("" (assert)
      (("" (typepred "z")
        (("" (assert)
          (("" (lemma "both_sides_expt_gt1_le")
            (("" (inst -1 "2" "z" "20")
              (("" (assert)
                (("" (eval-expr (! -1 r))
                  (("" (eval-expr (! -3 r)) (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   nil))
 (closest_mult_div_shift_TCC4 0
  (closest_mult_div_shift_TCC4-1 nil 3735473261
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (times const-decl "unsigned_int" uint32 nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (div_shift const-decl "unsigned_int" uint32 nil)
    (^ const-decl "real" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (closest_mult_div_shift_TCC5 0
  (closest_mult_div_shift_TCC5-1 nil 3735473261
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "div_shift" -1)
          (("" (lemma "times_reg1")
            (("" (inst -1 "x" "floor(a / 2 ^ z)")
              (("" (typepred "floor(a/2^z)")
                (("" (hide -2)
                  (("" (mult-by -1 "x")
                    (("" (case "NOT x/2^z<1")
                      (("1" (assert)
                        (("1" (cross-mult 1)
                          (("1" (typepred "z")
                            (("1" (lemma "both_sides_expt_gt1_le")
                              (("1"
                                (inst -1 "2" "12" "z")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (eval-expr "2^12")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "a")
                        (("2" (mult-ineq -1 -2)
                          (("2" (assert)
                            (("2" (lemma "times_reg1")
                              (("2"
                                (inst -1 "2" "x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (eval-expr "2^32")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "not mod_uint(a,2^z)  = mod(a,2^z)")
                                        (("1"
                                          (expand "mod")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (lemma "times_reg1")
                                          (("2"
                                            (inst
                                             -1
                                             "times(2, x)"
                                             " mod_uint(a, 2 ^ z)")
                                            (("2"
                                              (case
                                               "NOT mod(a, 2^z)<2^z")
                                              (("1"
                                                (expand "mod")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (div-by 1 " 2^z")
                                                    (("1"
                                                      (rewrite
                                                       "div_distributes_minus"
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (case
                                                         "NOT (2 ^ z * floor(a / 2 ^ z) / 2 ^ z) = floor(a/2^z)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (lemma
                                                             "real_parts")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "a/2^z")
                                                              (("2"
                                                                (move-terms
                                                                 -1
                                                                 r
                                                                 1)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -3 -1 :dir rl)
                                                (("2"
                                                  (typepred "x")
                                                  (("2"
                                                    (mult-by -2 "2")
                                                    (("2"
                                                      (mult-ineq -1 -3)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "z")
                                                          (("2"
                                                            (lemma
                                                             "both_sides_expt_gt1_le")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "2"
                                                               "z "
                                                               "20")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (eval-expr
                                                                       "2^20")
                                                                      (("2"
                                                                        (eval-expr
                                                                         "2^32")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "NOT div_shift(times(times(2, x), mod_uint(a, 2 ^ z)), z)<= 512")
                                                                            (("1"
                                                                              (expand
                                                                               "div_shift")
                                                                              (("1"
                                                                                (typepred
                                                                                 "floor(times(times(2, x), mod_uint(a, 2 ^ z)) / 2 ^ z)")
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT times(times(2, x), mod_uint(a, 2 ^ z)) / 2 ^ z <= 512")
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "plus_reg1")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "div_shift(times(times(2, x), mod_uint(a, 2 ^ z)), z)"
                                                                                 "1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "plus_reg1")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "q"
                                                                                       "r")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -26
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -24
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -25
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -14)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -15)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -17)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -23)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "div_shift"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "floor_plus_int")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1"
                                                                                                             " 2 * (mod(a, 2 ^ z) * x) / 2 ^ z")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "floor_div_div")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "2 * (mod(a, 2 ^ z) * x) / 2 ^ z + 1"
                                                                                                                   "2^1")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "NOT (2 * (mod(a, 2 ^ z) * x) / 2 ^ z + 1) / 2 ^ 1 = (mod(a, 2 ^ z) * x) / 2 ^ z + 1/2")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "expt_x1"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         -4)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "floor_plus_int")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             " x * floor(a / 2 ^ z)"
                                                                                                                             "(mod(a, 2 ^ z) * x) / 2 ^ z + 1 / 2")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               -5
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "NOT (mod(a, 2 ^ z) * x) / 2 ^ z + 1 / 2 + x * floor(a / 2 ^ z) = 1/2 + (a/2^z)*x")
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "real_parts")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "a/2^z")
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "mod_frac")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "a"
                                                                                                                                         "2^z")
                                                                                                                                        (("1"
                                                                                                                                          (replaces
                                                                                                                                           -1
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (move-terms
                                                                                                                                             -1
                                                                                                                                             r
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               1
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replaces
                                                                                                                                   -1
                                                                                                                                   -6)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "NOT (a / 2 ^ z) * x = (a * x) / 2 ^ z")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replaces
                                                                                                                                       -1
                                                                                                                                       -6)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "1/2 + (a * x) / 2 ^ z < 2^32")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (move-terms
                                                                                                                                             1
                                                                                                                                             l
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (eval-expr
                                                                                                                                               (!
                                                                                                                                                1
                                                                                                                                                r))
                                                                                                                                              (("2"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (cross-mult
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "x")
                                                                                                                                                    (("2"
                                                                                                                                                      (mult-ineq
                                                                                                                                                       -2
                                                                                                                                                       -24)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (mult-by
                                                                                                                                                           -1
                                                                                                                                                           "2")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (eval-expr
                                                                                                                                                               (!
                                                                                                                                                                -1
                                                                                                                                                                r))
                                                                                                                                                              (("2"
                                                                                                                                                                (replaces
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -12
                                                                                                                                                                   "8589934591")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -12
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (simplify)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (swap-rel
                                                                                                                                                                           -14)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "both_sides_expt_gt1_le")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "2"
                                                                                                                                                                               "12 "
                                                                                                                                                                               "z")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (eval-expr
                                                                                                                                                                                       (!
                                                                                                                                                                                        -1
                                                                                                                                                                                        l))
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_shift const-decl "unsigned_int" uint32 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (unsigned_int type-eq-decl nil uint32 nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (real_parts formula-decl nil floor_ceil nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (plus_reg1 formula-decl nil uint32 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (mod_frac formula-decl nil reals_mod "reals/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (floor_div_div formula-decl nil uint32 nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (times const-decl "unsigned_int" uint32 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (mod_uint const-decl
     "{ans: unsigned_int | ans = a - b * floor(a / b)}" uint32 nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nil application-judgement "below(m)" reals_mod "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_reg1 formula-decl nil uint32 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   nil)))

